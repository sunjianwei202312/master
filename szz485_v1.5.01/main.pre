
# 1 "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\main.c"

# 19 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\pic16f887.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;

# 30
volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
unsigned char T2CON @ 0x012;
volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;
volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;
volatile unsigned char RCSTA @ 0x018;
volatile unsigned char TXREG @ 0x019;
volatile unsigned char RCREG @ 0x01A;
volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;
unsigned char OPTION @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;

# 60
volatile unsigned char TRISE @ 0x089;
unsigned char PIE1 @ 0x08C;
unsigned char PIE2 @ 0x08D;
volatile unsigned char PCON @ 0x08E;
volatile unsigned char OSCCON @ 0x08F;
unsigned char OSCTUNE @ 0x090;
volatile unsigned char SSPCON2 @ 0x091;
unsigned char PR2 @ 0x092;
unsigned char SSPADD @ 0x093;
unsigned char SSPMSK @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;
unsigned char WPUB @ 0x095;
unsigned char IOCB @ 0x096;
unsigned char VRCON @ 0x097;
volatile unsigned char TXSTA @ 0x098;
unsigned char SPBRG @ 0x099;
unsigned char SPBRGH @ 0x09A;
volatile unsigned char PWM1CON @ 0x09B;
volatile unsigned char ECCPAS @ 0x09C;
volatile unsigned char PSTRCON @ 0x09D;
volatile unsigned char ADRESL @ 0x09E;
unsigned char ADCON1 @ 0x09F;
volatile unsigned char WDTCON @ 0x105;
volatile unsigned char CM1CON0 @ 0x107;
volatile unsigned char CM2CON0 @ 0x108;
volatile unsigned char CM2CON1 @ 0x109;
volatile unsigned char EEDAT @ 0x10C;

volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;

volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;
volatile unsigned char SRCON @ 0x185;
volatile unsigned char BAUDCTL @ 0x187;
unsigned char ANSEL @ 0x188;
unsigned char ANSELH @ 0x189;
volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
bit RP0 @ ((unsigned)&STATUS*8)+5;
bit RP1 @ ((unsigned)&STATUS*8)+6;
bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;

# 158
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
bit RBIE @ ((unsigned)&INTCON*8)+3;

bit RABIE @ ((unsigned)&INTCON*8)+3;
bit INTE @ ((unsigned)&INTCON*8)+4;
bit T0IE @ ((unsigned)&INTCON*8)+5;
bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit ULPWUIF @ ((unsigned)&PIR2*8)+2;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;
volatile bit OSFIF @ ((unsigned)&PIR2*8)+7;


bit TMR1ON @ ((unsigned)&T1CON*8)+0;
bit TMR1CS @ ((unsigned)&T1CON*8)+1;
bit T1SYNC @ ((unsigned)&T1CON*8)+2;
bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
bit TMR1GE @ ((unsigned)&T1CON*8)+6;
bit T1GINV @ ((unsigned)&T1CON*8)+7;


bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
bit TMR2ON @ ((unsigned)&T2CON*8)+2;
bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
bit CKP @ ((unsigned)&SSPCON*8)+4;
bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;


bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
bit P1M1 @ ((unsigned)&CCP1CON*8)+7;


volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
bit ADDEN @ ((unsigned)&RCSTA*8)+3;
bit CREN @ ((unsigned)&RCSTA*8)+4;
bit SREN @ ((unsigned)&RCSTA*8)+5;
bit RX9 @ ((unsigned)&RCSTA*8)+6;
bit SPEN @ ((unsigned)&RCSTA*8)+7;


bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit CCP2Y @ ((unsigned)&CCP2CON*8)+4;
volatile bit CCP2X @ ((unsigned)&CCP2CON*8)+5;


bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
bit CHS0 @ ((unsigned)&ADCON0*8)+2;
bit CHS1 @ ((unsigned)&ADCON0*8)+3;
bit CHS2 @ ((unsigned)&ADCON0*8)+4;
bit CHS3 @ ((unsigned)&ADCON0*8)+5;
bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


bit PS0 @ ((unsigned)&OPTION*8)+0;
bit PS1 @ ((unsigned)&OPTION*8)+1;
bit PS2 @ ((unsigned)&OPTION*8)+2;
bit PSA @ ((unsigned)&OPTION*8)+3;
bit T0SE @ ((unsigned)&OPTION*8)+4;
bit T0CS @ ((unsigned)&OPTION*8)+5;
bit INTEDG @ ((unsigned)&OPTION*8)+6;
bit RBPU @ ((unsigned)&OPTION*8)+7;

bit RABPU @ ((unsigned)&OPTION*8)+7;


bit TRISA0 @ ((unsigned)&TRISA*8)+0;
bit TRISA1 @ ((unsigned)&TRISA*8)+1;
bit TRISA2 @ ((unsigned)&TRISA*8)+2;
bit TRISA3 @ ((unsigned)&TRISA*8)+3;
bit TRISA4 @ ((unsigned)&TRISA*8)+4;
bit TRISA5 @ ((unsigned)&TRISA*8)+5;
bit TRISA6 @ ((unsigned)&TRISA*8)+6;
bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;

# 317
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


bit TMR1IE @ ((unsigned)&PIE1*8)+0;
bit TMR2IE @ ((unsigned)&PIE1*8)+1;
bit CCP1IE @ ((unsigned)&PIE1*8)+2;
bit SSPIE @ ((unsigned)&PIE1*8)+3;
bit TXIE @ ((unsigned)&PIE1*8)+4;
bit RCIE @ ((unsigned)&PIE1*8)+5;
bit ADIE @ ((unsigned)&PIE1*8)+6;


bit CCP2IE @ ((unsigned)&PIE2*8)+0;
bit ULPWUIE @ ((unsigned)&PIE2*8)+2;
bit BCLIE @ ((unsigned)&PIE2*8)+3;
bit EEIE @ ((unsigned)&PIE2*8)+4;
bit C1IE @ ((unsigned)&PIE2*8)+5;
bit C2IE @ ((unsigned)&PIE2*8)+6;
bit OSFIE @ ((unsigned)&PIE2*8)+7;


volatile bit BOR @ ((unsigned)&PCON*8)+0;
volatile bit POR @ ((unsigned)&PCON*8)+1;
bit SBOREN @ ((unsigned)&PCON*8)+4;
bit ULPWUE @ ((unsigned)&PCON*8)+5;


bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit LTS @ ((unsigned)&OSCCON*8)+1;
volatile bit HTS @ ((unsigned)&OSCCON*8)+2;
volatile bit OSTS @ ((unsigned)&OSCCON*8)+3;
bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
bit CKE @ ((unsigned)&SSPSTAT*8)+6;
bit SMP @ ((unsigned)&SSPSTAT*8)+7;


bit WPUB0 @ ((unsigned)&WPUB*8)+0;
bit WPUB1 @ ((unsigned)&WPUB*8)+1;
bit WPUB2 @ ((unsigned)&WPUB*8)+2;
bit WPUB3 @ ((unsigned)&WPUB*8)+3;
bit WPUB4 @ ((unsigned)&WPUB*8)+4;
bit WPUB5 @ ((unsigned)&WPUB*8)+5;
bit WPUB6 @ ((unsigned)&WPUB*8)+6;
bit WPUB7 @ ((unsigned)&WPUB*8)+7;


bit IOCB0 @ ((unsigned)&IOCB*8)+0;
bit IOCB1 @ ((unsigned)&IOCB*8)+1;
bit IOCB2 @ ((unsigned)&IOCB*8)+2;
bit IOCB3 @ ((unsigned)&IOCB*8)+3;
bit IOCB4 @ ((unsigned)&IOCB*8)+4;
bit IOCB5 @ ((unsigned)&IOCB*8)+5;
bit IOCB6 @ ((unsigned)&IOCB*8)+6;
bit IOCB7 @ ((unsigned)&IOCB*8)+7;


bit VR0 @ ((unsigned)&VRCON*8)+0;
bit VR1 @ ((unsigned)&VRCON*8)+1;
bit VR2 @ ((unsigned)&VRCON*8)+2;
bit VR3 @ ((unsigned)&VRCON*8)+3;
bit VRSS @ ((unsigned)&VRCON*8)+4;
bit VRR @ ((unsigned)&VRCON*8)+5;
bit VROE @ ((unsigned)&VRCON*8)+6;
bit VREN @ ((unsigned)&VRCON*8)+7;


volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
bit BRGH @ ((unsigned)&TXSTA*8)+2;
bit SENDB @ ((unsigned)&TXSTA*8)+3;
bit SYNC @ ((unsigned)&TXSTA*8)+4;
bit TXEN @ ((unsigned)&TXSTA*8)+5;
bit TX9 @ ((unsigned)&TXSTA*8)+6;
bit CSRC @ ((unsigned)&TXSTA*8)+7;


bit BRG0 @ ((unsigned)&SPBRG*8)+0;
bit BRG1 @ ((unsigned)&SPBRG*8)+1;
bit BRG2 @ ((unsigned)&SPBRG*8)+2;
bit BRG3 @ ((unsigned)&SPBRG*8)+3;
bit BRG4 @ ((unsigned)&SPBRG*8)+4;
bit BRG5 @ ((unsigned)&SPBRG*8)+5;
bit BRG6 @ ((unsigned)&SPBRG*8)+6;
bit BRG7 @ ((unsigned)&SPBRG*8)+7;


bit BRG8 @ ((unsigned)&SPBRGH*8)+0;
bit BRG9 @ ((unsigned)&SPBRGH*8)+1;
bit BRG10 @ ((unsigned)&SPBRGH*8)+2;
bit BRG11 @ ((unsigned)&SPBRGH*8)+3;
bit BRG12 @ ((unsigned)&SPBRGH*8)+4;
bit BRG13 @ ((unsigned)&SPBRGH*8)+5;
bit BRG14 @ ((unsigned)&SPBRGH*8)+6;
bit BRG15 @ ((unsigned)&SPBRGH*8)+7;


volatile bit PDC0 @ ((unsigned)&PWM1CON*8)+0;
volatile bit PDC1 @ ((unsigned)&PWM1CON*8)+1;
volatile bit PDC2 @ ((unsigned)&PWM1CON*8)+2;
volatile bit PDC3 @ ((unsigned)&PWM1CON*8)+3;
volatile bit PDC4 @ ((unsigned)&PWM1CON*8)+4;
volatile bit PDC5 @ ((unsigned)&PWM1CON*8)+5;
volatile bit PDC6 @ ((unsigned)&PWM1CON*8)+6;
volatile bit PRSEN @ ((unsigned)&PWM1CON*8)+7;


bit PSSBD0 @ ((unsigned)&ECCPAS*8)+0;
bit PSSBD1 @ ((unsigned)&ECCPAS*8)+1;
bit PSSAC0 @ ((unsigned)&ECCPAS*8)+2;
bit PSSAC1 @ ((unsigned)&ECCPAS*8)+3;
bit ECCPAS0 @ ((unsigned)&ECCPAS*8)+4;
bit ECCPAS1 @ ((unsigned)&ECCPAS*8)+5;
bit ECCPAS2 @ ((unsigned)&ECCPAS*8)+6;
volatile bit ECCPASE @ ((unsigned)&ECCPAS*8)+7;


volatile bit STRA @ ((unsigned)&PSTRCON*8)+0;
volatile bit STRB @ ((unsigned)&PSTRCON*8)+1;
volatile bit STRC @ ((unsigned)&PSTRCON*8)+2;
volatile bit STRD @ ((unsigned)&PSTRCON*8)+3;
volatile bit STRSYNC @ ((unsigned)&PSTRCON*8)+4;


bit VCFG0 @ ((unsigned)&ADCON1*8)+4;
bit VCFG1 @ ((unsigned)&ADCON1*8)+5;
bit ADFM @ ((unsigned)&ADCON1*8)+7;


bit SWDTEN @ ((unsigned)&WDTCON*8)+0;
bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;


bit C1CH0 @ ((unsigned)&CM1CON0*8)+0;
bit C1CH1 @ ((unsigned)&CM1CON0*8)+1;
bit C1R @ ((unsigned)&CM1CON0*8)+2;
bit C1POL @ ((unsigned)&CM1CON0*8)+4;
bit C1OE @ ((unsigned)&CM1CON0*8)+5;
volatile bit C1OUT @ ((unsigned)&CM1CON0*8)+6;
bit C1ON @ ((unsigned)&CM1CON0*8)+7;


bit C2CH0 @ ((unsigned)&CM2CON0*8)+0;
bit C2CH1 @ ((unsigned)&CM2CON0*8)+1;
bit C2R @ ((unsigned)&CM2CON0*8)+2;
bit C2POL @ ((unsigned)&CM2CON0*8)+4;
bit C2OE @ ((unsigned)&CM2CON0*8)+5;
volatile bit C2OUT @ ((unsigned)&CM2CON0*8)+6;
bit C2ON @ ((unsigned)&CM2CON0*8)+7;


bit C2SYNC @ ((unsigned)&CM2CON1*8)+0;
bit T1GSS @ ((unsigned)&CM2CON1*8)+1;
bit C2RSEL @ ((unsigned)&CM2CON1*8)+4;
bit C1RSEL @ ((unsigned)&CM2CON1*8)+5;
volatile bit MC2OUT @ ((unsigned)&CM2CON1*8)+6;
volatile bit MC1OUT @ ((unsigned)&CM2CON1*8)+7;


bit FVREN @ ((unsigned)&SRCON*8)+0;
volatile bit PULSR @ ((unsigned)&SRCON*8)+2;
volatile bit PULSS @ ((unsigned)&SRCON*8)+3;
bit C2REN @ ((unsigned)&SRCON*8)+4;
bit C1SEN @ ((unsigned)&SRCON*8)+5;
bit SR0 @ ((unsigned)&SRCON*8)+6;
bit SR1 @ ((unsigned)&SRCON*8)+7;


volatile bit ABDEN @ ((unsigned)&BAUDCTL*8)+0;
volatile bit WUE @ ((unsigned)&BAUDCTL*8)+1;
bit BRG16 @ ((unsigned)&BAUDCTL*8)+3;
volatile bit SCKP @ ((unsigned)&BAUDCTL*8)+4;
volatile bit RCIDL @ ((unsigned)&BAUDCTL*8)+6;
volatile bit ABDOVF @ ((unsigned)&BAUDCTL*8)+7;


bit ANS0 @ ((unsigned)&ANSEL*8)+0;
bit ANS1 @ ((unsigned)&ANSEL*8)+1;
bit ANS2 @ ((unsigned)&ANSEL*8)+2;
bit ANS3 @ ((unsigned)&ANSEL*8)+3;
bit ANS4 @ ((unsigned)&ANSEL*8)+4;

# 534
bit ANS8 @ ((unsigned)&ANSELH*8)+0;
bit ANS9 @ ((unsigned)&ANSELH*8)+1;
bit ANS10 @ ((unsigned)&ANSELH*8)+2;
bit ANS11 @ ((unsigned)&ANSELH*8)+3;
bit ANS12 @ ((unsigned)&ANSELH*8)+4;
bit ANS13 @ ((unsigned)&ANSELH*8)+5;


volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;

# 307 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\pic.h"
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);


# 380 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 432
extern bit __timeout, __powerdown;
extern unsigned char __resetbits;

# 4 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\type.h"
typedef unsigned char UINT8 ;
typedef signed char INT8;
typedef unsigned short int UINT16;
typedef signed short int INT16;
typedef unsigned long int UINT32;
typedef signed long int INT32;
typedef float F32;
typedef double D32;

typedef enum BOOL_TYPE {FALSE=0, TRUE} BOOL;

# 20
typedef struct _TIME
{
unsigned char hour;
unsigned char min;
unsigned char sec;
}TIME;

typedef struct _DATE
{
unsigned char day;
unsigned char date;
unsigned char month;
unsigned char year;
}DATE;

typedef struct _NTP_INFO
{

# 50
UINT8 test_mode1;
UINT8 test_mode2;

# 64
UINT8 time_zone;

} NTP_INFO;

typedef enum _DIGITAL_STATE
{
DIGITAL_NORMAL=0,
DIGITAL_JIAOSHI,
DIGITAL_STOP,
DIGITAL_CHASE_TIME,
DIGITAL_DUISHI,
DIGITAL_CLOSE,
DIGITAL_OPEN,
DIGITAL_TEST,
DIGITAL_RESET

}DIGITAL_STATE;

# 4 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\timer1.h"
void timer1_init(void);
void timer1_isr(void);



UINT8 time_add(TIME *t);
UINT8 time_dec(TIME *t);

void date_dec(DATE *t);
void date_add(DATE *t);
UINT8 isleap(UINT16 year);

# 40 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\usart.h"
void putch(UINT8 byte);
void usart_init(void);
void usart_isr(void);
UINT8 id_code(void);
void cdata_execute(void);

# 4 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\sys.h"
void sys_init(void);
void interupt_init(void);
void interrupt isr(void);
void system_value_init(void);

# 7 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\led.h"
void shift_srclk(UINT8 flag);
void latch_rclk(UINT8 flag);
void seg_disp(UINT8 num, UINT8 dp,UINT8 flag);
void lcd_init(void);
void up_time1(UINT8 udata_time[]);
void up_date(UINT8 date[],UINT8 length,UINT8 dian,UINT8 flag);

void up_time2(UINT8 udata_time[]);

UINT8 Compare(TIME first,TIME second);

# 16 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\rtc.h"
void start_i2c(void);

void waitack_i2c(void);
void sendack_i2c(void);
void sendnotack_i2c(void);
void i2c_send(unsigned char send_data);
unsigned char i2c_read(void);
void writebyte(unsigned char address,unsigned char data);
unsigned char readbyte(unsigned char address);

# 32 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\DS3231.h"
void ds3231_init(void);
unsigned char hex_dec(unsigned char hex16);
UINT8 dec_hex(UINT8 dec16);
void get_time(void);
void settime(void);
void calc_zone(void);
void con_write_eeprom(UINT8 start,UINT8 databyte[],UINT8 len);

# 4 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\crc.h"
unsigned short int MakeCRC16(unsigned char *buf,unsigned char len);

# 4 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\eeprom.h"
void write_eeprom(UINT8 addre,UINT8 databyte);
UINT8 read_eeprom(UINT8 addre);

# 5 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\timer2.h"
void timer2_init(void);
void timer2_isr(void);

# 36 "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\include\infrare.h"
extern unsigned char Ir_order1,Ir_order2;
extern unsigned char Ir_Code,Ir_wait;

void infrare(void);
void ir_operation(void);

void ir_init(void);

# 4 "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\main.c"
static UINT8 tx_udata[20];
static UINT8 up_led_display;
static UINT8 copy_rx_udata[17];
static BOOL flag_data_process;
static UINT8 disp_rxd_length;

static DATE copy_old_date;
static TIME copy_old_time;

# 16
extern unsigned char WeekDay20(unsigned char y, unsigned char m, unsigned char d);
extern TIME old_time;
extern DATE old_date;
extern UINT8 up_time_flag;

extern UINT8 rx_udata[17];

extern UINT8 timer1_cnt;
extern BOOL flag_jiaoshi;
extern BOOL flag_dian1;

extern BOOL flag_dian2;

extern UINT8 my_id_code;
extern NTP_INFO ntp_info;


extern UINT8 jiaoshi_cnt;
extern UINT8 flag_display_lighting1;
extern UINT8 usart_timer_cnt;
extern UINT8 usart_count;
extern UINT8 flag_usart_start;


extern UINT8 up_date_flag;

# 49
extern UINT8 disp_data_time[4];

# 84
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3FFA & 0x3FFF & 0x3FFF & 0x3FFF & 0x3FBF & 0x3F7F& 0x3FFF& 0x3BFF& 0x37FF & 0x2FFF &0x1FFF");

# 86
void main(void)
{
UINT16 chk_value,calc_chk_value;
UINT16 func,copy_func;
UINT8 i,j,flag_send_data,flag_save_data;
static UINT8 save_time_cnt=0;
UINT8 len_cnt,flag_temp;


interupt_init();
system_value_init();
timer1_init();
ds3231_init();
usart_init();
get_time();

# 111
lcd_init();


timer2_init();

# 126
while(1)
{


if(usart_timer_cnt>5)
{
flag_usart_start=0;
usart_count=0;
usart_timer_cnt=0;
if((rx_udata[0]==0xD3)&&(rx_udata[1]<17-4))
{
if(rx_udata[rx_udata[1]+4]==0xD8)
{
RCIE=0;
func = rx_udata[0x02]<<8;
func += rx_udata[0x02+1];
i=rx_udata[0x04];
if((func == 0x0900) ||(i == my_id_code) || (i == 0xff))
{
disp_rxd_length=rx_udata[1]+5;
for(i=0;i<disp_rxd_length;i++)
{
copy_rx_udata[i]=rx_udata[i];
rx_udata[i]=0;
}
flag_data_process=1;
}
RCIE=1;

}
}
}

flag_send_data=0;
flag_save_data=0;
flag_temp=0;
if(flag_data_process == TRUE)
{

chk_value = copy_rx_udata[disp_rxd_length-2] + copy_rx_udata[disp_rxd_length-3]*256;
calc_chk_value = MakeCRC16(&copy_rx_udata[0],disp_rxd_length-3);
if(chk_value == calc_chk_value)
{
func = copy_rx_udata[2]<<8;
func += copy_rx_udata[3];



switch(func)
{
case 0x0900:
{
if(disp_rxd_length < 16)
{
break;
}

# 201
{


i = 0x04;
chk_value = copy_rx_udata[i++]*256;
chk_value += copy_rx_udata[i++];
chk_value %= 100;
if((chk_value>=13) && (copy_rx_udata[i]<=12) && (copy_rx_udata[i+1]<=31) && (copy_rx_udata[i+2]<=23) && (copy_rx_udata[i+3]<=59) && (copy_rx_udata[i+4]<=59))

# 214
{
copy_old_date.year = chk_value;
copy_old_date.month = copy_rx_udata[i++];
copy_old_date.date = copy_rx_udata[i++];
copy_old_time.hour = copy_rx_udata[i++];
copy_old_time.min = copy_rx_udata[i++];
copy_old_time.sec = copy_rx_udata[i];


if(copy_old_time.sec == 0)
{
old_date.year =copy_old_date.year;
old_date.month =copy_old_date.month;
old_date.date =copy_old_date.date;
old_time.hour = copy_old_time.hour;
old_time.min = copy_old_time.min;
old_time.sec = copy_old_time.sec;

TMR1L = 0;
TMR1H = 0;
timer1_cnt = 0;

flag_jiaoshi = TRUE;
up_led_display=1;

flag_save_data=1;


}

jiaoshi_cnt=0;
}



}



break;
}
case 0x0901:
{
if(disp_rxd_length < 8)
{
break;
}
if(copy_rx_udata[0x04]==my_id_code)
{
flag_send_data=1;
}
break;
}
case 0x0923:
{
flag_send_data=1;
break;
}
case 0x0909:
{
if(disp_rxd_length < 8)
{
break;
}
if(copy_rx_udata[0x04]==my_id_code)
{
flag_send_data=1;
}
TMR1ON = 0;GIE = 0;PEIE = 0;
break;
}

# 590
case 0x091D:
{
if(disp_rxd_length<10)
{
return;
}
i=0x05;
if(copy_rx_udata[i]==1)
{
i++;
if(copy_rx_udata[i]<=8)
{
ntp_info.test_mode1 = copy_rx_udata[i];
}
else
{
flag_temp++;
}
}
else if(copy_rx_udata[i]==2)
{
i++;
if(copy_rx_udata[i]<=8)
{
ntp_info.test_mode2 = copy_rx_udata[i];
}
else
{
flag_temp++;
}
}
else if(copy_rx_udata[i]==0XFF)
{
i++;
if(copy_rx_udata[i]<=8)
{
ntp_info.test_mode1 = copy_rx_udata[i];
ntp_info.test_mode2 = copy_rx_udata[i];
}
else
{
flag_temp++;
}
}


if(copy_rx_udata[0x04]==my_id_code)
{
flag_send_data=1;
}

break;
}

# 794
}


}
flag_data_process=FALSE;
}




if(flag_send_data)
{
i = 0;
tx_udata[i++] = 0xD3;
len_cnt = i;
i++;
copy_func = func+1;
tx_udata[i++] = copy_func>>8;
tx_udata[i++] = copy_func&0x00ff;
tx_udata[i++] = my_id_code;
switch(func)
{
case 0x0901:
{
if(flag_jiaoshi)
{
tx_udata[i++] = 0;
}
else
{
tx_udata[i++] = 0x08;
}

tx_udata[i]=0x00 | 0x20;

# 836
{
tx_udata[i++] |= 0x10;
}

# 847
break;
}
case 0x0923:
{

tx_udata[i++] = 0x0009>>8;
tx_udata[i++] = 0x0009&0x00ff;
break;
}
case 0x0909:
{
tx_udata[i++] = 1;
TMR1ON = 0;GIE = 0;PEIE = 0;
break;
}

# 865
case 0x0919:

# 870
case 0x091D:

# 875
{
if(flag_temp)
{
tx_udata[i++]=0;
}
else
{
tx_udata[i++]=1;
}
break;
}


}
tx_udata[len_cnt] = i-len_cnt -1;
chk_value = MakeCRC16(&tx_udata[0],i);
tx_udata[i++] = chk_value / 256;
tx_udata[i++] = chk_value % 256;
tx_udata[i++] = 0xD8;
RB0 = 1;
asm("nop");asm("nop");
for(j = 0;j<i;j++)
{
putch(tx_udata[j]);
}
asm("nop");asm("nop");
while(!TRMT);RB0 = 0;
}

switch(flag_save_data)
{
case 1:
{
settime();
calc_zone();

break;
}

# 1011
}

# 1017
if(up_time_flag)
{
if(old_time.sec!=0)

old_date.day= WeekDay20(old_date.year,old_date.month,old_date.date);

up_time_flag--;
up_led_display=1;
if(jiaoshi_cnt >= 120)
{
flag_jiaoshi = FALSE;
}
else
{
jiaoshi_cnt++;
}




if(up_date_flag==2)
{

date_dec(&old_date);
}
else if(up_date_flag==1)
{
date_add(&old_date);
}
up_date_flag=time_add(&old_time);

# 1054
if((old_time.hour == 3) && (old_time.min == 26) && (old_time.sec == 13))
{
TMR1ON = 0;GIE = 0;PEIE = 0;



_delay((unsigned long)((100)*(8000000/4000.0)));
while(1);
}
if((old_time.sec == 10) && (old_time.min == 10))
{
get_time();
}

asm("clrwdt");

# 1096
}

if(up_led_display==1)
{
up_led_display=0;

{
if(flag_jiaoshi == FALSE)
{
if((old_time.sec % 2 ) == 0)
{
flag_dian1 = FALSE;
}
else
{
flag_dian1 = TRUE;
}
}
else
{
flag_dian1 = TRUE;
}
}

# 1223
disp_data_time[0]=(old_time.min%100)%10;
disp_data_time[1]=(old_time.min%100)/10;
disp_data_time[2]=(old_time.hour%100)%10;
disp_data_time[3]=(old_time.hour%100)/10;

# 1239
up_time1(disp_data_time);


up_time2(disp_data_time);

}

# 1262
}
}
