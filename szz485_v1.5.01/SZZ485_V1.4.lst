

HI-TECH Software PIC PRO Macro Assembler V9.80 build 6738 
                                                                                               Mon Nov 13 12:51:34 2023

HI-TECH Software Omniscient Code Generator (PRO mode) build 6738
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,delta=2
    20                           	psect	text1346,local,class=CODE,delta=2
    21                           	psect	text1350,local,class=CODE,delta=2
    22                           	psect	text1351,local,class=CODE,delta=2
    23                           	psect	text1353,local,class=CODE,delta=2
    24                           	psect	text1360,local,class=CODE,delta=2
    25                           	psect	text1373,local,class=CODE,delta=2
    26                           	psect	text1374,local,class=CODE,delta=2
    27                           	psect	text1375,local,class=CODE,delta=2
    28                           	psect	text1379,local,class=CODE,delta=2
    29                           	psect	text1381,local,class=CODE,delta=2
    30                           	psect	text1382,local,class=CODE,delta=2
    31                           	psect	text1383,local,class=CODE,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text1387,local,class=CODE,delta=2
    34                           	psect	pa_nodes,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  000A                     	;#
    37                           
    38                           	psect	config
    39  2007  033A               	dw	826	;#
    40                           
    41                           	psect	idataBANK2
    42  0000                     __pidataBANK2:	
    43                           
    44                           	psect	idataBANK1
    45  0000                     __pidataBANK1:	
    46                           
    47                           	psect	strings
    48  000F                     __pstrings:	
    49  000F                     stringtab:	
    50                           ;	global	stringdir,stringtab,__stringbase
    51                           
    52  000F                     stringcode:	
    53                           ;	String table - string pointers are 1 byte each
    54                           
    55  000F                     stringdir:	
    56  000F  3000               	movlw	high stringdir
    57  0010  008A               	movwf	10
    58  0011  0804               	movf	4,w
    59  0012  0A84               	incf	4,f
    60  0013  0782               	addwf	2,f
    61  0014                     __stringbase:	
    62  0014  3400               	retlw	0
    63  0015                     _SEG_CODE1:	
    64  0015  34FC               	retlw	252
    65  0016  3460               	retlw	96
    66  0017  34DA               	retlw	218
    67  0018  34F2               	retlw	242
    68  0019  3466               	retlw	102
    69  001A  34B6               	retlw	182
    70  001B  34BE               	retlw	190
    71  001C  34E0               	retlw	224
    72  001D  34FE               	retlw	254
    73  001E  34F6               	retlw	246
    74  001F  3400               	retlw	0
    75  0020                     _SEG_CODE2:	
    76  0020  34FC               	retlw	252
    77  0021  3460               	retlw	96
    78  0022  34DA               	retlw	218
    79  0023  34F2               	retlw	242
    80  0024  3466               	retlw	102
    81  0025  34B6               	retlw	182
    82  0026  34BE               	retlw	190
    83  0027  34E0               	retlw	224
    84  0028  34FE               	retlw	254
    85  0029  34F6               	retlw	246
    86  002A  3400               	retlw	0
    87  001A                     _RCREG	set	26
    88  0018                     _RCSTA	set	24
    89  000F                     _TMR1H	set	15
    90  000E                     _TMR1L	set	14
    91  0011                     _TMR2	set	17
    92  0019                     _TXREG	set	25
    93  00C4                     _CREN	set	196
    94  005F                     _GIE	set	95
    95  00C1                     _OERR	set	193
    96  005E                     _PEIE	set	94
    97  0028                     _RA0	set	40
    98  0029                     _RA1	set	41
    99  002A                     _RA2	set	42
   100  002B                     _RA3	set	43
   101  002C                     _RA4	set	44
   102  002D                     _RA5	set	45
   103  0030                     _RB0	set	48
   104  0031                     _RB1	set	49
   105  0032                     _RB2	set	50
   106  0034                     _RB4	set	52
   107  0035                     _RB5	set	53
   108  0036                     _RB6	set	54
   109  0037                     _RB7	set	55
   110  0038                     _RC0	set	56
   111  0039                     _RC1	set	57
   112  003A                     _RC2	set	58
   113  003B                     _RC3	set	59
   114  003C                     _RC4	set	60
   115  003D                     _RC5	set	61
   116  0065                     _RCIF	set	101
   117  0084                     _T1CKPS0	set	132
   118  0085                     _T1CKPS1	set	133
   119  0083                     _T1OSCEN	set	131
   120  0090                     _T2CKPS0	set	144
   121  0091                     _T2CKPS1	set	145
   122  0081                     _TMR1CS	set	129
   123  0086                     _TMR1GE	set	134
   124  0060                     _TMR1IF	set	96
   125  0080                     _TMR1ON	set	128
   126  0061                     _TMR2IF	set	97
   127  0092                     _TMR2ON	set	146
   128  0093                     _TOUTPS0	set	147
   129  0094                     _TOUTPS1	set	148
   130  0095                     _TOUTPS2	set	149
   131  0096                     _TOUTPS3	set	150
   132  0064                     _TXIF	set	100
   133  0099                     _SPBRG	set	153
   134  0098                     _TXSTA	set	152
   135  040B                     _PSA	set	1035
   136  0465                     _RCIE	set	1125
   137  0460                     _TMR1IE	set	1120
   138  0461                     _TMR2IE	set	1121
   139  0428                     _TRISA0	set	1064
   140  0429                     _TRISA1	set	1065
   141  042A                     _TRISA2	set	1066
   142  042B                     _TRISA3	set	1067
   143  042C                     _TRISA4	set	1068
   144  042D                     _TRISA5	set	1069
   145  0430                     _TRISB0	set	1072
   146  0431                     _TRISB1	set	1073
   147  0432                     _TRISB2	set	1074
   148  0434                     _TRISB4	set	1076
   149  0435                     _TRISB5	set	1077
   150  0436                     _TRISB6	set	1078
   151  0437                     _TRISB7	set	1079
   152  0438                     _TRISC0	set	1080
   153  0439                     _TRISC1	set	1081
   154  043A                     _TRISC2	set	1082
   155  043B                     _TRISC3	set	1083
   156  043C                     _TRISC4	set	1084
   157  043D                     _TRISC5	set	1085
   158  043E                     _TRISC6	set	1086
   159  043F                     _TRISC7	set	1087
   160  04C1                     _TRMT	set	1217
   161  0829                     _WDTPS0	set	2089
   162  082A                     _WDTPS1	set	2090
   163  082B                     _WDTPS2	set	2091
   164  082C                     _WDTPS3	set	2092
   165  0188                     _ANSEL	set	392
   166  0189                     _ANSELH	set	393
   167                           
   168                           	psect	nvBANK0
   169  0060                     __pnvBANK0:	
   170  0060                     _old_date:	
   171  0060                     	ds	4
   172                           
   173                           	psect	cinit
   174  0DA4                     start_initialization:	
   175                           
   176                           ; Clear objects allocated to COMMON
   177  0DA4  01F7               	clrf	__pbssCOMMON& (0+127)
   178  0DA5  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   179  0DA6  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   180                           
   181                           ; Clear objects allocated to BANK0
   182  0DA7  1383               	bcf	3,7	;select IRP bank0
   183  0DA8  3048               	movlw	low __pbssBANK0
   184  0DA9  0084               	movwf	4
   185  0DAA  3060               	movlw	low (__pbssBANK0+24)
   186  0DAB  158A  252D  158A   	fcall	clear_ram
   187                           
   188                           ; Clear objects allocated to BANK1
   189  0DAE  30A0               	movlw	low __pbssBANK1
   190  0DAF  0084               	movwf	4
   191  0DB0  30E0               	movlw	low (__pbssBANK1+64)
   192  0DB1  158A  252D  158A   	fcall	clear_ram
   193                           
   194                           ; Initialize objects allocated to BANK2
   195  0DB4  1703               	bsf	3,6	;RP1=1, select bank2
   196                           
   197                           ;initializer for _WeekTab
   198  0DB5  307F               	movlw	127
   199  0DB6  00AF               	movwf	__pdataBANK2& (0+127)
   200  0DB7  30DD               	movlw	221
   201  0DB8  00B0               	movwf	(__pdataBANK2+1)& (0+127)
   202  0DB9  301F               	movlw	31
   203  0DBA  00B1               	movwf	(__pdataBANK2+2)& (0+127)
   204  0DBB  307E               	movlw	126
   205  0DBC  00B2               	movwf	(__pdataBANK2+3)& (0+127)
   206  0DBD  30BF               	movlw	191
   207  0DBE  00B3               	movwf	(__pdataBANK2+4)& (0+127)
   208  0DBF  303E               	movlw	62
   209  0DC0  00B4               	movwf	(__pdataBANK2+5)& (0+127)
   210  0DC1  307F               	movlw	127
   211  0DC2  00B5               	movwf	(__pdataBANK2+6)& (0+127)
   212  0DC3  30DF               	movlw	223
   213  0DC4  00B6               	movwf	(__pdataBANK2+7)& (0+127)
   214  0DC5  305E               	movlw	94
   215  0DC6  00B7               	movwf	(__pdataBANK2+8)& (0+127)
   216  0DC7  309F               	movlw	159
   217  0DC8  00B8               	movwf	(__pdataBANK2+9)& (0+127)
   218  0DC9  301E               	movlw	30
   219  0DCA  00B9               	movwf	(__pdataBANK2+10)& (0+127)
   220  0DCB  305F               	movlw	95
   221  0DCC  00BA               	movwf	(__pdataBANK2+11)& (0+127)
   222                           
   223                           ; Initialize objects allocated to BANK1
   224  0DCD  1683               	bsf	3,5	;RP0=1, select bank1
   225  0DCE  1303               	bcf	3,6	;RP1=0, select bank1
   226                           
   227                           ;initializer for _months
   228  0DCF  01E0               	clrf	__pdataBANK1& (0+127)
   229  0DD0  301F               	movlw	31
   230  0DD1  00E1               	movwf	(__pdataBANK1+1)& (0+127)
   231  0DD2  301C               	movlw	28
   232  0DD3  00E2               	movwf	(__pdataBANK1+2)& (0+127)
   233  0DD4  301F               	movlw	31
   234  0DD5  00E3               	movwf	(__pdataBANK1+3)& (0+127)
   235  0DD6  301E               	movlw	30
   236  0DD7  00E4               	movwf	(__pdataBANK1+4)& (0+127)
   237  0DD8  301F               	movlw	31
   238  0DD9  00E5               	movwf	(__pdataBANK1+5)& (0+127)
   239  0DDA  301E               	movlw	30
   240  0DDB  00E6               	movwf	(__pdataBANK1+6)& (0+127)
   241  0DDC  301F               	movlw	31
   242  0DDD  00E7               	movwf	(__pdataBANK1+7)& (0+127)
   243  0DDE  00E8               	movwf	(__pdataBANK1+8)& (0+127)
   244  0DDF  301E               	movlw	30
   245  0DE0  00E9               	movwf	(__pdataBANK1+9)& (0+127)
   246  0DE1  301F               	movlw	31
   247  0DE2  00EA               	movwf	(__pdataBANK1+10)& (0+127)
   248  0DE3  301E               	movlw	30
   249  0DE4  00EB               	movwf	(__pdataBANK1+11)& (0+127)
   250  0DE5  301F               	movlw	31
   251  0DE6  00EC               	movwf	(__pdataBANK1+12)& (0+127)
   252  0DE7                     end_of_initialization:	
   253                           ;End of C runtime variable initialization code
   254                           
   255  0DE7  0183               	clrf	3
   256  0DE8  118A  282B         	ljmp	_main	;jump to C main() function
   257                           
   258                           	psect	bssCOMMON
   259  0077                     __pbssCOMMON:	
   260  0077                     _flag_usart_start:	
   261  0077                     	ds	1
   262  0078                     _timer2_cnt:	
   263  0078                     	ds	1
   264  0079                     _usart_count:	
   265  0079                     	ds	1
   266                           
   267                           	psect	bssBANK0
   268  0048                     __pbssBANK0:	
   269  0048                     _disp_rxd_length:	
   270  0048                     	ds	1
   271  0049                     _flag_data_process:	
   272  0049                     	ds	1
   273  004A                     _flag_dian1:	
   274  004A                     	ds	1
   275  004B                     _flag_jiaoshi:	
   276  004B                     	ds	1
   277  004C                     _jiaoshi_cnt:	
   278  004C                     	ds	1
   279  004D                     _my_id_code:	
   280  004D                     	ds	1
   281  004E                     _timer1_cnt:	
   282  004E                     	ds	1
   283  004F                     _up_date_flag:	
   284  004F                     	ds	1
   285  0050                     _up_led_display:	
   286  0050                     	ds	1
   287  0051                     _up_time_flag:	
   288  0051                     	ds	1
   289  0052                     _usart_timer_cnt:	
   290  0052                     	ds	1
   291  0053                     up_time1@copy_flag_dian:	
   292  0053                     	ds	1
   293  0054                     up_time1@count:	
   294  0054                     	ds	1
   295  0055                     up_time1@display_mode_state:	
   296  0055                     	ds	1
   297  0056                     up_time2@copy_flag_dian:	
   298  0056                     	ds	1
   299  0057                     up_time2@count:	
   300  0057                     	ds	1
   301  0058                     up_time2@display_mode_state:	
   302  0058                     	ds	1
   303  0059                     _disp_data_time:	
   304  0059                     	ds	4
   305  005D                     _old_time:	
   306  005D                     	ds	3
   307                           
   308                           	psect	bssBANK1
   309  00A0                     __pbssBANK1:	
   310  00A0                     _rx_udata:	
   311  00A0                     	ds	17
   312  00B1                     _copy_old_date:	
   313  00B1                     	ds	4
   314  00B5                     _copy_old_time:	
   315  00B5                     	ds	3
   316  00B8                     _ntp_info:	
   317  00B8                     	ds	3
   318  00BB                     _tx_udata:	
   319  00BB                     	ds	20
   320  00CF                     _copy_rx_udata:	
   321  00CF                     	ds	17
   322                           
   323                           	psect	dataBANK1
   324  00E0                     __pdataBANK1:	
   325  00E0                     _months:	
   326  00E0                     	ds	13
   327                           
   328                           	psect	dataBANK2
   329  012F                     __pdataBANK2:	
   330  012F                     _WeekTab:	
   331  012F                     	ds	12
   332                           
   333                           	psect	clrtext
   334  0D2D                     clear_ram:	
   335                           ;	Called with FSR containing the base address, and
   336                           ;	W with the last address+1
   337                           
   338  0D2D  0064               	clrwdt	;clear the watchdog before getting into this loop
   339  0D2E                     clrloop:	
   340  0D2E  0180               	clrf	0	;clear RAM location pointed to by FSR
   341  0D2F  0A84               	incf	4,f	;increment pointer
   342  0D30  0604               	xorwf	4,w	;XOR with final address
   343  0D31  1903               	btfsc	3,2	;have we reached the end yet?
   344  0D32  3400               	retlw	0	;all done for this memory range, return
   345  0D33  0604               	xorwf	4,w	;XOR again to restore value
   346  0D34  2D2E               	goto	clrloop	;do the next byte
   347                           
   348                           	psect	cstackBANK2
   349  0120                     __pcstackBANK2:	
   350  0120                     main@calc_chk_value:	
   351                           
   352                           ; 2 bytes @ 0x0
   353  0120                     	ds	2
   354  0122                     _main$5144:	
   355                           
   356                           ; 1 bytes @ 0x2
   357  0122                     	ds	1
   358  0123                     main@flag_save_data:	
   359                           
   360                           ; 1 bytes @ 0x3
   361  0123                     	ds	1
   362  0124                     main@flag_temp:	
   363                           
   364                           ; 1 bytes @ 0x4
   365  0124                     	ds	1
   366  0125                     main@len_cnt:	
   367                           
   368                           ; 1 bytes @ 0x5
   369  0125                     	ds	1
   370  0126                     main@copy_func:	
   371                           
   372                           ; 2 bytes @ 0x6
   373  0126                     	ds	2
   374  0128                     main@flag_send_data:	
   375                           
   376                           ; 1 bytes @ 0x8
   377  0128                     	ds	1
   378  0129                     main@j:	
   379                           
   380                           ; 1 bytes @ 0x9
   381  0129                     	ds	1
   382  012A                     main@func:	
   383                           
   384                           ; 2 bytes @ 0xA
   385  012A                     	ds	2
   386  012C                     main@chk_value:	
   387                           
   388                           ; 2 bytes @ 0xC
   389  012C                     	ds	2
   390  012E                     main@i:	
   391                           
   392                           ; 1 bytes @ 0xE
   393  012E                     	ds	1
   394                           
   395                           	psect	cstackCOMMON
   396  0070                     __pcstackCOMMON:	
   397  0070                     ?_calc_zone:	
   398  0070                     ?_up_time1:	
   399                           ; 0 bytes @ 0x0
   400                           
   401  0070                     ?_up_time2:	
   402                           ; 0 bytes @ 0x0
   403                           
   404  0070                     ?_interupt_init:	
   405                           ; 0 bytes @ 0x0
   406                           
   407  0070                     ?_system_value_init:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0070                     ?_timer2_init:	
   411                           ; 0 bytes @ 0x0
   412                           
   413  0070                     ?_timer2_isr:	
   414                           ; 0 bytes @ 0x0
   415                           
   416  0070                     ??_timer2_isr:	
   417                           ; 0 bytes @ 0x0
   418                           
   419  0070                     ?_timer1_init:	
   420                           ; 0 bytes @ 0x0
   421                           
   422  0070                     ?_timer1_isr:	
   423                           ; 0 bytes @ 0x0
   424                           
   425  0070                     ??_timer1_isr:	
   426                           ; 0 bytes @ 0x0
   427                           
   428  0070                     ?_date_add:	
   429                           ; 0 bytes @ 0x0
   430                           
   431  0070                     ?_date_dec:	
   432                           ; 0 bytes @ 0x0
   433                           
   434  0070                     ?_usart_init:	
   435                           ; 0 bytes @ 0x0
   436                           
   437  0070                     ?_usart_isr:	
   438                           ; 0 bytes @ 0x0
   439                           
   440  0070                     ??_usart_isr:	
   441                           ; 0 bytes @ 0x0
   442                           
   443  0070                     ?_putch:	
   444                           ; 0 bytes @ 0x0
   445                           
   446  0070                     ?_ds3231_init:	
   447                           ; 0 bytes @ 0x0
   448                           
   449  0070                     ?_get_time:	
   450                           ; 0 bytes @ 0x0
   451                           
   452  0070                     ?_settime:	
   453                           ; 0 bytes @ 0x0
   454                           
   455  0070                     ?_shift_srclk:	
   456                           ; 0 bytes @ 0x0
   457                           
   458  0070                     ?_latch_rclk:	
   459                           ; 0 bytes @ 0x0
   460                           
   461  0070                     ?_lcd_init:	
   462                           ; 0 bytes @ 0x0
   463                           
   464  0070                     ?_main:	
   465                           ; 0 bytes @ 0x0
   466                           
   467  0070                     ?_isr:	
   468                           ; 0 bytes @ 0x0
   469                           
   470  0070                     ?_start_i2c:	
   471                           ; 0 bytes @ 0x0
   472                           
   473  0070                     ?_waitack_i2c:	
   474                           ; 0 bytes @ 0x0
   475                           
   476  0070                     ?_sendnotack_i2c:	
   477                           ; 0 bytes @ 0x0
   478                           
   479  0070                     ?_i2c_send:	
   480                           ; 0 bytes @ 0x0
   481                           
   482  0070                     ?_id_code:	
   483                           ; 0 bytes @ 0x0
   484                           
   485  0070                     ?_readbyte:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_hex_dec:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_dec_hex:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_time_add:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_i2c_read:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     usart_isr@cbuffer:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     up_time1@udata_time:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     up_time2@udata_time:	
   507                           ; 1 bytes @ 0x0
   508                           
   509                           
   510                           ; 1 bytes @ 0x0
   511  0070                     	ds	1
   512  0071                     ??_isr:	
   513                           
   514                           ; 0 bytes @ 0x1
   515  0071                     	ds	3
   516  0074                     ??_id_code:	
   517  0074                     ??_calc_zone:	
   518                           ; 0 bytes @ 0x4
   519                           
   520  0074                     ??_interupt_init:	
   521                           ; 0 bytes @ 0x4
   522                           
   523  0074                     ??_system_value_init:	
   524                           ; 0 bytes @ 0x4
   525                           
   526  0074                     ??_timer2_init:	
   527                           ; 0 bytes @ 0x4
   528                           
   529  0074                     ??_timer1_init:	
   530                           ; 0 bytes @ 0x4
   531                           
   532  0074                     ??_time_add:	
   533                           ; 0 bytes @ 0x4
   534                           
   535  0074                     ??_putch:	
   536                           ; 0 bytes @ 0x4
   537                           
   538  0074                     ??_shift_srclk:	
   539                           ; 0 bytes @ 0x4
   540                           
   541  0074                     ??_latch_rclk:	
   542                           ; 0 bytes @ 0x4
   543                           
   544  0074                     ??_start_i2c:	
   545                           ; 0 bytes @ 0x4
   546                           
   547  0074                     ??_waitack_i2c:	
   548                           ; 0 bytes @ 0x4
   549                           
   550  0074                     ??_sendnotack_i2c:	
   551                           ; 0 bytes @ 0x4
   552                           
   553  0074                     ??_i2c_send:	
   554                           ; 0 bytes @ 0x4
   555                           
   556  0074                     ??_i2c_read:	
   557                           ; 0 bytes @ 0x4
   558                           
   559  0074                     ??___lwmod:	
   560                           ; 0 bytes @ 0x4
   561                           
   562  0074                     ??___awmod:	
   563                           ; 0 bytes @ 0x4
   564                           
   565  0074                     ?___bmul:	
   566                           ; 0 bytes @ 0x4
   567                           
   568  0074                     ?___lbmod:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     ?_calccrc:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0074                     time_add@t:	
   575                           ; 2 bytes @ 0x4
   576                           
   577  0074                     id_code@id:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     putch@byte:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     shift_srclk@flag:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     latch_rclk@flag:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0074                     waitack_i2c@errtime:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0074                     i2c_send@send_data:	
   593                           ; 1 bytes @ 0x4
   594                           
   595  0074                     i2c_read@dat:	
   596                           ; 1 bytes @ 0x4
   597                           
   598  0074                     ___bmul@multiplicand:	
   599                           ; 1 bytes @ 0x4
   600                           
   601  0074                     ___lwmod@counter:	
   602                           ; 1 bytes @ 0x4
   603                           
   604  0074                     ___lbmod@divisor:	
   605                           ; 1 bytes @ 0x4
   606                           
   607  0074                     ___awmod@counter:	
   608                           ; 1 bytes @ 0x4
   609                           
   610  0074                     calccrc@crc:	
   611                           ; 1 bytes @ 0x4
   612                           
   613                           
   614                           ; 2 bytes @ 0x4
   615  0074                     	ds	1
   616  0075                     ??_isleap:	
   617  0075                     ??_date_add:	
   618                           ; 0 bytes @ 0x5
   619                           
   620  0075                     ??_date_dec:	
   621                           ; 0 bytes @ 0x5
   622                           
   623  0075                     ??_usart_init:	
   624                           ; 0 bytes @ 0x5
   625                           
   626  0075                     ?_seg_disp:	
   627                           ; 0 bytes @ 0x5
   628                           
   629  0075                     ??___bmul:	
   630                           ; 0 bytes @ 0x5
   631                           
   632  0075                     ??___lbmod:	
   633                           ; 0 bytes @ 0x5
   634                           
   635  0075                     date_add@month_day:	
   636                           ; 0 bytes @ 0x5
   637                           
   638  0075                     seg_disp@dp:	
   639                           ; 1 bytes @ 0x5
   640                           
   641  0075                     i2c_send@count:	
   642                           ; 1 bytes @ 0x5
   643                           
   644  0075                     i2c_read@count:	
   645                           ; 1 bytes @ 0x5
   646                           
   647  0075                     ___bmul@product:	
   648                           ; 1 bytes @ 0x5
   649                           
   650  0075                     ___awmod@sign:	
   651                           ; 1 bytes @ 0x5
   652                           
   653                           
   654                           ; 1 bytes @ 0x5
   655  0075                     	ds	1
   656  0076                     ??_readbyte:	
   657  0076                     ?_writebyte:	
   658                           ; 0 bytes @ 0x6
   659                           
   660  0076                     ??_calccrc:	
   661                           ; 0 bytes @ 0x6
   662                           
   663  0076                     ?___lbdiv:	
   664                           ; 0 bytes @ 0x6
   665                           
   666  0076                     date_add@t:	
   667                           ; 1 bytes @ 0x6
   668                           
   669  0076                     date_dec@t:	
   670                           ; 1 bytes @ 0x6
   671                           
   672  0076                     seg_disp@flag:	
   673                           ; 1 bytes @ 0x6
   674                           
   675  0076                     writebyte@data:	
   676                           ; 1 bytes @ 0x6
   677                           
   678  0076                     ___bmul@multiplier:	
   679                           ; 1 bytes @ 0x6
   680                           
   681  0076                     ___lbdiv@divisor:	
   682                           ; 1 bytes @ 0x6
   683                           
   684                           
   685                           ; 1 bytes @ 0x6
   686  0076                     	ds	1
   687  0077                     ??_writebyte:	
   688  0077                     ??_up_time1:	
   689                           ; 0 bytes @ 0x7
   690                           
   691  0077                     ??_up_time2:	
   692                           ; 0 bytes @ 0x7
   693                           
   694  0077                     ??_ds3231_init:	
   695                           ; 0 bytes @ 0x7
   696                           
   697  0077                     ??_settime:	
   698                           ; 0 bytes @ 0x7
   699                           
   700  0077                     ??_lcd_init:	
   701                           ; 0 bytes @ 0x7
   702                           
   703  0077                     ??___lbdiv:	
   704                           ; 0 bytes @ 0x7
   705                           
   706                           
   707                           	psect	cstackBANK0
   708  0020                     __pcstackBANK0:	
   709                           ; 0 bytes @ 0x7
   710                           
   711  0020                     ??_hex_dec:	
   712  0020                     ??_seg_disp:	
   713                           ; 0 bytes @ 0x0
   714                           
   715  0020                     ?___lwmod:	
   716                           ; 0 bytes @ 0x0
   717                           
   718  0020                     ?___awmod:	
   719                           ; 2 bytes @ 0x0
   720                           
   721  0020                     calccrc@crcbuf:	
   722                           ; 2 bytes @ 0x0
   723                           
   724  0020                     writebyte@address:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0020                     readbyte@address:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0020                     ___lbmod@dividend:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0020                     ___lwmod@divisor:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0020                     ___awmod@divisor:	
   737                           ; 2 bytes @ 0x0
   738                           
   739                           
   740                           ; 2 bytes @ 0x0
   741  0020                     	ds	1
   742  0021                     hex_dec@hex16:	
   743  0021                     seg_disp@num:	
   744                           ; 1 bytes @ 0x1
   745                           
   746  0021                     calccrc@chk:	
   747                           ; 1 bytes @ 0x1
   748                           
   749  0021                     readbyte@recv_data:	
   750                           ; 1 bytes @ 0x1
   751                           
   752  0021                     ___lbmod@counter:	
   753                           ; 1 bytes @ 0x1
   754                           
   755                           
   756                           ; 1 bytes @ 0x1
   757  0021                     	ds	1
   758  0022                     ds3231_init@ds3231_state:	
   759  0022                     seg_disp@date:	
   760                           ; 1 bytes @ 0x2
   761                           
   762  0022                     calccrc@i:	
   763                           ; 1 bytes @ 0x2
   764                           
   765  0022                     ___lbmod@rem:	
   766                           ; 1 bytes @ 0x2
   767                           
   768  0022                     ___lwmod@dividend:	
   769                           ; 1 bytes @ 0x2
   770                           
   771  0022                     ___awmod@dividend:	
   772                           ; 2 bytes @ 0x2
   773                           
   774                           
   775                           ; 2 bytes @ 0x2
   776  0022                     	ds	1
   777  0023                     ?_MakeCRC16:	
   778  0023                     seg_disp@i:	
   779                           ; 2 bytes @ 0x3
   780                           
   781  0023                     MakeCRC16@len:	
   782                           ; 1 bytes @ 0x3
   783                           
   784  0023                     ___lbdiv@dividend:	
   785                           ; 1 bytes @ 0x3
   786                           
   787                           
   788                           ; 1 bytes @ 0x3
   789  0023                     	ds	1
   790  0024                     ?_up_date:	
   791  0024                     ?_isleap:	
   792                           ; 0 bytes @ 0x4
   793                           
   794  0024                     ?_WeekDay20:	
   795                           ; 1 bytes @ 0x4
   796                           
   797  0024                     up_date@length:	
   798                           ; 1 bytes @ 0x4
   799                           
   800  0024                     WeekDay20@m:	
   801                           ; 1 bytes @ 0x4
   802                           
   803  0024                     ___lbdiv@counter:	
   804                           ; 1 bytes @ 0x4
   805                           
   806  0024                     isleap@year:	
   807                           ; 1 bytes @ 0x4
   808                           
   809                           
   810                           ; 2 bytes @ 0x4
   811  0024                     	ds	1
   812  0025                     ??_MakeCRC16:	
   813  0025                     up_date@dian:	
   814                           ; 0 bytes @ 0x5
   815                           
   816  0025                     WeekDay20@d:	
   817                           ; 1 bytes @ 0x5
   818                           
   819  0025                     ___lbdiv@quotient:	
   820                           ; 1 bytes @ 0x5
   821                           
   822                           
   823                           ; 1 bytes @ 0x5
   824  0025                     	ds	1
   825  0026                     ??_WeekDay20:	
   826  0026                     ??_dec_hex:	
   827                           ; 0 bytes @ 0x6
   828                           
   829  0026                     up_date@flag:	
   830                           ; 0 bytes @ 0x6
   831                           
   832                           
   833                           ; 1 bytes @ 0x6
   834  0026                     	ds	1
   835  0027                     ??_up_date:	
   836  0027                     dec_hex@dec16:	
   837                           ; 0 bytes @ 0x7
   838                           
   839  0027                     MakeCRC16@buf:	
   840                           ; 1 bytes @ 0x7
   841                           
   842                           
   843                           ; 1 bytes @ 0x7
   844  0027                     	ds	1
   845  0028                     up_date@date:	
   846  0028                     MakeCRC16@hi:	
   847                           ; 1 bytes @ 0x8
   848                           
   849  0028                     settime@write_time:	
   850                           ; 1 bytes @ 0x8
   851                           
   852                           
   853                           ; 7 bytes @ 0x8
   854  0028                     	ds	1
   855  0029                     up_date@i:	
   856  0029                     MakeCRC16@lo:	
   857                           ; 1 bytes @ 0x9
   858                           
   859                           
   860                           ; 1 bytes @ 0x9
   861  0029                     	ds	1
   862  002A                     WeekDay20@day:	
   863  002A                     MakeCRC16@i:	
   864                           ; 1 bytes @ 0xA
   865                           
   866                           
   867                           ; 2 bytes @ 0xA
   868  002A                     	ds	1
   869  002B                     WeekDay20@week:	
   870                           
   871                           ; 1 bytes @ 0xB
   872  002B                     	ds	1
   873  002C                     WeekDay20@y:	
   874  002C                     MakeCRC16@crc:	
   875                           ; 1 bytes @ 0xC
   876                           
   877                           
   878                           ; 2 bytes @ 0xC
   879  002C                     	ds	1
   880  002D                     ??_get_time:	
   881                           
   882                           ; 0 bytes @ 0xD
   883  002D                     	ds	1
   884  002E                     get_time@ds3231_time2:	
   885                           
   886                           ; 7 bytes @ 0xE
   887  002E                     	ds	1
   888  002F                     settime@i:	
   889                           
   890                           ; 1 bytes @ 0xF
   891  002F                     	ds	1
   892  0030                     up_time1@date:	
   893  0030                     up_time2@date:	
   894                           ; 6 bytes @ 0x10
   895                           
   896                           
   897                           ; 9 bytes @ 0x10
   898  0030                     	ds	5
   899  0035                     get_time@ds3231_time3:	
   900                           
   901                           ; 7 bytes @ 0x15
   902  0035                     	ds	1
   903  0036                     up_time1@i:	
   904                           
   905                           ; 1 bytes @ 0x16
   906  0036                     	ds	3
   907  0039                     up_time2@i:	
   908                           
   909                           ; 1 bytes @ 0x19
   910  0039                     	ds	1
   911  003A                     _lcd_init$5143:	
   912                           
   913                           ; 1 bytes @ 0x1A
   914  003A                     	ds	2
   915  003C                     get_time@ds3231_time:	
   916                           
   917                           ; 7 bytes @ 0x1C
   918  003C                     	ds	7
   919  0043                     get_time@ds3231_state:	
   920                           
   921                           ; 1 bytes @ 0x23
   922  0043                     	ds	1
   923  0044                     get_time@i:	
   924                           
   925                           ; 1 bytes @ 0x24
   926  0044                     	ds	1
   927  0045                     ??_main:	
   928                           
   929                           ; 0 bytes @ 0x25
   930  0045                     	ds	3
   931                           
   932                           	psect	maintext
   933  002B                     __pmaintext:	
   934 ;;Data sizes: Strings 0, constant 22, data 25, bss 91, persistent 4 stack 0
   935 ;;Auto spaces:   Size  Autos    Used
   936 ;; COMMON          14      7      10
   937 ;; BANK0           80     40      68
   938 ;; BANK1           80      0      77
   939 ;; BANK2           80     15      27
   940 ;;
   941 ;; Pointer list with targets:
   942 ;; ?___awmod	int  size(1) Largest target is 0
   943 ;;
   944 ;; ?_calccrc	unsigned short  size(1) Largest target is 0
   945 ;;
   946 ;; ?_MakeCRC16	unsigned short  size(1) Largest target is 0
   947 ;;
   948 ;; up_time2@udata_time	PTR unsigned char  size(1) Largest target is 4
   949 ;;		 -> disp_data_time(BANK0[4]), 
   950 ;;
   951 ;; up_time1@udata_time	PTR unsigned char  size(1) Largest target is 4
   952 ;;		 -> disp_data_time(BANK0[4]), 
   953 ;;
   954 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
   955 ;;
   956 ;; MakeCRC16@buf	PTR unsigned char  size(1) Largest target is 20
   957 ;;		 -> tx_udata(BANK1[20]), copy_rx_udata(BANK1[17]), 
   958 ;;
   959 ;; up_date@date	PTR unsigned char  size(1) Largest target is 9
   960 ;;		 -> up_time2@date(BANK0[9]), up_time1@date(BANK0[6]), 
   961 ;;
   962 ;; date_dec@t	PTR struct _DATE size(1) Largest target is 4
   963 ;;		 -> old_date(BANK0[4]), 
   964 ;;
   965 ;; date_add@t	PTR struct _DATE size(1) Largest target is 4
   966 ;;		 -> old_date(BANK0[4]), 
   967 ;;
   968 ;; time_add@t	PTR struct _TIME size(1) Largest target is 3
   969 ;;		 -> old_time(BANK0[3]), 
   970 ;;
   971 ;;
   972 ;; Critical Paths under _main in COMMON
   973 ;;
   974 ;;   _main->_date_dec
   975 ;;   _main->_date_add
   976 ;;   _main->___lbdiv
   977 ;;   _lcd_init->___lbdiv
   978 ;;   _up_time2->___lbdiv
   979 ;;   _up_time2->_seg_disp
   980 ;;   _up_time1->___lbdiv
   981 ;;   _up_time1->_seg_disp
   982 ;;   _up_date->_seg_disp
   983 ;;   _settime->_writebyte
   984 ;;   _get_time->_writebyte
   985 ;;   _ds3231_init->_writebyte
   986 ;;   _MakeCRC16->_calccrc
   987 ;;   _seg_disp->_shift_srclk
   988 ;;   _dec_hex->___lbdiv
   989 ;;   _WeekDay20->___awmod
   990 ;;   _hex_dec->___bmul
   991 ;;   _writebyte->_i2c_send
   992 ;;   _readbyte->_i2c_send
   993 ;;   _readbyte->_i2c_read
   994 ;;   _usart_init->_id_code
   995 ;;   _isleap->___lwmod
   996 ;;   ___lbdiv->___lbmod
   997 ;;
   998 ;; Critical Paths under _isr in COMMON
   999 ;;
  1000 ;;   _isr->_usart_isr
  1001 ;;
  1002 ;; Critical Paths under _main in BANK0
  1003 ;;
  1004 ;;   _main->_get_time
  1005 ;;   _lcd_init->_up_time2
  1006 ;;   _up_time2->_settime
  1007 ;;   _up_time1->_settime
  1008 ;;   _up_date->_seg_disp
  1009 ;;   _settime->_dec_hex
  1010 ;;   _get_time->_WeekDay20
  1011 ;;   _ds3231_init->_readbyte
  1012 ;;   _date_dec->_isleap
  1013 ;;   _date_add->_isleap
  1014 ;;   _MakeCRC16->_calccrc
  1015 ;;   _dec_hex->___lbdiv
  1016 ;;   _WeekDay20->___awmod
  1017 ;;   _isleap->___lwmod
  1018 ;;   ___lbdiv->___lbmod
  1019 ;;
  1020 ;; Critical Paths under _isr in BANK0
  1021 ;;
  1022 ;;   None.
  1023 ;;
  1024 ;; Critical Paths under _main in BANK1
  1025 ;;
  1026 ;;   None.
  1027 ;;
  1028 ;; Critical Paths under _isr in BANK1
  1029 ;;
  1030 ;;   None.
  1031 ;;
  1032 ;; Critical Paths under _main in BANK2
  1033 ;;
  1034 ;;   None.
  1035 ;;
  1036 ;; Critical Paths under _isr in BANK2
  1037 ;;
  1038 ;;   None.
  1039 ;;
  1040 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1041 ;;
  1042 ;;
  1043 ;;Call Graph Tables:
  1044 ;;
  1045 ;; ---------------------------------------------------------------------------------
  1046 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1047 ;; ---------------------------------------------------------------------------------
  1048 ;; (0) _main                                                18    18      0   26162
  1049 ;;                                             37 BANK0      3     3      0
  1050 ;;                                              0 BANK2     15    15      0
  1051 ;;                      _interupt_init
  1052 ;;                  _system_value_init
  1053 ;;                        _timer1_init
  1054 ;;                        _ds3231_init
  1055 ;;                         _usart_init
  1056 ;;                           _get_time
  1057 ;;                           _lcd_init
  1058 ;;                        _timer2_init
  1059 ;;                          _MakeCRC16
  1060 ;;                            ___lwmod
  1061 ;;                              _putch
  1062 ;;                            _settime
  1063 ;;                          _calc_zone
  1064 ;;                          _WeekDay20
  1065 ;;                           _date_dec
  1066 ;;                           _date_add
  1067 ;;                           _time_add
  1068 ;;                            ___lbmod
  1069 ;;                            ___lbdiv
  1070 ;;                           _up_time1
  1071 ;;                           _up_time2
  1072 ;; ---------------------------------------------------------------------------------
  1073 ;; (1) _lcd_init                                             1     1      0    8000
  1074 ;;                                             26 BANK0      1     1      0
  1075 ;;                            ___lbmod
  1076 ;;                            ___lbdiv
  1077 ;;                           _up_time1
  1078 ;;                           _up_time2
  1079 ;; ---------------------------------------------------------------------------------
  1080 ;; (1) _up_time2                                            11    11      0    3853
  1081 ;;                                             16 BANK0     10    10      0
  1082 ;;                            ___lbmod
  1083 ;;                            ___lbdiv
  1084 ;;                            _up_date
  1085 ;;                            _settime
  1086 ;;                           _seg_disp
  1087 ;; ---------------------------------------------------------------------------------
  1088 ;; (1) _up_time1                                             8     8      0    3640
  1089 ;;                                             16 BANK0      7     7      0
  1090 ;;                            ___lbmod
  1091 ;;                            ___lbdiv
  1092 ;;                            _up_date
  1093 ;;                            _settime
  1094 ;;                           _seg_disp
  1095 ;; ---------------------------------------------------------------------------------
  1096 ;; (2) _up_date                                              6     3      3     799
  1097 ;;                                              4 BANK0      6     3      3
  1098 ;;                           _seg_disp
  1099 ;;                         _latch_rclk
  1100 ;; ---------------------------------------------------------------------------------
  1101 ;; (2) _settime                                              8     8      0    1125
  1102 ;;                                              8 BANK0      8     8      0
  1103 ;;                            _dec_hex
  1104 ;;                          _writebyte
  1105 ;; ---------------------------------------------------------------------------------
  1106 ;; (1) _get_time                                            24    24      0    2975
  1107 ;;                                             13 BANK0     24    24      0
  1108 ;;                           _readbyte
  1109 ;;                          _writebyte
  1110 ;;                            _hex_dec
  1111 ;;                          _WeekDay20
  1112 ;;                          _calc_zone
  1113 ;; ---------------------------------------------------------------------------------
  1114 ;; (1) _ds3231_init                                          1     1      0     553
  1115 ;;                                              2 BANK0      1     1      0
  1116 ;;                           _readbyte
  1117 ;;                          _writebyte
  1118 ;; ---------------------------------------------------------------------------------
  1119 ;; (1) _date_dec                                             2     2      0     635
  1120 ;;                                              5 COMMON     2     2      0
  1121 ;;                             _isleap
  1122 ;; ---------------------------------------------------------------------------------
  1123 ;; (1) _date_add                                             2     2      0     669
  1124 ;;                                              5 COMMON     2     2      0
  1125 ;;                             _isleap
  1126 ;; ---------------------------------------------------------------------------------
  1127 ;; (1) _MakeCRC16                                           11     9      2     519
  1128 ;;                                              3 BANK0     11     9      2
  1129 ;;                            _calccrc
  1130 ;; ---------------------------------------------------------------------------------
  1131 ;; (2) _seg_disp                                             6     4      2     483
  1132 ;;                                              5 COMMON     2     0      2
  1133 ;;                                              0 BANK0      4     4      0
  1134 ;;                        _shift_srclk
  1135 ;; ---------------------------------------------------------------------------------
  1136 ;; (3) _dec_hex                                              2     2      0     535
  1137 ;;                                              6 BANK0      2     2      0
  1138 ;;                            ___lbmod
  1139 ;;                            ___lbdiv
  1140 ;; ---------------------------------------------------------------------------------
  1141 ;; (1) _WeekDay20                                            9     7      2     795
  1142 ;;                                              4 BANK0      9     7      2
  1143 ;;                            ___awmod
  1144 ;; ---------------------------------------------------------------------------------
  1145 ;; (2) _hex_dec                                              2     2      0     198
  1146 ;;                                              0 BANK0      2     2      0
  1147 ;;                             ___bmul
  1148 ;; ---------------------------------------------------------------------------------
  1149 ;; (3) _writebyte                                            2     1      1     201
  1150 ;;                                              6 COMMON     1     0      1
  1151 ;;                                              0 BANK0      1     1      0
  1152 ;;                          _start_i2c
  1153 ;;                           _i2c_send
  1154 ;;                        _waitack_i2c
  1155 ;; ---------------------------------------------------------------------------------
  1156 ;; (2) _readbyte                                             2     2      0     318
  1157 ;;                                              0 BANK0      2     2      0
  1158 ;;                          _start_i2c
  1159 ;;                           _i2c_send
  1160 ;;                        _waitack_i2c
  1161 ;;                           _i2c_read
  1162 ;;                     _sendnotack_i2c
  1163 ;; ---------------------------------------------------------------------------------
  1164 ;; (1) _usart_init                                           0     0      0      61
  1165 ;;                            _id_code
  1166 ;; ---------------------------------------------------------------------------------
  1167 ;; (2) _isleap                                               2     0      2     325
  1168 ;;                                              4 BANK0      2     0      2
  1169 ;;                            ___lwmod
  1170 ;; ---------------------------------------------------------------------------------
  1171 ;; (2) ___awmod                                              6     2      4     433
  1172 ;;                                              4 COMMON     2     2      0
  1173 ;;                                              0 BANK0      4     0      4
  1174 ;; ---------------------------------------------------------------------------------
  1175 ;; (4) ___lbmod                                              5     4      1     232
  1176 ;;                                              4 COMMON     2     1      1
  1177 ;;                                              0 BANK0      3     3      0
  1178 ;; ---------------------------------------------------------------------------------
  1179 ;; (4) ___lbdiv                                              4     3      1     241
  1180 ;;                                              6 COMMON     1     0      1
  1181 ;;                                              3 BANK0      3     3      0
  1182 ;;                            ___lbmod (ARG)
  1183 ;; ---------------------------------------------------------------------------------
  1184 ;; (3) ___lwmod                                              5     1      4     232
  1185 ;;                                              4 COMMON     1     1      0
  1186 ;;                                              0 BANK0      4     0      4
  1187 ;; ---------------------------------------------------------------------------------
  1188 ;; (3) ___bmul                                               3     2      1     136
  1189 ;;                                              4 COMMON     3     2      1
  1190 ;; ---------------------------------------------------------------------------------
  1191 ;; (3) _i2c_read                                             2     2      0     111
  1192 ;;                                              4 COMMON     2     2      0
  1193 ;; ---------------------------------------------------------------------------------
  1194 ;; (4) _i2c_send                                             2     2      0     102
  1195 ;;                                              4 COMMON     2     2      0
  1196 ;; ---------------------------------------------------------------------------------
  1197 ;; (3) _sendnotack_i2c                                       0     0      0       0
  1198 ;; ---------------------------------------------------------------------------------
  1199 ;; (4) _waitack_i2c                                          1     1      0      37
  1200 ;;                                              4 COMMON     1     1      0
  1201 ;; ---------------------------------------------------------------------------------
  1202 ;; (4) _start_i2c                                            0     0      0       0
  1203 ;; ---------------------------------------------------------------------------------
  1204 ;; (2) _calccrc                                              5     3      2     210
  1205 ;;                                              4 COMMON     2     0      2
  1206 ;;                                              0 BANK0      3     3      0
  1207 ;; ---------------------------------------------------------------------------------
  1208 ;; (1) _timer2_init                                          0     0      0       0
  1209 ;; ---------------------------------------------------------------------------------
  1210 ;; (1) _system_value_init                                    0     0      0       0
  1211 ;; ---------------------------------------------------------------------------------
  1212 ;; (1) _interupt_init                                        0     0      0       0
  1213 ;; ---------------------------------------------------------------------------------
  1214 ;; (3) _latch_rclk                                           1     1      0      93
  1215 ;;                                              4 COMMON     1     1      0
  1216 ;; ---------------------------------------------------------------------------------
  1217 ;; (3) _shift_srclk                                          1     1      0      93
  1218 ;;                                              4 COMMON     1     1      0
  1219 ;; ---------------------------------------------------------------------------------
  1220 ;; (1) _calc_zone                                            0     0      0       0
  1221 ;; ---------------------------------------------------------------------------------
  1222 ;; (1) _putch                                                1     1      0      31
  1223 ;;                                              4 COMMON     1     1      0
  1224 ;; ---------------------------------------------------------------------------------
  1225 ;; (2) _id_code                                              1     1      0      61
  1226 ;;                                              4 COMMON     1     1      0
  1227 ;; ---------------------------------------------------------------------------------
  1228 ;; (1) _time_add                                             1     1      0     279
  1229 ;;                                              4 COMMON     1     1      0
  1230 ;; ---------------------------------------------------------------------------------
  1231 ;; (1) _timer1_init                                          0     0      0       0
  1232 ;; ---------------------------------------------------------------------------------
  1233 ;; Estimated maximum stack depth 4
  1234 ;; ---------------------------------------------------------------------------------
  1235 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1236 ;; ---------------------------------------------------------------------------------
  1237 ;; (6) _isr                                                  3     3      0      23
  1238 ;;                                              1 COMMON     3     3      0
  1239 ;;                         _timer1_isr
  1240 ;;                          _usart_isr
  1241 ;;                         _timer2_isr
  1242 ;; ---------------------------------------------------------------------------------
  1243 ;; (7) _timer2_isr                                           0     0      0       0
  1244 ;; ---------------------------------------------------------------------------------
  1245 ;; (7) _usart_isr                                            1     1      0      23
  1246 ;;                                              0 COMMON     1     1      0
  1247 ;; ---------------------------------------------------------------------------------
  1248 ;; (7) _timer1_isr                                           0     0      0       0
  1249 ;; ---------------------------------------------------------------------------------
  1250 ;; Estimated maximum stack depth 7
  1251 ;; ---------------------------------------------------------------------------------
  1252 ;; Call Graph Graphs:
  1253 ;; _main (ROOT)
  1254 ;;   _interupt_init
  1255 ;;   _system_value_init
  1256 ;;   _timer1_init
  1257 ;;   _ds3231_init
  1258 ;;     _readbyte
  1259 ;;       _start_i2c
  1260 ;;       _i2c_send
  1261 ;;       _waitack_i2c
  1262 ;;       _i2c_read
  1263 ;;       _sendnotack_i2c
  1264 ;;     _writebyte
  1265 ;;       _start_i2c
  1266 ;;       _i2c_send
  1267 ;;       _waitack_i2c
  1268 ;;   _usart_init
  1269 ;;     _id_code
  1270 ;;   _get_time
  1271 ;;     _readbyte
  1272 ;;       _start_i2c
  1273 ;;       _i2c_send
  1274 ;;       _waitack_i2c
  1275 ;;       _i2c_read
  1276 ;;       _sendnotack_i2c
  1277 ;;     _writebyte
  1278 ;;       _start_i2c
  1279 ;;       _i2c_send
  1280 ;;       _waitack_i2c
  1281 ;;     _hex_dec
  1282 ;;       ___bmul
  1283 ;;     _WeekDay20
  1284 ;;       ___awmod
  1285 ;;     _calc_zone
  1286 ;;   _lcd_init
  1287 ;;     ___lbmod
  1288 ;;     ___lbdiv
  1289 ;;       ___lbmod (ARG)
  1290 ;;     _up_time1
  1291 ;;       ___lbmod
  1292 ;;       ___lbdiv
  1293 ;;         ___lbmod (ARG)
  1294 ;;       _up_date
  1295 ;;         _seg_disp
  1296 ;;           _shift_srclk
  1297 ;;         _latch_rclk
  1298 ;;       _settime
  1299 ;;         _dec_hex
  1300 ;;           ___lbmod
  1301 ;;           ___lbdiv
  1302 ;;             ___lbmod (ARG)
  1303 ;;         _writebyte
  1304 ;;           _start_i2c
  1305 ;;           _i2c_send
  1306 ;;           _waitack_i2c
  1307 ;;       _seg_disp
  1308 ;;         _shift_srclk
  1309 ;;     _up_time2
  1310 ;;       ___lbmod
  1311 ;;       ___lbdiv
  1312 ;;         ___lbmod (ARG)
  1313 ;;       _up_date
  1314 ;;         _seg_disp
  1315 ;;           _shift_srclk
  1316 ;;         _latch_rclk
  1317 ;;       _settime
  1318 ;;         _dec_hex
  1319 ;;           ___lbmod
  1320 ;;           ___lbdiv
  1321 ;;             ___lbmod (ARG)
  1322 ;;         _writebyte
  1323 ;;           _start_i2c
  1324 ;;           _i2c_send
  1325 ;;           _waitack_i2c
  1326 ;;       _seg_disp
  1327 ;;         _shift_srclk
  1328 ;;   _timer2_init
  1329 ;;   _MakeCRC16
  1330 ;;     _calccrc
  1331 ;;   ___lwmod
  1332 ;;   _putch
  1333 ;;   _settime
  1334 ;;     _dec_hex
  1335 ;;       ___lbmod
  1336 ;;       ___lbdiv
  1337 ;;         ___lbmod (ARG)
  1338 ;;     _writebyte
  1339 ;;       _start_i2c
  1340 ;;       _i2c_send
  1341 ;;       _waitack_i2c
  1342 ;;   _calc_zone
  1343 ;;   _WeekDay20
  1344 ;;     ___awmod
  1345 ;;   _date_dec
  1346 ;;     _isleap
  1347 ;;       ___lwmod
  1348 ;;   _date_add
  1349 ;;     _isleap
  1350 ;;       ___lwmod
  1351 ;;   _time_add
  1352 ;;   ___lbmod
  1353 ;;   ___lbdiv
  1354 ;;     ___lbmod (ARG)
  1355 ;;   _up_time1
  1356 ;;     ___lbmod
  1357 ;;     ___lbdiv
  1358 ;;       ___lbmod (ARG)
  1359 ;;     _up_date
  1360 ;;       _seg_disp
  1361 ;;         _shift_srclk
  1362 ;;       _latch_rclk
  1363 ;;     _settime
  1364 ;;       _dec_hex
  1365 ;;         ___lbmod
  1366 ;;         ___lbdiv
  1367 ;;           ___lbmod (ARG)
  1368 ;;       _writebyte
  1369 ;;         _start_i2c
  1370 ;;         _i2c_send
  1371 ;;         _waitack_i2c
  1372 ;;     _seg_disp
  1373 ;;       _shift_srclk
  1374 ;;   _up_time2
  1375 ;;     ___lbmod
  1376 ;;     ___lbdiv
  1377 ;;       ___lbmod (ARG)
  1378 ;;     _up_date
  1379 ;;       _seg_disp
  1380 ;;         _shift_srclk
  1381 ;;       _latch_rclk
  1382 ;;     _settime
  1383 ;;       _dec_hex
  1384 ;;         ___lbmod
  1385 ;;         ___lbdiv
  1386 ;;           ___lbmod (ARG)
  1387 ;;       _writebyte
  1388 ;;         _start_i2c
  1389 ;;         _i2c_send
  1390 ;;         _waitack_i2c
  1391 ;;     _seg_disp
  1392 ;;       _shift_srclk
  1393 ;;
  1394 ;; _isr (ROOT)
  1395 ;;   _timer1_isr
  1396 ;;   _usart_isr
  1397 ;;   _timer2_isr
  1398 ;;
  1399 ;; Address spaces:
  1400 ;;Name               Size   Autos  Total    Cost      Usage
  1401 ;;SFR3                 0      0       0       4        0.0%
  1402 ;;BITSFR3              0      0       0       4        0.0%
  1403 ;;BANK2               50      F      1B       7       33.8%
  1404 ;;BITBANK2            50      0       0       6        0.0%
  1405 ;;SFR2                 0      0       0       5        0.0%
  1406 ;;BITSFR2              0      0       0       5        0.0%
  1407 ;;SFR1                 0      0       0       2        0.0%
  1408 ;;BITSFR1              0      0       0       2        0.0%
  1409 ;;BANK1               50      0      4D       5       96.3%
  1410 ;;BITBANK1            50      0       0       4        0.0%
  1411 ;;CODE                 0      0       0       0        0.0%
  1412 ;;DATA                 0      0      BF      10        0.0%
  1413 ;;ABS                  0      0      B6       8        0.0%
  1414 ;;NULL                 0      0       0       0        0.0%
  1415 ;;STACK                0      0       9       2        0.0%
  1416 ;;BANK0               50     28      44       3       85.0%
  1417 ;;BITBANK0            50      0       0       9        0.0%
  1418 ;;SFR0                 0      0       0       1        0.0%
  1419 ;;BITSFR0              0      0       0       1        0.0%
  1420 ;;COMMON               E      7       A       1       71.4%
  1421 ;;BITCOMMON            E      0       0       0        0.0%
  1422 ;;EEDATA             100      0       0       0        0.0%
  1423                           
  1424                           
  1425 ;; *************** function _main *****************
  1426 ;; Defined at:
  1427 ;;		line 87 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\main.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;		None
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  chk_value       2   12[BANK2 ] unsigned short 
  1432 ;;  func            2   10[BANK2 ] unsigned short 
  1433 ;;  copy_func       2    6[BANK2 ] unsigned short 
  1434 ;;  calc_chk_val    2    0[BANK2 ] unsigned short 
  1435 ;;  i               1   14[BANK2 ] unsigned char 
  1436 ;;  j               1    9[BANK2 ] unsigned char 
  1437 ;;  flag_send_da    1    8[BANK2 ] unsigned char 
  1438 ;;  len_cnt         1    5[BANK2 ] unsigned char 
  1439 ;;  flag_temp       1    4[BANK2 ] unsigned char 
  1440 ;;  flag_save_da    1    3[BANK2 ] unsigned char 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;		None               void
  1443 ;; Registers used:
  1444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1445 ;; Tracked objects:
  1446 ;;		On entry : 17F/0
  1447 ;;		On exit  : 160/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1450 ;;      Params:         0       0       0       0
  1451 ;;      Locals:         0       0       0      15
  1452 ;;      Temps:          0       3       0       0
  1453 ;;      Totals:         0       3       0      15
  1454 ;;Total ram usage:       18 bytes
  1455 ;; Hardware stack levels required when called:    7
  1456 ;; This function calls:
  1457 ;;		_interupt_init
  1458 ;;		_system_value_init
  1459 ;;		_timer1_init
  1460 ;;		_ds3231_init
  1461 ;;		_usart_init
  1462 ;;		_get_time
  1463 ;;		_lcd_init
  1464 ;;		_timer2_init
  1465 ;;		_MakeCRC16
  1466 ;;		___lwmod
  1467 ;;		_putch
  1468 ;;		_settime
  1469 ;;		_calc_zone
  1470 ;;		_WeekDay20
  1471 ;;		_date_dec
  1472 ;;		_date_add
  1473 ;;		_time_add
  1474 ;;		___lbmod
  1475 ;;		___lbdiv
  1476 ;;		_up_time1
  1477 ;;		_up_time2
  1478 ;; This function is called by:
  1479 ;;		Startup code after reset
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482  002B                     _main:	
  1483                           
  1484                           ;main.c: 88: UINT16 chk_value,calc_chk_value;
  1485                           ;main.c: 89: UINT16 func,copy_func;
  1486                           ;main.c: 90: UINT8 i,j,flag_send_data,flag_save_data;
  1487                           ;main.c: 91: static UINT8 save_time_cnt=0;
  1488                           ;main.c: 92: UINT8 len_cnt,flag_temp;
  1489                           ;main.c: 95: interupt_init();
  1490                           
  1491                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1492  002B  158A  2526  118A   	fcall	_interupt_init
  1493                           
  1494                           ;main.c: 96: system_value_init();
  1495  002E  118A  27DB  118A   	fcall	_system_value_init
  1496                           
  1497                           ;main.c: 97: timer1_init();
  1498  0031  158A  2535  118A   	fcall	_timer1_init
  1499                           
  1500                           ;main.c: 98: ds3231_init();
  1501  0034  158A  25EA  118A   	fcall	_ds3231_init
  1502                           
  1503                           ;main.c: 99: usart_init();
  1504  0037  158A  2573  118A   	fcall	_usart_init
  1505                           
  1506                           ;main.c: 100: get_time();
  1507  003A  158A  2615  118A   	fcall	_get_time
  1508                           
  1509                           ;main.c: 111: lcd_init();
  1510  003D  118A  2522  118A   	fcall	_lcd_init
  1511                           
  1512                           ;main.c: 114: timer2_init();
  1513  0040  118A  27F3  118A   	fcall	_timer2_init
  1514  0043                     l13890:	
  1515                           
  1516                           ;main.c: 127: {
  1517                           ;main.c: 130: if(usart_timer_cnt>5)
  1518  0043  3006               	movlw	6
  1519  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1520  0045  0252               	subwf	_usart_timer_cnt,w
  1521  0046  1C03               	skipc
  1522  0047  28A9               	goto	l13918
  1523                           
  1524                           ;main.c: 131: {
  1525                           ;main.c: 132: flag_usart_start=0;
  1526  0048  01F7               	clrf	_flag_usart_start
  1527                           
  1528                           ;main.c: 133: usart_count=0;
  1529  0049  01F9               	clrf	_usart_count
  1530                           
  1531                           ;main.c: 134: usart_timer_cnt=0;
  1532  004A  01D2               	clrf	_usart_timer_cnt
  1533                           
  1534                           ;main.c: 135: if((rx_udata[0]==0xD3)&&(rx_udata[1]<17-4))
  1535  004B  1683               	bsf	3,5	;RP0=1, select bank1
  1536  004C  0820               	movf	_rx_udata^(0+128),w
  1537  004D  3AD3               	xorlw	211
  1538  004E  1D03               	skipz
  1539  004F  28A9               	goto	l13918
  1540  0050  300D               	movlw	13
  1541  0051  0221               	subwf	(_rx_udata^(0+128)+1),w
  1542  0052  1803               	skipnc
  1543  0053  28A9               	goto	l13918
  1544                           
  1545                           ;main.c: 136: {
  1546                           ;main.c: 137: if(rx_udata[rx_udata[1]+4]==0xD8)
  1547  0054  0821               	movf	(_rx_udata^(0+128)+1),w
  1548  0055  3EA4               	addlw	(_rx_udata+4)& (0+255)
  1549  0056  0084               	movwf	4
  1550  0057  1383               	bcf	3,7	;select IRP bank1
  1551  0058  0800               	movf	0,w
  1552  0059  3AD8               	xorlw	216
  1553  005A  1D03               	skipz
  1554  005B  28A9               	goto	l13918
  1555                           
  1556                           ;main.c: 138: {
  1557                           ;main.c: 139: RCIE=0;
  1558  005C  128C               	bcf	12,5
  1559                           
  1560                           ;main.c: 140: func = rx_udata[0x02]<<8;
  1561  005D  0822               	movf	(_rx_udata^(0+128)+2),w
  1562  005E  1283               	bcf	3,5	;RP0=0, select bank2
  1563  005F  1703               	bsf	3,6	;RP1=1, select bank2
  1564  0060  00AA               	movwf	main@func^(0+256)
  1565  0061  01AB               	clrf	(main@func+1)^(0+256)
  1566  0062  00AB               	movwf	(main@func+1)^(0+256)
  1567  0063  01AA               	clrf	main@func^(0+256)
  1568                           
  1569                           ;main.c: 141: func += rx_udata[0x02+1];
  1570  0064  1683               	bsf	3,5	;RP0=1, select bank1
  1571  0065  1303               	bcf	3,6	;RP1=0, select bank1
  1572  0066  0823               	movf	(_rx_udata^(0+128)+3),w
  1573  0067  1283               	bcf	3,5	;RP0=0, select bank2
  1574  0068  1703               	bsf	3,6	;RP1=1, select bank2
  1575  0069  07AA               	addwf	main@func^(0+256),f
  1576  006A  1803               	skipnc
  1577  006B  0AAB               	incf	(main@func+1)^(0+256),f
  1578                           
  1579                           ;main.c: 142: i=rx_udata[0x04];
  1580  006C  1683               	bsf	3,5	;RP0=1, select bank1
  1581  006D  1303               	bcf	3,6	;RP1=0, select bank1
  1582  006E  0824               	movf	(_rx_udata^(0+128)+4),w
  1583  006F  1283               	bcf	3,5	;RP0=0, select bank2
  1584  0070  1703               	bsf	3,6	;RP1=1, select bank2
  1585  0071  00AE               	movwf	main@i^(0+256)
  1586                           
  1587                           ;main.c: 143: if((func == 0x0900) ||(i == my_id_code) || (i == 0xff))
  1588  0072  082B               	movf	(main@func+1)^(0+256),w
  1589  0073  3A09               	xorlw	9
  1590  0074  042A               	iorwf	main@func^(0+256),w
  1591  0075  1903               	skipnz
  1592  0076  2881               	goto	l13908
  1593  0077  082E               	movf	main@i^(0+256),w
  1594  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1595  0079  064D               	xorwf	_my_id_code,w
  1596  007A  1903               	skipnz
  1597  007B  2881               	goto	l13908
  1598  007C  1703               	bsf	3,6	;RP1=1, select bank2
  1599  007D  082E               	movf	main@i^(0+256),w
  1600  007E  3AFF               	xorlw	255
  1601  007F  1D03               	skipz
  1602  0080  28A6               	goto	l4296
  1603  0081                     l13908:	
  1604                           
  1605                           ;main.c: 144: {
  1606                           ;main.c: 145: disp_rxd_length=rx_udata[1]+5;
  1607  0081  1683               	bsf	3,5	;RP0=1, select bank1
  1608  0082  1303               	bcf	3,6	;RP1=0, select bank1
  1609  0083  0821               	movf	(_rx_udata^(0+128)+1),w
  1610  0084  3E05               	addlw	5
  1611  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1612  0086  00C8               	movwf	_disp_rxd_length
  1613                           
  1614                           ;main.c: 146: for(i=0;i<disp_rxd_length;i++)
  1615  0087  1703               	bsf	3,6	;RP1=1, select bank2
  1616  0088  01AE               	clrf	main@i^(0+256)
  1617  0089                     l13916:	
  1618  0089  1303               	bcf	3,6	;RP1=0, select bank0
  1619  008A  0848               	movf	_disp_rxd_length,w
  1620  008B  1703               	bsf	3,6	;RP1=1, select bank2
  1621  008C  022E               	subwf	main@i^(0+256),w
  1622  008D  1803               	btfsc	3,0
  1623  008E  28A3               	goto	l4301
  1624                           
  1625                           ;main.c: 147: {
  1626                           ;main.c: 148: copy_rx_udata[i]=rx_udata[i];
  1627  008F  082E               	movf	main@i^(0+256),w
  1628  0090  3EA0               	addlw	_rx_udata& (0+255)
  1629  0091  0084               	movwf	4
  1630  0092  0800               	movf	0,w
  1631  0093  1303               	bcf	3,6	;RP1=0, select bank0
  1632  0094  00C5               	movwf	??_main
  1633  0095  1703               	bsf	3,6	;RP1=1, select bank2
  1634  0096  082E               	movf	main@i^(0+256),w
  1635  0097  3ECF               	addlw	_copy_rx_udata& (0+255)
  1636  0098  0084               	movwf	4
  1637  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1638  009A  0845               	movf	??_main,w
  1639  009B  0080               	movwf	0
  1640                           
  1641                           ;main.c: 149: rx_udata[i]=0;
  1642  009C  1703               	bsf	3,6	;RP1=1, select bank2
  1643  009D  082E               	movf	main@i^(0+256),w
  1644  009E  3EA0               	addlw	_rx_udata& (0+255)
  1645  009F  0084               	movwf	4
  1646  00A0  0180               	clrf	0
  1647  00A1  0AAE               	incf	main@i^(0+256),f
  1648  00A2  2889               	goto	l13916
  1649  00A3                     l4301:	
  1650                           
  1651                           ;main.c: 150: }
  1652                           ;main.c: 151: flag_data_process=1;
  1653  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1654  00A4  01C9               	clrf	_flag_data_process
  1655  00A5  0AC9               	incf	_flag_data_process,f
  1656  00A6                     l4296:	
  1657                           
  1658                           ;main.c: 152: }
  1659                           ;main.c: 153: RCIE=1;
  1660  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1661  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  1662  00A8  168C               	bsf	12,5
  1663  00A9                     l13918:	
  1664                           
  1665                           ;main.c: 155: }
  1666                           ;main.c: 156: }
  1667                           ;main.c: 157: }
  1668                           ;main.c: 159: flag_send_data=0;
  1669  00A9  1283               	bcf	3,5	;RP0=0, select bank2
  1670  00AA  1703               	bsf	3,6	;RP1=1, select bank2
  1671  00AB  01A8               	clrf	main@flag_send_data^(0+256)
  1672                           
  1673                           ;main.c: 160: flag_save_data=0;
  1674  00AC  01A3               	clrf	main@flag_save_data^(0+256)
  1675                           
  1676                           ;main.c: 161: flag_temp=0;
  1677  00AD  01A4               	clrf	main@flag_temp^(0+256)
  1678                           
  1679                           ;main.c: 162: if(flag_data_process == TRUE)
  1680  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1681  00AF  0B49               	decfsz	_flag_data_process,w
  1682  00B0  2A28               	goto	l14058
  1683                           
  1684                           ;main.c: 163: {
  1685                           ;main.c: 165: chk_value = copy_rx_udata[disp_rxd_length-2] + copy_rx_udata[disp_rxd_leng
      +                          th-3]*256;
  1686  00B1  0848               	movf	_disp_rxd_length,w
  1687  00B2  3ECD               	addlw	(_copy_rx_udata+-2)& (0+255)
  1688  00B3  0084               	movwf	4
  1689  00B4  1383               	bcf	3,7	;select IRP bank1
  1690  00B5  0800               	movf	0,w
  1691  00B6  00C5               	movwf	??_main
  1692  00B7  0848               	movf	_disp_rxd_length,w
  1693  00B8  3ECC               	addlw	(_copy_rx_udata+-3)& (0+255)
  1694  00B9  0084               	movwf	4
  1695  00BA  0800               	movf	0,w
  1696  00BB  1703               	bsf	3,6	;RP1=1, select bank2
  1697  00BC  00AD               	movwf	(main@chk_value+1)^(0+256)
  1698  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  1699  00BE  0845               	movf	??_main,w
  1700  00BF  1703               	bsf	3,6	;RP1=1, select bank2
  1701  00C0  00AC               	movwf	main@chk_value^(0+256)
  1702                           
  1703                           ;main.c: 166: calc_chk_value = MakeCRC16(&copy_rx_udata[0],disp_rxd_length-3);
  1704  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1705  00C2  0848               	movf	_disp_rxd_length,w
  1706  00C3  3EFD               	addlw	253
  1707  00C4  00A3               	movwf	?_MakeCRC16
  1708  00C5  30CF               	movlw	_copy_rx_udata& (0+255)
  1709  00C6  118A  2791  118A   	fcall	_MakeCRC16
  1710  00C9  0824               	movf	?_MakeCRC16+1,w
  1711  00CA  1703               	bsf	3,6	;RP1=1, select bank2
  1712  00CB  00A1               	movwf	(main@calc_chk_value+1)^(0+256)
  1713  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1714  00CD  0823               	movf	?_MakeCRC16,w
  1715  00CE  1703               	bsf	3,6	;RP1=1, select bank2
  1716  00CF  00A0               	movwf	main@calc_chk_value^(0+256)
  1717                           
  1718                           ;main.c: 167: if(chk_value == calc_chk_value)
  1719  00D0  0821               	movf	(main@calc_chk_value+1)^(0+256),w
  1720  00D1  062D               	xorwf	(main@chk_value+1)^(0+256),w
  1721  00D2  1D03               	skipz
  1722  00D3  28D6               	goto	u4215
  1723  00D4  0820               	movf	main@calc_chk_value^(0+256),w
  1724  00D5  062C               	xorwf	main@chk_value^(0+256),w
  1725  00D6                     u4215:	
  1726  00D6  1D03               	skipz
  1727  00D7  2A26               	goto	l14056
  1728                           
  1729                           ;main.c: 168: {
  1730                           ;main.c: 169: func = copy_rx_udata[2]<<8;
  1731  00D8  1683               	bsf	3,5	;RP0=1, select bank1
  1732  00D9  1303               	bcf	3,6	;RP1=0, select bank1
  1733  00DA  0851               	movf	(_copy_rx_udata^(0+128)+2),w
  1734  00DB  1283               	bcf	3,5	;RP0=0, select bank2
  1735  00DC  1703               	bsf	3,6	;RP1=1, select bank2
  1736  00DD  00AA               	movwf	main@func^(0+256)
  1737  00DE  01AB               	clrf	(main@func+1)^(0+256)
  1738  00DF  00AB               	movwf	(main@func+1)^(0+256)
  1739  00E0  01AA               	clrf	main@func^(0+256)
  1740                           
  1741                           ;main.c: 170: func += copy_rx_udata[3];
  1742  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  1743  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  1744  00E3  0852               	movf	(_copy_rx_udata^(0+128)+3),w
  1745  00E4  1283               	bcf	3,5	;RP0=0, select bank2
  1746  00E5  1703               	bsf	3,6	;RP1=1, select bank2
  1747  00E6  07AA               	addwf	main@func^(0+256),f
  1748  00E7  1803               	skipnc
  1749  00E8  0AAB               	incf	(main@func+1)^(0+256),f
  1750                           
  1751                           ;main.c: 174: switch(func)
  1752  00E9  2A12               	goto	l14054
  1753  00EA                     l13930:	
  1754                           
  1755                           ;main.c: 177: {
  1756                           ;main.c: 178: if(disp_rxd_length < 16)
  1757  00EA  3010               	movlw	16
  1758  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1759  00EC  0248               	subwf	_disp_rxd_length,w
  1760  00ED  1C03               	btfss	3,0
  1761  00EE  2A26               	goto	l14056
  1762                           
  1763                           ;main.c: 181: }
  1764                           ;main.c: 201: {
  1765                           ;main.c: 204: i = 0x04;
  1766  00EF  3004               	movlw	4
  1767  00F0  1703               	bsf	3,6	;RP1=1, select bank2
  1768  00F1  00AE               	movwf	main@i^(0+256)
  1769                           
  1770                           ;main.c: 205: chk_value = copy_rx_udata[i++]*256;
  1771  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1772  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1773  00F4  0853               	movf	(_copy_rx_udata^(0+128)+4),w
  1774  00F5  1283               	bcf	3,5	;RP0=0, select bank2
  1775  00F6  1703               	bsf	3,6	;RP1=1, select bank2
  1776  00F7  00AC               	movwf	main@chk_value^(0+256)
  1777  00F8  01AD               	clrf	(main@chk_value+1)^(0+256)
  1778  00F9  00AD               	movwf	(main@chk_value+1)^(0+256)
  1779  00FA  01AC               	clrf	main@chk_value^(0+256)
  1780  00FB  0AAE               	incf	main@i^(0+256),f
  1781                           
  1782                           ;main.c: 206: chk_value += copy_rx_udata[i++];
  1783  00FC  082E               	movf	main@i^(0+256),w
  1784  00FD  3ECF               	addlw	_copy_rx_udata& (0+255)
  1785  00FE  0084               	movwf	4
  1786  00FF  0800               	movf	0,w
  1787  0100  07AC               	addwf	main@chk_value^(0+256),f
  1788  0101  1803               	skipnc
  1789  0102  0AAD               	incf	(main@chk_value+1)^(0+256),f
  1790  0103  0AAE               	incf	main@i^(0+256),f
  1791                           
  1792                           ;main.c: 207: chk_value %= 100;
  1793  0104  3064               	movlw	100
  1794  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1795  0106  00A0               	movwf	?___lwmod
  1796  0107  01A1               	clrf	?___lwmod+1
  1797  0108  1703               	bsf	3,6	;RP1=1, select bank2
  1798  0109  082D               	movf	(main@chk_value+1)^(0+256),w
  1799  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1800  010B  00A3               	movwf	?___lwmod+3
  1801  010C  1703               	bsf	3,6	;RP1=1, select bank2
  1802  010D  082C               	movf	main@chk_value^(0+256),w
  1803  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1804  010F  00A2               	movwf	?___lwmod+2
  1805  0110  118A  26F5  118A   	fcall	___lwmod
  1806  0113  0821               	movf	?___lwmod+1,w
  1807  0114  1703               	bsf	3,6	;RP1=1, select bank2
  1808  0115  00AD               	movwf	(main@chk_value+1)^(0+256)
  1809  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1810  0117  0820               	movf	?___lwmod,w
  1811  0118  1703               	bsf	3,6	;RP1=1, select bank2
  1812  0119  00AC               	movwf	main@chk_value^(0+256)
  1813                           
  1814                           ;main.c: 208: if((chk_value>=13) && (copy_rx_udata[i]<=12) && (copy_rx_udata[i+1]<=31) &
      +                          & (copy_rx_udata[i+2]<=23) && (copy_rx_udata[i+3]<=59) && (copy_rx_udata[i+4]<=59))
  1815  011A  3000               	movlw	0
  1816  011B  022D               	subwf	(main@chk_value+1)^(0+256),w
  1817  011C  300D               	movlw	13
  1818  011D  1903               	skipnz
  1819  011E  022C               	subwf	main@chk_value^(0+256),w
  1820  011F  1C03               	skipc
  1821  0120  2A26               	goto	l14056
  1822  0121  082E               	movf	main@i^(0+256),w
  1823  0122  3ECF               	addlw	_copy_rx_udata& (0+255)
  1824  0123  0084               	movwf	4
  1825  0124  300D               	movlw	13
  1826  0125  0200               	subwf	0,w
  1827  0126  1803               	skipnc
  1828  0127  2A26               	goto	l14056
  1829  0128  082E               	movf	main@i^(0+256),w
  1830  0129  3ED0               	addlw	(_copy_rx_udata+1)& (0+255)
  1831  012A  0084               	movwf	4
  1832  012B  3020               	movlw	32
  1833  012C  0200               	subwf	0,w
  1834  012D  1803               	skipnc
  1835  012E  2A26               	goto	l14056
  1836  012F  082E               	movf	main@i^(0+256),w
  1837  0130  3ED1               	addlw	(_copy_rx_udata+2)& (0+255)
  1838  0131  0084               	movwf	4
  1839  0132  3018               	movlw	24
  1840  0133  0200               	subwf	0,w
  1841  0134  1803               	skipnc
  1842  0135  2A26               	goto	l14056
  1843  0136  082E               	movf	main@i^(0+256),w
  1844  0137  3ED2               	addlw	(_copy_rx_udata+3)& (0+255)
  1845  0138  0084               	movwf	4
  1846  0139  303C               	movlw	60
  1847  013A  0200               	subwf	0,w
  1848  013B  1803               	skipnc
  1849  013C  2A26               	goto	l14056
  1850  013D  082E               	movf	main@i^(0+256),w
  1851  013E  3ED3               	addlw	(_copy_rx_udata+4)& (0+255)
  1852  013F  0084               	movwf	4
  1853  0140  303C               	movlw	60
  1854  0141  0200               	subwf	0,w
  1855  0142  1803               	skipnc
  1856  0143  2A26               	goto	l14056
  1857                           
  1858                           ;main.c: 214: {
  1859                           ;main.c: 215: copy_old_date.year = chk_value;
  1860  0144  082C               	movf	main@chk_value^(0+256),w
  1861  0145  1683               	bsf	3,5	;RP0=1, select bank1
  1862  0146  1303               	bcf	3,6	;RP1=0, select bank1
  1863  0147  00B4               	movwf	(_copy_old_date^(0+128)+3)
  1864                           
  1865                           ;main.c: 216: copy_old_date.month = copy_rx_udata[i++];
  1866  0148  1283               	bcf	3,5	;RP0=0, select bank2
  1867  0149  1703               	bsf	3,6	;RP1=1, select bank2
  1868  014A  082E               	movf	main@i^(0+256),w
  1869  014B  3ECF               	addlw	_copy_rx_udata& (0+255)
  1870  014C  0084               	movwf	4
  1871  014D  0800               	movf	0,w
  1872  014E  1683               	bsf	3,5	;RP0=1, select bank1
  1873  014F  1303               	bcf	3,6	;RP1=0, select bank1
  1874  0150  00B3               	movwf	(_copy_old_date^(0+128)+2)
  1875  0151  1283               	bcf	3,5	;RP0=0, select bank2
  1876  0152  1703               	bsf	3,6	;RP1=1, select bank2
  1877  0153  0AAE               	incf	main@i^(0+256),f
  1878                           
  1879                           ;main.c: 217: copy_old_date.date = copy_rx_udata[i++];
  1880  0154  082E               	movf	main@i^(0+256),w
  1881  0155  3ECF               	addlw	_copy_rx_udata& (0+255)
  1882  0156  0084               	movwf	4
  1883  0157  0800               	movf	0,w
  1884  0158  1683               	bsf	3,5	;RP0=1, select bank1
  1885  0159  1303               	bcf	3,6	;RP1=0, select bank1
  1886  015A  00B2               	movwf	(_copy_old_date^(0+128)+1)
  1887  015B  1283               	bcf	3,5	;RP0=0, select bank2
  1888  015C  1703               	bsf	3,6	;RP1=1, select bank2
  1889  015D  0AAE               	incf	main@i^(0+256),f
  1890                           
  1891                           ;main.c: 218: copy_old_time.hour = copy_rx_udata[i++];
  1892  015E  082E               	movf	main@i^(0+256),w
  1893  015F  3ECF               	addlw	_copy_rx_udata& (0+255)
  1894  0160  0084               	movwf	4
  1895  0161  0800               	movf	0,w
  1896  0162  1683               	bsf	3,5	;RP0=1, select bank1
  1897  0163  1303               	bcf	3,6	;RP1=0, select bank1
  1898  0164  00B5               	movwf	_copy_old_time^(0+128)
  1899  0165  1283               	bcf	3,5	;RP0=0, select bank2
  1900  0166  1703               	bsf	3,6	;RP1=1, select bank2
  1901  0167  0AAE               	incf	main@i^(0+256),f
  1902                           
  1903                           ;main.c: 219: copy_old_time.min = copy_rx_udata[i++];
  1904  0168  082E               	movf	main@i^(0+256),w
  1905  0169  3ECF               	addlw	_copy_rx_udata& (0+255)
  1906  016A  0084               	movwf	4
  1907  016B  0800               	movf	0,w
  1908  016C  1683               	bsf	3,5	;RP0=1, select bank1
  1909  016D  1303               	bcf	3,6	;RP1=0, select bank1
  1910  016E  00B6               	movwf	(_copy_old_time^(0+128)+1)
  1911  016F  1283               	bcf	3,5	;RP0=0, select bank2
  1912  0170  1703               	bsf	3,6	;RP1=1, select bank2
  1913  0171  0AAE               	incf	main@i^(0+256),f
  1914                           
  1915                           ;main.c: 220: copy_old_time.sec = copy_rx_udata[i];
  1916  0172  082E               	movf	main@i^(0+256),w
  1917  0173  3ECF               	addlw	_copy_rx_udata& (0+255)
  1918  0174  0084               	movwf	4
  1919  0175  0800               	movf	0,w
  1920  0176  1683               	bsf	3,5	;RP0=1, select bank1
  1921  0177  1303               	bcf	3,6	;RP1=0, select bank1
  1922  0178  00B7               	movwf	(_copy_old_time^(0+128)+2)
  1923                           
  1924                           ;main.c: 223: if(copy_old_time.sec == 0)
  1925  0179  08B7               	movf	(_copy_old_time^(0+128)+2),f
  1926  017A  1D03               	skipz
  1927  017B  299D               	goto	l13994
  1928                           
  1929                           ;main.c: 224: {
  1930                           ;main.c: 225: old_date.year =copy_old_date.year;
  1931  017C  0834               	movf	(_copy_old_date^(0+128)+3),w
  1932  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1933  017E  00E3               	movwf	_old_date+3
  1934                           
  1935                           ;main.c: 226: old_date.month =copy_old_date.month;
  1936  017F  1683               	bsf	3,5	;RP0=1, select bank1
  1937  0180  0833               	movf	(_copy_old_date^(0+128)+2),w
  1938  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0182  00E2               	movwf	_old_date+2
  1940                           
  1941                           ;main.c: 227: old_date.date =copy_old_date.date;
  1942  0183  1683               	bsf	3,5	;RP0=1, select bank1
  1943  0184  0832               	movf	(_copy_old_date^(0+128)+1),w
  1944  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0186  00E1               	movwf	_old_date+1
  1946                           
  1947                           ;main.c: 228: old_time.hour = copy_old_time.hour;
  1948  0187  1683               	bsf	3,5	;RP0=1, select bank1
  1949  0188  0835               	movf	_copy_old_time^(0+128),w
  1950  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1951  018A  00DD               	movwf	_old_time
  1952                           
  1953                           ;main.c: 229: old_time.min = copy_old_time.min;
  1954  018B  1683               	bsf	3,5	;RP0=1, select bank1
  1955  018C  0836               	movf	(_copy_old_time^(0+128)+1),w
  1956  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1957  018E  00DE               	movwf	_old_time+1
  1958                           
  1959                           ;main.c: 230: old_time.sec = copy_old_time.sec;
  1960  018F  1683               	bsf	3,5	;RP0=1, select bank1
  1961  0190  0837               	movf	(_copy_old_time^(0+128)+2),w
  1962  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0192  00DF               	movwf	_old_time+2
  1964                           
  1965                           ;main.c: 232: TMR1L = 0;
  1966  0193  018E               	clrf	14	;volatile
  1967                           
  1968                           ;main.c: 233: TMR1H = 0;
  1969  0194  018F               	clrf	15	;volatile
  1970                           
  1971                           ;main.c: 234: timer1_cnt = 0;
  1972  0195  01CE               	clrf	_timer1_cnt
  1973                           
  1974                           ;main.c: 236: flag_jiaoshi = TRUE;
  1975  0196  01CB               	clrf	_flag_jiaoshi
  1976  0197  0ACB               	incf	_flag_jiaoshi,f
  1977                           
  1978                           ;main.c: 237: up_led_display=1;
  1979  0198  01D0               	clrf	_up_led_display
  1980  0199  0AD0               	incf	_up_led_display,f
  1981                           
  1982                           ;main.c: 239: flag_save_data=1;
  1983  019A  1703               	bsf	3,6	;RP1=1, select bank2
  1984  019B  01A3               	clrf	main@flag_save_data^(0+256)
  1985  019C  0AA3               	incf	main@flag_save_data^(0+256),f
  1986  019D                     l13994:	
  1987                           
  1988                           ;main.c: 242: }
  1989                           ;main.c: 244: jiaoshi_cnt=0;
  1990  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1991  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1992  019F  01CC               	clrf	_jiaoshi_cnt
  1993  01A0  2A26               	goto	l14056
  1994  01A1                     l13996:	
  1995                           
  1996                           ;main.c: 256: {
  1997                           ;main.c: 257: if(disp_rxd_length < 8)
  1998  01A1  3008               	movlw	8
  1999  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  2000  01A3  0248               	subwf	_disp_rxd_length,w
  2001  01A4  1C03               	btfss	3,0
  2002  01A5  2A26               	goto	l14056
  2003                           
  2004                           ;main.c: 260: }
  2005                           ;main.c: 261: if(copy_rx_udata[0x04]==my_id_code)
  2006  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  2007  01A7  2A0E               	goto	L4
  2008  01A8                     l14002:	
  2009                           
  2010                           ;main.c: 262: {
  2011                           ;main.c: 263: flag_send_data=1;
  2012  01A8  1703               	bsf	3,6	;RP1=1, select bank2
  2013  01A9  01A8               	clrf	main@flag_send_data^(0+256)
  2014  01AA  0AA8               	incf	main@flag_send_data^(0+256),f
  2015  01AB  2A26               	goto	l14056
  2016  01AC                     l14004:	
  2017                           
  2018                           ;main.c: 273: {
  2019                           ;main.c: 274: if(disp_rxd_length < 8)
  2020  01AC  3008               	movlw	8
  2021  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  2022  01AE  0248               	subwf	_disp_rxd_length,w
  2023  01AF  1C03               	btfss	3,0
  2024  01B0  2A26               	goto	l14056
  2025                           
  2026                           ;main.c: 277: }
  2027                           ;main.c: 278: if(copy_rx_udata[0x04]==my_id_code)
  2028  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  2029  01B2  0853               	movf	(_copy_rx_udata^(0+128)+4),w
  2030  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  2031  01B4  064D               	xorwf	_my_id_code,w
  2032  01B5  1D03               	skipz
  2033  01B6  29BA               	goto	l4316
  2034                           
  2035                           ;main.c: 279: {
  2036                           ;main.c: 280: flag_send_data=1;
  2037  01B7  1703               	bsf	3,6	;RP1=1, select bank2
  2038  01B8  01A8               	clrf	main@flag_send_data^(0+256)
  2039  01B9  0AA8               	incf	main@flag_send_data^(0+256),f
  2040  01BA                     l4316:	
  2041                           
  2042                           ;main.c: 281: }
  2043                           ;main.c: 282: TMR1ON = 0;GIE = 0;PEIE = 0;
  2044  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  2045  01BB  1010               	bcf	16,0
  2046  01BC  138B               	bcf	11,7
  2047  01BD  130B               	bcf	11,6
  2048                           
  2049                           ;main.c: 283: break;
  2050  01BE  2A26               	goto	l14056
  2051  01BF                     l14012:	
  2052                           
  2053                           ;main.c: 591: {
  2054                           ;main.c: 592: if(disp_rxd_length<10)
  2055  01BF  300A               	movlw	10
  2056  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  2057  01C1  0248               	subwf	_disp_rxd_length,w
  2058  01C2  1C03               	btfss	3,0
  2059  01C3  2B9A               	goto	l4319
  2060                           
  2061                           ;main.c: 595: }
  2062                           ;main.c: 596: i=0x05;
  2063  01C4  3005               	movlw	5
  2064  01C5  1703               	bsf	3,6	;RP1=1, select bank2
  2065  01C6  00AE               	movwf	main@i^(0+256)
  2066                           
  2067                           ;main.c: 597: if(copy_rx_udata[i]==1)
  2068  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  2069  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  2070  01C9  0B54               	decfsz	(_copy_rx_udata^(0+128)+5),w
  2071  01CA  29DF               	goto	l14028
  2072                           
  2073                           ;main.c: 598: {
  2074                           ;main.c: 599: i++;
  2075  01CB  1283               	bcf	3,5	;RP0=0, select bank2
  2076  01CC  1703               	bsf	3,6	;RP1=1, select bank2
  2077  01CD  0AAE               	incf	main@i^(0+256),f
  2078                           
  2079                           ;main.c: 600: if(copy_rx_udata[i]<=8)
  2080  01CE  082E               	movf	main@i^(0+256),w
  2081  01CF  3ECF               	addlw	_copy_rx_udata& (0+255)
  2082  01D0  0084               	movwf	4
  2083  01D1  3009               	movlw	9
  2084  01D2  0200               	subwf	0,w
  2085  01D3  1803               	skipnc
  2086  01D4  29DD               	goto	l14026
  2087                           
  2088                           ;main.c: 601: {
  2089                           ;main.c: 602: ntp_info.test_mode1 = copy_rx_udata[i];
  2090  01D5  082E               	movf	main@i^(0+256),w
  2091  01D6  3ECF               	addlw	_copy_rx_udata& (0+255)
  2092  01D7  0084               	movwf	4
  2093  01D8  0800               	movf	0,w
  2094  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  2095  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  2096  01DB  00B8               	movwf	_ntp_info^(0+128)
  2097                           
  2098                           ;main.c: 603: }
  2099  01DC  2A0C               	goto	l14048
  2100  01DD                     l14026:	
  2101                           
  2102                           ;main.c: 604: else
  2103                           ;main.c: 605: {
  2104                           ;main.c: 606: flag_temp++;
  2105  01DD  0AA4               	incf	main@flag_temp^(0+256),f
  2106  01DE  2A0C               	goto	l14048
  2107  01DF                     l14028:	
  2108                           
  2109                           ;main.c: 609: else if(copy_rx_udata[i]==2)
  2110  01DF  0854               	movf	(_copy_rx_udata^(0+128)+5),w
  2111  01E0  3A02               	xorlw	2
  2112  01E1  1D03               	skipz
  2113  01E2  29EE               	goto	l14038
  2114                           
  2115                           ;main.c: 610: {
  2116                           ;main.c: 611: i++;
  2117  01E3  1283               	bcf	3,5	;RP0=0, select bank2
  2118  01E4  1703               	bsf	3,6	;RP1=1, select bank2
  2119  01E5  0AAE               	incf	main@i^(0+256),f
  2120                           
  2121                           ;main.c: 612: if(copy_rx_udata[i]<=8)
  2122  01E6  082E               	movf	main@i^(0+256),w
  2123  01E7  3ECF               	addlw	_copy_rx_udata& (0+255)
  2124  01E8  0084               	movwf	4
  2125  01E9  3009               	movlw	9
  2126  01EA  0200               	subwf	0,w
  2127  01EB  1803               	skipnc
  2128  01EC  29DD               	goto	l14026
  2129  01ED  2A05               	goto	L2
  2130  01EE                     l14038:	
  2131                           ;main.c: 615: }
  2132                           
  2133                           ;main.c: 613: {
  2134                           ;main.c: 614: ntp_info.test_mode2 = copy_rx_udata[i];
  2135                           
  2136                           
  2137                           ;main.c: 621: else if(copy_rx_udata[i]==0XFF)
  2138  01EE  0854               	movf	(_copy_rx_udata^(0+128)+5),w
  2139  01EF  3AFF               	xorlw	255
  2140  01F0  1D03               	skipz
  2141  01F1  2A0C               	goto	l14048
  2142                           
  2143                           ;main.c: 622: {
  2144                           ;main.c: 623: i++;
  2145  01F2  1283               	bcf	3,5	;RP0=0, select bank2
  2146  01F3  1703               	bsf	3,6	;RP1=1, select bank2
  2147  01F4  0AAE               	incf	main@i^(0+256),f
  2148                           
  2149                           ;main.c: 624: if(copy_rx_udata[i]<=8)
  2150  01F5  082E               	movf	main@i^(0+256),w
  2151  01F6  3ECF               	addlw	_copy_rx_udata& (0+255)
  2152  01F7  0084               	movwf	4
  2153  01F8  3009               	movlw	9
  2154  01F9  0200               	subwf	0,w
  2155  01FA  1803               	skipnc
  2156  01FB  29DD               	goto	l14026
  2157                           
  2158                           ;main.c: 625: {
  2159                           ;main.c: 626: ntp_info.test_mode1 = copy_rx_udata[i];
  2160  01FC  082E               	movf	main@i^(0+256),w
  2161  01FD  3ECF               	addlw	_copy_rx_udata& (0+255)
  2162  01FE  0084               	movwf	4
  2163  01FF  0800               	movf	0,w
  2164  0200  1683               	bsf	3,5	;RP0=1, select bank1
  2165  0201  1303               	bcf	3,6	;RP1=0, select bank1
  2166  0202  00B8               	movwf	_ntp_info^(0+128)
  2167                           
  2168                           ;main.c: 627: ntp_info.test_mode2 = copy_rx_udata[i];
  2169  0203  1283               	bcf	3,5	;RP0=0, select bank2
  2170  0204  1703               	bsf	3,6	;RP1=1, select bank2
  2171  0205                     L2:	
  2172  0205  082E               	movf	main@i^(0+256),w
  2173  0206  3ECF               	addlw	_copy_rx_udata& (0+255)
  2174  0207  0084               	movwf	4
  2175  0208  0800               	movf	0,w
  2176  0209  1683               	bsf	3,5	;RP0=1, select bank1
  2177  020A  1303               	bcf	3,6	;RP1=0, select bank1
  2178  020B  00B9               	movwf	(_ntp_info^(0+128)+1)
  2179  020C                     l14048:	
  2180                           ;main.c: 628: }
  2181                           
  2182                           
  2183                           ;main.c: 632: }
  2184                           ;main.c: 633: }
  2185                           ;main.c: 636: if(copy_rx_udata[0x04]==my_id_code)
  2186  020C  1683               	bsf	3,5	;RP0=1, select bank1
  2187  020D  1303               	bcf	3,6	;RP1=0, select bank1
  2188  020E                     L4:	
  2189  020E  0853               	movf	(_copy_rx_udata^(0+128)+4),w
  2190  020F  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0210  064D               	xorwf	_my_id_code,w
  2192  0211  2A24               	goto	L1
  2193  0212                     l14054:	
  2194                           
  2195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2196                           ; Switch size 1, requested type "space"
  2197                           ; Number of cases is 1, Range of values is 9 to 9
  2198                           ; switch strategies available:
  2199                           ; Name         Bytes Cycles
  2200                           ; simple_byte     4     3 (average)
  2201                           ; direct_byte    21    19 (fixed)
  2202                           ;	Chosen strategy is simple_byte
  2203  0212  082B               	movf	(main@func+1)^(0+256),w
  2204  0213  3A09               	xorlw	9	; case 9
  2205  0214  1D03               	btfss	3,2
  2206  0215  2A26               	goto	l14056
  2207                           
  2208                           ; Switch size 1, requested type "space"
  2209                           ; Number of cases is 5, Range of values is 0 to 35
  2210                           ; switch strategies available:
  2211                           ; Name         Bytes Cycles
  2212                           ; simple_byte    16     9 (average)
  2213                           ; direct_byte    88    16 (fixed)
  2214                           ;	Chosen strategy is simple_byte
  2215  0216  082A               	movf	main@func^(0+256),w
  2216  0217  3A00               	xorlw	0	; case 0
  2217  0218  1903               	skipnz
  2218  0219  28EA               	goto	l13930
  2219  021A  3A01               	xorlw	1	; case 1
  2220  021B  1903               	skipnz
  2221  021C  29A1               	goto	l13996
  2222  021D  3A08               	xorlw	8	; case 9
  2223  021E  1903               	skipnz
  2224  021F  29AC               	goto	l14004
  2225  0220  3A14               	xorlw	20	; case 29
  2226  0221  1903               	skipnz
  2227  0222  29BF               	goto	l14012
  2228  0223  3A3E               	xorlw	62	; case 35
  2229  0224                     L1:	
  2230  0224  1903               	skipnz
  2231  0225  29A8               	goto	l14002
  2232  0226                     l14056:	
  2233                           
  2234                           ;main.c: 797: }
  2235                           ;main.c: 798: flag_data_process=FALSE;
  2236  0226  1303               	bcf	3,6	;RP1=0, select bank0
  2237  0227  01C9               	clrf	_flag_data_process
  2238  0228                     l14058:	
  2239                           
  2240                           ;main.c: 799: }
  2241                           ;main.c: 804: if(flag_send_data)
  2242  0228  1703               	bsf	3,6	;RP1=1, select bank2
  2243  0229  0828               	movf	main@flag_send_data^(0+256),w
  2244  022A  1903               	btfsc	3,2
  2245  022B  2AF5               	goto	l14168
  2246                           
  2247                           ;main.c: 805: {
  2248                           ;main.c: 806: i = 0;
  2249  022C  01AE               	clrf	main@i^(0+256)
  2250                           
  2251                           ;main.c: 807: tx_udata[i++] = 0xD3;
  2252  022D  30D3               	movlw	211
  2253  022E  1683               	bsf	3,5	;RP0=1, select bank1
  2254  022F  1303               	bcf	3,6	;RP1=0, select bank1
  2255  0230  00BB               	movwf	_tx_udata^(0+128)
  2256  0231  1283               	bcf	3,5	;RP0=0, select bank2
  2257  0232  1703               	bsf	3,6	;RP1=1, select bank2
  2258  0233  0AAE               	incf	main@i^(0+256),f
  2259                           
  2260                           ;main.c: 808: len_cnt = i;
  2261  0234  082E               	movf	main@i^(0+256),w
  2262  0235  00A5               	movwf	main@len_cnt^(0+256)
  2263                           
  2264                           ;main.c: 809: i++;
  2265  0236  0AAE               	incf	main@i^(0+256),f
  2266                           
  2267                           ;main.c: 810: copy_func = func+1;
  2268  0237  082B               	movf	(main@func+1)^(0+256),w
  2269  0238  00A7               	movwf	(main@copy_func+1)^(0+256)
  2270  0239  082A               	movf	main@func^(0+256),w
  2271  023A  00A6               	movwf	main@copy_func^(0+256)
  2272  023B  0AA6               	incf	main@copy_func^(0+256),f
  2273  023C  1903               	skipnz
  2274  023D  0AA7               	incf	(main@copy_func+1)^(0+256),f
  2275                           
  2276                           ;main.c: 811: tx_udata[i++] = copy_func>>8;
  2277  023E  082E               	movf	main@i^(0+256),w
  2278  023F  3EBB               	addlw	_tx_udata& (0+255)
  2279  0240  0084               	movwf	4
  2280  0241  0827               	movf	(main@copy_func+1)^(0+256),w
  2281  0242  1383               	bcf	3,7	;select IRP bank1
  2282  0243  0080               	movwf	0
  2283  0244  0AAE               	incf	main@i^(0+256),f
  2284                           
  2285                           ;main.c: 812: tx_udata[i++] = copy_func&0x00ff;
  2286  0245  082E               	movf	main@i^(0+256),w
  2287  0246  3EBB               	addlw	_tx_udata& (0+255)
  2288  0247  0084               	movwf	4
  2289  0248  0826               	movf	main@copy_func^(0+256),w
  2290  0249  0080               	movwf	0
  2291  024A  0AAE               	incf	main@i^(0+256),f
  2292                           
  2293                           ;main.c: 813: tx_udata[i++] = my_id_code;
  2294  024B  082E               	movf	main@i^(0+256),w
  2295  024C  3EBB               	addlw	_tx_udata& (0+255)
  2296  024D  0084               	movwf	4
  2297  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2298  024F  084D               	movf	_my_id_code,w
  2299  0250  0080               	movwf	0
  2300  0251  1703               	bsf	3,6	;RP1=1, select bank2
  2301  0252  0AAE               	incf	main@i^(0+256),f
  2302                           
  2303                           ;main.c: 814: switch(func)
  2304  0253  2A93               	goto	l14130
  2305  0254                     l14086:	
  2306                           
  2307                           ;main.c: 817: {
  2308                           ;main.c: 818: if(flag_jiaoshi)
  2309  0254  1303               	bcf	3,6	;RP1=0, select bank0
  2310  0255  084B               	movf	_flag_jiaoshi,w
  2311                           
  2312                           ;main.c: 819: {
  2313                           ;main.c: 820: tx_udata[i++] = 0;
  2314  0256  1703               	bsf	3,6	;RP1=1, select bank2
  2315  0257  1903               	btfsc	3,2
  2316  0258  2A5E               	goto	L5
  2317  0259  082E               	movf	main@i^(0+256),w
  2318  025A  3EBB               	addlw	_tx_udata& (0+255)
  2319  025B  0084               	movwf	4
  2320  025C  0180               	clrf	0
  2321                           
  2322                           ;main.c: 821: }
  2323  025D  2A63               	goto	l14090
  2324  025E                     L5:	
  2325                           ;main.c: 822: else
  2326                           ;main.c: 823: {
  2327                           ;main.c: 824: tx_udata[i++] = 0x08;
  2328                           
  2329  025E  082E               	movf	main@i^(0+256),w
  2330  025F  3EBB               	addlw	_tx_udata& (0+255)
  2331  0260  0084               	movwf	4
  2332  0261  3008               	movlw	8
  2333  0262  0080               	movwf	0
  2334  0263                     l14090:	
  2335  0263  0AAE               	incf	main@i^(0+256),f
  2336                           
  2337                           ;main.c: 825: }
  2338                           ;main.c: 827: tx_udata[i]=0x00 | 0x20;
  2339  0264  082E               	movf	main@i^(0+256),w
  2340  0265  3EBB               	addlw	_tx_udata& (0+255)
  2341  0266  0084               	movwf	4
  2342  0267  3020               	movlw	32
  2343  0268  0080               	movwf	0
  2344                           
  2345                           ;main.c: 836: {
  2346                           ;main.c: 837: tx_udata[i++] |= 0x10;
  2347  0269  082E               	movf	main@i^(0+256),w
  2348  026A  3EBB               	addlw	_tx_udata& (0+255)
  2349  026B  0084               	movwf	4
  2350  026C  1600               	bsf	0,4
  2351  026D  2A78               	goto	L3
  2352  026E                     l14102:	
  2353                           ;main.c: 838: }
  2354                           ;main.c: 847: break;
  2355                           
  2356                           
  2357                           ;main.c: 850: {
  2358                           ;main.c: 852: tx_udata[i++] = 0x0009>>8;
  2359  026E  082E               	movf	main@i^(0+256),w
  2360  026F  3EBB               	addlw	_tx_udata& (0+255)
  2361  0270  0084               	movwf	4
  2362  0271  0180               	clrf	0
  2363  0272  0AAE               	incf	main@i^(0+256),f
  2364                           
  2365                           ;main.c: 853: tx_udata[i++] = 0x0009&0x00ff;
  2366  0273  082E               	movf	main@i^(0+256),w
  2367  0274  3EBB               	addlw	_tx_udata& (0+255)
  2368  0275  0084               	movwf	4
  2369  0276  3009               	movlw	9
  2370  0277  0080               	movwf	0
  2371  0278                     L3:	
  2372  0278  0AAE               	incf	main@i^(0+256),f
  2373                           
  2374                           ;main.c: 854: break;
  2375  0279  2AA7               	goto	l14132
  2376  027A                     l14108:	
  2377                           
  2378                           ;main.c: 857: {
  2379                           ;main.c: 858: tx_udata[i++] = 1;
  2380  027A  082E               	movf	main@i^(0+256),w
  2381  027B  3EBB               	addlw	_tx_udata& (0+255)
  2382  027C  0084               	movwf	4
  2383  027D  0180               	clrf	0
  2384  027E  0A80               	incf	0,f
  2385  027F  0AAE               	incf	main@i^(0+256),f
  2386                           
  2387                           ;main.c: 859: TMR1ON = 0;GIE = 0;PEIE = 0;
  2388  0280  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0281  1010               	bcf	16,0
  2390  0282  138B               	bcf	11,7
  2391  0283  130B               	bcf	11,6
  2392                           
  2393                           ;main.c: 860: break;
  2394  0284  2AA7               	goto	l14132
  2395  0285                     l14118:	
  2396                           
  2397                           ;main.c: 870: case 0x091D:
  2398                           ;main.c: 875: {
  2399                           ;main.c: 876: if(flag_temp)
  2400  0285  0824               	movf	main@flag_temp^(0+256),w
  2401  0286  1903               	btfsc	3,2
  2402  0287  2A8D               	goto	l14124
  2403                           
  2404                           ;main.c: 877: {
  2405                           ;main.c: 878: tx_udata[i++]=0;
  2406  0288  082E               	movf	main@i^(0+256),w
  2407  0289  3EBB               	addlw	_tx_udata& (0+255)
  2408  028A  0084               	movwf	4
  2409  028B  0180               	clrf	0
  2410  028C  2A78               	goto	L3
  2411  028D                     l14124:	
  2412                           
  2413                           ;main.c: 880: else
  2414                           ;main.c: 881: {
  2415                           ;main.c: 882: tx_udata[i++]=1;
  2416  028D  082E               	movf	main@i^(0+256),w
  2417  028E  3EBB               	addlw	_tx_udata& (0+255)
  2418  028F  0084               	movwf	4
  2419  0290  0180               	clrf	0
  2420  0291  0A80               	incf	0,f
  2421  0292  2A78               	goto	L3
  2422  0293                     l14130:	
  2423                           
  2424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2425                           ; Switch size 1, requested type "space"
  2426                           ; Number of cases is 1, Range of values is 9 to 9
  2427                           ; switch strategies available:
  2428                           ; Name         Bytes Cycles
  2429                           ; simple_byte     4     3 (average)
  2430                           ; direct_byte    21    19 (fixed)
  2431                           ;	Chosen strategy is simple_byte
  2432  0293  082B               	movf	(main@func+1)^(0+256),w
  2433  0294  3A09               	xorlw	9	; case 9
  2434  0295  1D03               	btfss	3,2
  2435  0296  2AA7               	goto	l14132
  2436                           
  2437                           ; Switch size 1, requested type "space"
  2438                           ; Number of cases is 5, Range of values is 1 to 35
  2439                           ; switch strategies available:
  2440                           ; Name         Bytes Cycles
  2441                           ; simple_byte    16     9 (average)
  2442                           ; direct_byte    89    19 (fixed)
  2443                           ;	Chosen strategy is simple_byte
  2444  0297  082A               	movf	main@func^(0+256),w
  2445  0298  3A01               	xorlw	1	; case 1
  2446  0299  1903               	skipnz
  2447  029A  2A54               	goto	l14086
  2448  029B  3A08               	xorlw	8	; case 9
  2449  029C  1903               	skipnz
  2450  029D  2A7A               	goto	l14108
  2451  029E  3A10               	xorlw	16	; case 25
  2452  029F  1903               	skipnz
  2453  02A0  2A85               	goto	l14118
  2454  02A1  3A04               	xorlw	4	; case 29
  2455  02A2  1903               	skipnz
  2456  02A3  2A85               	goto	l14118
  2457  02A4  3A3E               	xorlw	62	; case 35
  2458  02A5  1903               	skipnz
  2459  02A6  2A6E               	goto	l14102
  2460  02A7                     l14132:	
  2461                           
  2462                           ;main.c: 889: tx_udata[len_cnt] = i-len_cnt -1;
  2463  02A7  1703               	bsf	3,6	;RP1=1, select bank2
  2464  02A8  0825               	movf	main@len_cnt^(0+256),w
  2465  02A9  3EBB               	addlw	_tx_udata& (0+255)
  2466  02AA  0084               	movwf	4
  2467  02AB  0825               	movf	main@len_cnt^(0+256),w
  2468  02AC  022E               	subwf	main@i^(0+256),w
  2469  02AD  3EFF               	addlw	255
  2470  02AE  0080               	movwf	0
  2471                           
  2472                           ;main.c: 890: chk_value = MakeCRC16(&tx_udata[0],i);
  2473  02AF  082E               	movf	main@i^(0+256),w
  2474  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2475  02B1  00A3               	movwf	?_MakeCRC16
  2476  02B2  30BB               	movlw	_tx_udata& (0+255)
  2477  02B3  118A  2791  118A   	fcall	_MakeCRC16
  2478  02B6  0824               	movf	?_MakeCRC16+1,w
  2479  02B7  1703               	bsf	3,6	;RP1=1, select bank2
  2480  02B8  00AD               	movwf	(main@chk_value+1)^(0+256)
  2481  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2482  02BA  0823               	movf	?_MakeCRC16,w
  2483  02BB  1703               	bsf	3,6	;RP1=1, select bank2
  2484  02BC  00AC               	movwf	main@chk_value^(0+256)
  2485                           
  2486                           ;main.c: 891: tx_udata[i++] = chk_value / 256;
  2487  02BD  082E               	movf	main@i^(0+256),w
  2488  02BE  3EBB               	addlw	_tx_udata& (0+255)
  2489  02BF  0084               	movwf	4
  2490  02C0  082D               	movf	(main@chk_value+1)^(0+256),w
  2491  02C1  0080               	movwf	0
  2492  02C2  0AAE               	incf	main@i^(0+256),f
  2493                           
  2494                           ;main.c: 892: tx_udata[i++] = chk_value % 256;
  2495  02C3  082E               	movf	main@i^(0+256),w
  2496  02C4  3EBB               	addlw	_tx_udata& (0+255)
  2497  02C5  0084               	movwf	4
  2498  02C6  082C               	movf	main@chk_value^(0+256),w
  2499  02C7  0080               	movwf	0
  2500  02C8  0AAE               	incf	main@i^(0+256),f
  2501                           
  2502                           ;main.c: 893: tx_udata[i++] = 0xD8;
  2503  02C9  082E               	movf	main@i^(0+256),w
  2504  02CA  3EBB               	addlw	_tx_udata& (0+255)
  2505  02CB  0084               	movwf	4
  2506  02CC  30D8               	movlw	216
  2507  02CD  0080               	movwf	0
  2508  02CE  0AAE               	incf	main@i^(0+256),f
  2509                           
  2510                           ;main.c: 894: RB0 = 1;
  2511  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  2512  02D0  1406               	bsf	6,0
  2513  02D1  0000               	nop	;#
  2514  02D2  0000               	nop	;#
  2515                           
  2516                           ;main.c: 896: for(j = 0;j<i;j++)
  2517  02D3  1283               	bcf	3,5	;RP0=0, select bank2
  2518  02D4  1703               	bsf	3,6	;RP1=1, select bank2
  2519  02D5  01A9               	clrf	main@j^(0+256)
  2520  02D6                     l14160:	
  2521  02D6  082E               	movf	main@i^(0+256),w
  2522  02D7  0229               	subwf	main@j^(0+256),w
  2523  02D8  1803               	btfsc	3,0
  2524  02D9  2AE5               	goto	l4346
  2525                           
  2526                           ;main.c: 897: {
  2527                           ;main.c: 898: putch(tx_udata[j]);
  2528  02DA  0829               	movf	main@j^(0+256),w
  2529  02DB  3EBB               	addlw	_tx_udata& (0+255)
  2530  02DC  0084               	movwf	4
  2531  02DD  1383               	bcf	3,7	;select IRP bank1
  2532  02DE  0800               	movf	0,w
  2533  02DF  158A  251F  118A   	fcall	_putch
  2534  02E2  1703               	bsf	3,6	;RP1=1, select bank2
  2535  02E3  0AA9               	incf	main@j^(0+256),f
  2536  02E4  2AD6               	goto	l14160
  2537  02E5                     l4346:	
  2538  02E5  0000               	nop	;#
  2539  02E6  0000               	nop	;#
  2540  02E7                     l4347:	
  2541                           ;main.c: 901: while(!TRMT);RB0 = 0;
  2542                           
  2543  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  2544  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  2545  02E9  1C98               	btfss	24,1
  2546  02EA  2AE7               	goto	l4347
  2547  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2548  02EC  1006               	bcf	6,0
  2549  02ED  2AF5               	goto	l14168
  2550  02EE                     l14162:	
  2551                           
  2552                           ;main.c: 907: {
  2553                           ;main.c: 908: settime();
  2554  02EE  118A  25D2  118A   	fcall	_settime
  2555                           
  2556                           ;main.c: 909: calc_zone();
  2557  02F1  158A  2797  118A   	fcall	_calc_zone
  2558                           
  2559                           ;main.c: 911: break;
  2560  02F4  2AFA               	goto	l14170
  2561  02F5                     l14168:	
  2562  02F5  1703               	bsf	3,6	;RP1=1, select bank2
  2563  02F6  0823               	movf	main@flag_save_data^(0+256),w
  2564                           
  2565                           ; Switch size 1, requested type "space"
  2566                           ; Number of cases is 1, Range of values is 1 to 1
  2567                           ; switch strategies available:
  2568                           ; Name         Bytes Cycles
  2569                           ; simple_byte     4     3 (average)
  2570                           ; direct_byte    21    19 (fixed)
  2571                           ;	Chosen strategy is simple_byte
  2572  02F7  3A01               	xorlw	1	; case 1
  2573  02F8  1903               	skipnz
  2574  02F9  2AEE               	goto	l14162
  2575  02FA                     l14170:	
  2576                           
  2577                           ;main.c: 1017: if(up_time_flag)
  2578  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2579  02FB  0851               	movf	_up_time_flag,w
  2580  02FC  1903               	btfsc	3,2
  2581  02FD  2B51               	goto	l14212
  2582                           
  2583                           ;main.c: 1018: {
  2584                           ;main.c: 1019: if(old_time.sec!=0)
  2585  02FE  085F               	movf	_old_time+2,w
  2586  02FF  1903               	btfsc	3,2
  2587  0300  2B0A               	goto	l14176
  2588                           
  2589                           ;main.c: 1021: old_date.day= WeekDay20(old_date.year,old_date.month,old_date.date);
  2590  0301  0862               	movf	_old_date+2,w
  2591  0302  00A4               	movwf	?_WeekDay20
  2592  0303  0861               	movf	_old_date+1,w
  2593  0304  00A5               	movwf	?_WeekDay20+1
  2594  0305  0863               	movf	_old_date+3,w
  2595  0306  158A  2752  118A   	fcall	_WeekDay20
  2596  0309  00E0               	movwf	_old_date
  2597  030A                     l14176:	
  2598                           
  2599                           ;main.c: 1023: up_time_flag--;
  2600  030A  03D1               	decf	_up_time_flag,f
  2601                           
  2602                           ;main.c: 1024: up_led_display=1;
  2603  030B  01D0               	clrf	_up_led_display
  2604  030C  0AD0               	incf	_up_led_display,f
  2605                           
  2606                           ;main.c: 1025: if(jiaoshi_cnt >= 120)
  2607  030D  3078               	movlw	120
  2608  030E  024C               	subwf	_jiaoshi_cnt,w
  2609  030F  1C03               	skipc
  2610  0310  2B13               	goto	l14184
  2611                           
  2612                           ;main.c: 1026: {
  2613                           ;main.c: 1027: flag_jiaoshi = FALSE;
  2614  0311  01CB               	clrf	_flag_jiaoshi
  2615                           
  2616                           ;main.c: 1028: }
  2617  0312  2B14               	goto	l14186
  2618  0313                     l14184:	
  2619                           
  2620                           ;main.c: 1029: else
  2621                           ;main.c: 1030: {
  2622                           ;main.c: 1031: jiaoshi_cnt++;
  2623  0313  0ACC               	incf	_jiaoshi_cnt,f
  2624  0314                     l14186:	
  2625                           
  2626                           ;main.c: 1032: }
  2627                           ;main.c: 1037: if(up_date_flag==2)
  2628  0314  084F               	movf	_up_date_flag,w
  2629  0315  3A02               	xorlw	2
  2630  0316  1D03               	skipz
  2631  0317  2B1D               	goto	l14190
  2632                           
  2633                           ;main.c: 1038: {
  2634                           ;main.c: 1040: date_dec(&old_date);
  2635  0318  3060               	movlw	_old_date& (0+255)
  2636  0319  118A  266A  118A   	fcall	_date_dec
  2637                           
  2638                           ;main.c: 1041: }
  2639  031C  2B23               	goto	l4358
  2640  031D                     l14190:	
  2641                           
  2642                           ;main.c: 1042: else if(up_date_flag==1)
  2643  031D  0B4F               	decfsz	_up_date_flag,w
  2644  031E  2B23               	goto	l4358
  2645                           
  2646                           ;main.c: 1043: {
  2647                           ;main.c: 1044: date_add(&old_date);
  2648  031F  3060               	movlw	_old_date& (0+255)
  2649  0320  118A  269E  118A   	fcall	_date_add
  2650  0323                     l4358:	
  2651                           
  2652                           ;main.c: 1045: }
  2653                           ;main.c: 1046: up_date_flag=time_add(&old_time);
  2654  0323  305D               	movlw	_old_time& (0+255)
  2655  0324  158A  254C  118A   	fcall	_time_add
  2656  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2657  0328  00CF               	movwf	_up_date_flag
  2658                           
  2659                           ;main.c: 1054: if((old_time.hour == 3) && (old_time.min == 26) && (old_time.sec == 13))
  2660  0329  085D               	movf	_old_time,w
  2661  032A  3A03               	xorlw	3
  2662  032B  1D03               	skipz
  2663  032C  2B45               	goto	l14204
  2664  032D  085E               	movf	_old_time+1,w
  2665  032E  3A1A               	xorlw	26
  2666  032F  1D03               	skipz
  2667  0330  2B45               	goto	l14204
  2668  0331  085F               	movf	_old_time+2,w
  2669  0332  3A0D               	xorlw	13
  2670  0333  1D03               	skipz
  2671  0334  2B45               	goto	l14204
  2672                           
  2673                           ;main.c: 1055: {
  2674                           ;main.c: 1056: TMR1ON = 0;GIE = 0;PEIE = 0;
  2675  0335  1010               	bcf	16,0
  2676  0336  138B               	bcf	11,7
  2677  0337  130B               	bcf	11,6
  2678                           
  2679                           ;main.c: 1060: _delay((unsigned long)((100)*(8000000/4000.0)));
  2680  0338  3002               	movlw	2
  2681  0339  00C7               	movwf	??_main+2
  2682  033A  3003               	movlw	3
  2683  033B  00C6               	movwf	??_main+1
  2684  033C  30BA               	movlw	186
  2685  033D  00C5               	movwf	??_main
  2686  033E                     u4607:	
  2687  033E  0BC5               	decfsz	??_main,f
  2688  033F  2B3E               	goto	u4607
  2689  0340  0BC6               	decfsz	??_main+1,f
  2690  0341  2B3E               	goto	u4607
  2691  0342  0BC7               	decfsz	??_main+2,f
  2692  0343  2B3E               	goto	u4607
  2693  0344                     l4362:	
  2694  0344  2B44               	goto	l4362
  2695  0345                     l14204:	
  2696                           
  2697                           ;main.c: 1062: }
  2698                           ;main.c: 1063: if((old_time.sec == 10) && (old_time.min == 10))
  2699  0345  085F               	movf	_old_time+2,w
  2700  0346  3A0A               	xorlw	10
  2701  0347  1D03               	skipz
  2702  0348  2B50               	goto	l14210
  2703  0349  085E               	movf	_old_time+1,w
  2704  034A  3A0A               	xorlw	10
  2705  034B  1D03               	skipz
  2706  034C  2B50               	goto	l14210
  2707                           
  2708                           ;main.c: 1064: {
  2709                           ;main.c: 1065: get_time();
  2710  034D  158A  2615  118A   	fcall	_get_time
  2711  0350                     l14210:	
  2712  0350  0064               	clrwdt	;#
  2713  0351                     l14212:	
  2714                           
  2715                           ;main.c: 1096: }
  2716                           ;main.c: 1098: if(up_led_display==1)
  2717  0351  1283               	bcf	3,5	;RP0=0, select bank0
  2718  0352  1303               	bcf	3,6	;RP1=0, select bank0
  2719  0353  0B50               	decfsz	_up_led_display,w
  2720  0354  2843               	goto	l13890
  2721                           
  2722                           ;main.c: 1099: {
  2723                           ;main.c: 1100: up_led_display=0;
  2724  0355  01D0               	clrf	_up_led_display
  2725                           
  2726                           ;main.c: 1102: {
  2727                           ;main.c: 1103: if(flag_jiaoshi == FALSE)
  2728  0356  08CB               	movf	_flag_jiaoshi,f
  2729  0357  1903               	btfsc	3,2
  2730                           
  2731                           ;main.c: 1104: {
  2732                           ;main.c: 1105: if((old_time.sec % 2 ) == 0)
  2733  0358  185F               	btfsc	_old_time+2,0
  2734  0359  2B5C               	goto	l4367
  2735                           
  2736                           ;main.c: 1106: {
  2737                           ;main.c: 1107: flag_dian1 = FALSE;
  2738  035A  01CA               	clrf	_flag_dian1
  2739                           
  2740                           ;main.c: 1108: }
  2741  035B  2B5E               	goto	l14222
  2742  035C                     l4367:	
  2743                           
  2744                           ;main.c: 1109: else
  2745                           ;main.c: 1110: {
  2746                           ;main.c: 1111: flag_dian1 = TRUE;
  2747  035C  01CA               	clrf	_flag_dian1
  2748  035D  0ACA               	incf	_flag_dian1,f
  2749  035E                     l14222:	
  2750                           
  2751                           ;main.c: 1117: }
  2752                           ;main.c: 1118: }
  2753                           ;main.c: 1223: disp_data_time[0]=(old_time.min%100)%10;
  2754  035E  3064               	movlw	100
  2755  035F  00F4               	movwf	?___lbmod
  2756  0360  085E               	movf	_old_time+1,w
  2757  0361  118A  2567  118A   	fcall	___lbmod
  2758  0364  00D9               	movwf	_disp_data_time
  2759  0365  300A               	movlw	10
  2760  0366  00F4               	movwf	?___lbmod
  2761  0367  0859               	movf	_disp_data_time,w
  2762  0368  118A  2567  118A   	fcall	___lbmod
  2763  036B  00D9               	movwf	_disp_data_time
  2764                           
  2765                           ;main.c: 1224: disp_data_time[1]=(old_time.min%100)/10;
  2766  036C  300A               	movlw	10
  2767  036D  00F6               	movwf	?___lbdiv
  2768  036E  3064               	movlw	100
  2769  036F  00F4               	movwf	?___lbmod
  2770  0370  085E               	movf	_old_time+1,w
  2771  0371  118A  2567  118A   	fcall	___lbmod
  2772  0374  118A  2507  118A   	fcall	___lbdiv
  2773  0377  00DA               	movwf	_disp_data_time+1
  2774                           
  2775                           ;main.c: 1225: disp_data_time[2]=(old_time.hour%100)%10;
  2776  0378  3064               	movlw	100
  2777  0379  00F4               	movwf	?___lbmod
  2778  037A  085D               	movf	_old_time,w
  2779  037B  118A  2567  118A   	fcall	___lbmod
  2780  037E  1703               	bsf	3,6	;RP1=1, select bank2
  2781  037F  00A2               	movwf	_main$5144^(0+256)
  2782                           
  2783                           ;main.c: 1225: disp_data_time[2]=(old_time.hour%100)%10;
  2784  0380  300A               	movlw	10
  2785  0381  00F4               	movwf	?___lbmod
  2786  0382  0822               	movf	_main$5144^(0+256),w
  2787  0383  118A  2567  118A   	fcall	___lbmod
  2788  0386  00DB               	movwf	_disp_data_time+2
  2789                           
  2790                           ;main.c: 1226: disp_data_time[3]=(old_time.hour%100)/10;
  2791  0387  300A               	movlw	10
  2792  0388  00F6               	movwf	?___lbdiv
  2793  0389  3064               	movlw	100
  2794  038A  00F4               	movwf	?___lbmod
  2795  038B  085D               	movf	_old_time,w
  2796  038C  118A  2567  118A   	fcall	___lbmod
  2797  038F  118A  2507  118A   	fcall	___lbdiv
  2798  0392  00DC               	movwf	_disp_data_time+3
  2799                           
  2800                           ;main.c: 1239: up_time1(disp_data_time);
  2801  0393  118A  239C  118A   	fcall	_up_time1
  2802                           
  2803                           ;main.c: 1242: up_time2(disp_data_time);
  2804  0396  118A  2445  118A   	fcall	_up_time2
  2805  0399  2843               	goto	l13890
  2806  039A                     l4319:	
  2807  039A  118A  280D         	ljmp	start
  2808  039C                     __end_of_main:	
  2809                           
  2810                           	psect	text1346
  2811  039C                     __ptext1346:	
  2812 ;; =============== function _up_time2 ends ============
  2813                           
  2814                           
  2815 ;; *************** function _up_time1 *****************
  2816 ;; Defined at:
  2817 ;;		line 224 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\led.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  udata_time      1    wreg     PTR unsigned char 
  2820 ;;		 -> disp_data_time(4), 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  udata_time      1    0[COMMON] PTR unsigned char 
  2823 ;;		 -> disp_data_time(4), 
  2824 ;;  date            6   16[BANK0 ] unsigned char [6]
  2825 ;;  i               1   22[BANK0 ] unsigned char 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;		None               void
  2828 ;; Registers used:
  2829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 60/100
  2832 ;;		On exit  : 60/0
  2833 ;;		Unchanged: FFE00/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2835 ;;      Params:         0       0       0       0
  2836 ;;      Locals:         0       7       0       0
  2837 ;;      Temps:          0       0       0       0
  2838 ;;      Totals:         0       7       0       0
  2839 ;;Total ram usage:        7 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    5
  2842 ;; This function calls:
  2843 ;;		___lbmod
  2844 ;;		___lbdiv
  2845 ;;		_up_date
  2846 ;;		_settime
  2847 ;;		_seg_disp
  2848 ;; This function is called by:
  2849 ;;		_lcd_init
  2850 ;;		_main
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853  039C                     _up_time1:	
  2854                           
  2855                           ;led.c: 252: copy_display_mode_state=display_mode_state;
  2856                           
  2857                           ; Regs used in _up_time1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2858  039C  3001               	movlw	1
  2859  039D  06D3               	xorwf	up_time1@copy_flag_dian,f
  2860                           
  2861                           ;led.c: 253: switch(ntp_info.test_mode1)
  2862  039E  2BB0               	goto	l13664
  2863  039F                     l3350:	
  2864                           ;led.c: 254: {
  2865                           ;led.c: 255: case DIGITAL_TEST:
  2866                           
  2867                           
  2868                           ;led.c: 256: {
  2869                           ;led.c: 257: display_mode_state=START_TEST00;
  2870  039F  1283               	bcf	3,5	;RP0=0, select bank0
  2871  03A0  01D5               	clrf	up_time1@display_mode_state
  2872  03A1  0AD5               	incf	up_time1@display_mode_state,f
  2873                           
  2874                           ;led.c: 258: break;
  2875  03A2  2BCD               	goto	l13666
  2876  03A3                     l13652:	
  2877                           
  2878                           ;led.c: 262: case DIGITAL_JIAOSHI:
  2879                           ;led.c: 263: case DIGITAL_CHASE_TIME:
  2880                           ;led.c: 264: case DIGITAL_DUISHI:
  2881                           ;led.c: 265: {
  2882                           ;led.c: 266: display_mode_state=display_normal;
  2883  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2884  03A4  01D5               	clrf	up_time1@display_mode_state
  2885                           
  2886                           ;led.c: 267: break;
  2887  03A5  2BCD               	goto	l13666
  2888  03A6                     l13654:	
  2889                           
  2890                           ;led.c: 270: {
  2891                           ;led.c: 271: display_mode_state=display_stop;
  2892  03A6  3002               	movlw	2
  2893  03A7  2BAD               	goto	L11
  2894  03A8                     l13656:	
  2895                           ;led.c: 272: break;
  2896                           
  2897                           
  2898                           ;led.c: 275: {
  2899                           ;led.c: 276: display_mode_state=display_close;
  2900  03A8  3003               	movlw	3
  2901  03A9  2BAD               	goto	L11
  2902  03AA                     l13658:	
  2903                           ;led.c: 277: break;
  2904                           
  2905                           
  2906                           ;led.c: 280: {
  2907                           ;led.c: 281: display_mode_state=display_open;
  2908  03AA  3004               	movlw	4
  2909  03AB  2BAD               	goto	L11
  2910  03AC                     l13660:	
  2911                           ;led.c: 282: break;
  2912                           
  2913                           
  2914                           ;led.c: 285: {
  2915                           ;led.c: 286: display_mode_state=display_reset;
  2916  03AC  3005               	movlw	5
  2917  03AD                     L11:	
  2918  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2919  03AE  00D5               	movwf	up_time1@display_mode_state
  2920                           
  2921                           ;led.c: 287: break;
  2922  03AF  2BCD               	goto	l13666
  2923  03B0                     l13664:	
  2924  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2925  03B1  0838               	movf	_ntp_info^(0+128),w
  2926                           
  2927                           ; Switch size 1, requested type "space"
  2928                           ; Number of cases is 9, Range of values is 0 to 8
  2929                           ; switch strategies available:
  2930                           ; Name         Bytes Cycles
  2931                           ; simple_byte    28    15 (average)
  2932                           ; direct_byte    34    16 (fixed)
  2933                           ;	Chosen strategy is simple_byte
  2934  03B2  3A00               	xorlw	0	; case 0
  2935  03B3  1903               	skipnz
  2936  03B4  2BA3               	goto	l13652
  2937  03B5  3A01               	xorlw	1	; case 1
  2938  03B6  1903               	skipnz
  2939  03B7  2BA3               	goto	l13652
  2940  03B8  3A03               	xorlw	3	; case 2
  2941  03B9  1903               	skipnz
  2942  03BA  2BA6               	goto	l13654
  2943  03BB  3A01               	xorlw	1	; case 3
  2944  03BC  1903               	skipnz
  2945  03BD  2BA3               	goto	l13652
  2946  03BE  3A07               	xorlw	7	; case 4
  2947  03BF  1903               	skipnz
  2948  03C0  2BA3               	goto	l13652
  2949  03C1  3A01               	xorlw	1	; case 5
  2950  03C2  1903               	skipnz
  2951  03C3  2BA8               	goto	l13656
  2952  03C4  3A03               	xorlw	3	; case 6
  2953  03C5  1903               	skipnz
  2954  03C6  2BAA               	goto	l13658
  2955  03C7  3A01               	xorlw	1	; case 7
  2956  03C8  1903               	skipnz
  2957  03C9  2B9F               	goto	l3350
  2958  03CA  3A0F               	xorlw	15	; case 8
  2959  03CB  1903               	skipnz
  2960  03CC  2BAC               	goto	l13660
  2961  03CD                     l13666:	
  2962                           
  2963                           ;led.c: 310: if(old_time.sec<=59 && old_time.min<=59 && old_time.hour<=23)
  2964  03CD  303C               	movlw	60
  2965  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2966  03CF  025F               	subwf	_old_time+2,w
  2967  03D0  1803               	skipnc
  2968  03D1  2C34               	goto	l3360
  2969  03D2  303C               	movlw	60
  2970  03D3  025E               	subwf	_old_time+1,w
  2971  03D4  1803               	skipnc
  2972  03D5  2C34               	goto	l3360
  2973  03D6  3018               	movlw	24
  2974  03D7  025D               	subwf	_old_time,w
  2975  03D8  1C03               	btfss	3,0
  2976  03D9  2C2C               	goto	l13724
  2977  03DA  2C34               	goto	l3360
  2978  03DB                     l13674:	
  2979                           
  2980                           ;led.c: 523: {
  2981                           ;led.c: 524: i=0;
  2982  03DB  01B6               	clrf	up_time1@i
  2983                           
  2984                           ;led.c: 553: date[i++] = old_time.sec%10;
  2985  03DC  300A               	movlw	10
  2986  03DD  00F4               	movwf	?___lbmod
  2987  03DE  085F               	movf	_old_time+2,w
  2988  03DF  2567  118A         	fcall	___lbmod
  2989  03E1  00B0               	movwf	up_time1@date
  2990  03E2  0AB6               	incf	up_time1@i,f
  2991                           
  2992                           ;led.c: 554: date[i++] = old_time.sec/10;
  2993  03E3  0836               	movf	up_time1@i,w
  2994  03E4  3E30               	addlw	up_time1@date& (0+255)
  2995  03E5  0084               	movwf	4
  2996  03E6  300A               	movlw	10
  2997  03E7  00F6               	movwf	?___lbdiv
  2998  03E8  085F               	movf	_old_time+2,w
  2999  03E9  2507  118A         	fcall	___lbdiv
  3000  03EB  1383               	bcf	3,7	;select IRP bank0
  3001                           
  3002                           ;led.c: 557: date[i++] = old_time.min%10;
  3003  03EC  2655  118A         	fcall	PL4	;call to abstracted procedure
  3004  03EE  00F4               	movwf	?___lbmod
  3005  03EF  085E               	movf	_old_time+1,w
  3006  03F0  2567  118A         	fcall	___lbmod
  3007                           
  3008                           ;led.c: 558: date[i++] = old_time.min/10;
  3009  03F2  2655  118A         	fcall	PL4	;call to abstracted procedure
  3010  03F4  00F6               	movwf	?___lbdiv
  3011  03F5  085E               	movf	_old_time+1,w
  3012  03F6  2507  118A         	fcall	___lbdiv
  3013                           
  3014                           ;led.c: 559: date[i++] = old_time.hour %10;
  3015  03F8  2655  118A         	fcall	PL4	;call to abstracted procedure
  3016  03FA  00F4               	movwf	?___lbmod
  3017  03FB  085D               	movf	_old_time,w
  3018  03FC  2567  118A         	fcall	___lbmod
  3019                           
  3020                           ;led.c: 560: date[i++]=old_time.hour/10;
  3021  03FE  2655  118A         	fcall	PL4	;call to abstracted procedure
  3022  0400  00F6               	movwf	?___lbdiv
  3023  0401  085D               	movf	_old_time,w
  3024  0402  2507  118A         	fcall	___lbdiv
  3025  0404  0080               	movwf	0
  3026  0405  0AB6               	incf	up_time1@i,f
  3027                           
  3028                           ;led.c: 570: up_date(date,i,flag_dian1,1);
  3029  0406  0836               	movf	up_time1@i,w
  3030  0407  00A4               	movwf	?_up_date
  3031  0408  084A               	movf	_flag_dian1,w
  3032  0409  2666  118A         	fcall	PL11	;call to abstracted procedure
  3033  040B  2584  118A         	fcall	_up_date
  3034                           
  3035                           ;led.c: 571: break;
  3036  040D  2C38               	goto	l13730
  3037  040E                     l13702:	
  3038                           
  3039                           ;led.c: 596: {
  3040                           ;led.c: 597: for(i=0;i<6;i++)
  3041  040E  01B6               	clrf	up_time1@i
  3042  040F                     l13708:	
  3043                           
  3044                           ;led.c: 598: {
  3045                           ;led.c: 599: date[i]=count;
  3046  040F  0836               	movf	up_time1@i,w
  3047  0410  3E30               	addlw	up_time1@date& (0+255)
  3048  0411  0084               	movwf	4
  3049  0412  0854               	movf	up_time1@count,w
  3050  0413  1383               	bcf	3,7	;select IRP bank0
  3051  0414  0080               	movwf	0
  3052  0415  0AB6               	incf	up_time1@i,f
  3053  0416  3006               	movlw	6
  3054  0417  0236               	subwf	up_time1@i,w
  3055  0418  1C03               	skipc
  3056  0419  2C0F               	goto	l13708
  3057                           
  3058                           ;led.c: 600: }
  3059                           ;led.c: 601: if(count>=9)
  3060  041A  3009               	movlw	9
  3061  041B  0254               	subwf	up_time1@count,w
  3062  041C  1C03               	skipc
  3063  041D  2C21               	goto	l13718
  3064                           
  3065                           ;led.c: 602: {
  3066                           ;led.c: 603: count=0;
  3067  041E  01D4               	clrf	up_time1@count
  3068                           
  3069                           ;led.c: 604: display_mode_state=display_normal;
  3070  041F  01D5               	clrf	up_time1@display_mode_state
  3071                           
  3072                           ;led.c: 605: }
  3073  0420  2C22               	goto	l13720
  3074  0421                     l13718:	
  3075                           
  3076                           ;led.c: 606: else
  3077                           ;led.c: 607: {
  3078                           ;led.c: 608: count++;
  3079  0421  0AD4               	incf	up_time1@count,f
  3080  0422                     l13720:	
  3081                           
  3082                           ;led.c: 609: }
  3083                           ;led.c: 610: up_date(date,i,copy_flag_dian,1);
  3084  0422  0836               	movf	up_time1@i,w
  3085  0423  00A4               	movwf	?_up_date
  3086  0424  0853               	movf	up_time1@copy_flag_dian,w
  3087  0425  2666  118A         	fcall	PL11	;call to abstracted procedure
  3088  0427  2584  118A         	fcall	_up_date
  3089                           
  3090                           ;led.c: 612: break;
  3091  0429  2C38               	goto	l13730
  3092  042A                     l13722:	
  3093  042A  01D5               	clrf	up_time1@display_mode_state
  3094                           
  3095                           ;led.c: 615: }
  3096  042B  2C38               	goto	l13730
  3097  042C                     l13724:	
  3098  042C  0855               	movf	up_time1@display_mode_state,w
  3099                           
  3100                           ; Switch size 1, requested type "space"
  3101                           ; Number of cases is 2, Range of values is 0 to 1
  3102                           ; switch strategies available:
  3103                           ; Name         Bytes Cycles
  3104                           ; simple_byte     7     4 (average)
  3105                           ; direct_byte    20    16 (fixed)
  3106                           ;	Chosen strategy is simple_byte
  3107  042D  3A00               	xorlw	0	; case 0
  3108  042E  1903               	skipnz
  3109  042F  2BDB               	goto	l13674
  3110  0430  3A01               	xorlw	1	; case 1
  3111  0431  1903               	skipnz
  3112  0432  2C0E               	goto	l13702
  3113  0433  2C2A               	goto	l13722
  3114  0434                     l3360:	
  3115                           
  3116                           ;led.c: 673: else
  3117                           ;led.c: 674: {
  3118                           ;led.c: 675: old_date.year = 1;
  3119                           
  3120                           ;led.c: 676: old_date.month = 1;
  3121                           
  3122                           ;led.c: 677: old_date.date = 1;
  3123                           
  3124                           ;led.c: 678: old_date.day = 0;
  3125                           
  3126                           ;led.c: 679: old_time.hour = 0;
  3127                           
  3128                           ;led.c: 680: old_time.min = 0;
  3129                           
  3130                           ;led.c: 681: old_time.sec = 0;
  3131  0434  265B  118A         	fcall	PL5	;call to abstracted procedure
  3132                           
  3133                           ;led.c: 682: settime();
  3134  0436  25D2  118A         	fcall	_settime
  3135  0438                     l13730:	
  3136                           
  3137                           ;led.c: 683: }
  3138                           ;led.c: 687: for(i=0;i<6;i++)
  3139  0438  01B6               	clrf	up_time1@i
  3140  0439                     l13736:	
  3141                           
  3142                           ;led.c: 688: {
  3143                           ;led.c: 689: seg_disp(10,0,1);
  3144  0439  01F5               	clrf	?_seg_disp
  3145  043A  01F6               	clrf	?_seg_disp+1
  3146  043B  0AF6               	incf	?_seg_disp+1,f
  3147  043C  300A               	movlw	10
  3148  043D  259A  118A         	fcall	_seg_disp
  3149  043F  0AB6               	incf	up_time1@i,f
  3150  0440  3006               	movlw	6
  3151  0441  0236               	subwf	up_time1@i,w
  3152  0442  1803               	btfsc	3,0
  3153  0443  0008               	return
  3154  0444  2C39               	goto	l13736
  3155  0445                     __end_of_up_time1:	
  3156  0445                     __ptext1345:	
  3157 ;; =============== function _lcd_init ends ============
  3158                           
  3159                           
  3160 ;; *************** function _up_time2 *****************
  3161 ;; Defined at:
  3162 ;;		line 711 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\led.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  udata_time      1    wreg     PTR unsigned char 
  3165 ;;		 -> disp_data_time(4), 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  udata_time      1    0[COMMON] PTR unsigned char 
  3168 ;;		 -> disp_data_time(4), 
  3169 ;;  date            9   16[BANK0 ] unsigned char [9]
  3170 ;;  i               1   25[BANK0 ] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;		None               void
  3173 ;; Registers used:
  3174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 60/100
  3177 ;;		On exit  : 60/0
  3178 ;;		Unchanged: FFE00/0
  3179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3180 ;;      Params:         0       0       0       0
  3181 ;;      Locals:         0      10       0       0
  3182 ;;      Temps:          0       0       0       0
  3183 ;;      Totals:         0      10       0       0
  3184 ;;Total ram usage:       10 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    5
  3187 ;; This function calls:
  3188 ;;		___lbmod
  3189 ;;		___lbdiv
  3190 ;;		_up_date
  3191 ;;		_settime
  3192 ;;		_seg_disp
  3193 ;; This function is called by:
  3194 ;;		_lcd_init
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198  0445                     _up_time2:	
  3199                           
  3200                           ;led.c: 736: copy_display_mode_state=display_mode_state;
  3201                           
  3202                           ; Regs used in _up_time2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3203  0445  3001               	movlw	1
  3204  0446  06D6               	xorwf	up_time2@copy_flag_dian,f
  3205                           
  3206                           ;led.c: 738: switch(ntp_info.test_mode2)
  3207  0447  2C5A               	goto	l13760
  3208  0448                     l13744:	
  3209                           
  3210                           ;led.c: 741: {
  3211                           ;led.c: 742: count=0;
  3212  0448  1283               	bcf	3,5	;RP0=0, select bank0
  3213  0449  01D7               	clrf	up_time2@count
  3214                           
  3215                           ;led.c: 743: display_mode_state=START_TEST00;
  3216  044A  01D8               	clrf	up_time2@display_mode_state
  3217  044B  0AD8               	incf	up_time2@display_mode_state,f
  3218                           
  3219                           ;led.c: 744: break;
  3220  044C  2C77               	goto	l13762
  3221  044D                     l13748:	
  3222                           
  3223                           ;led.c: 748: case DIGITAL_JIAOSHI:
  3224                           ;led.c: 749: case DIGITAL_CHASE_TIME:
  3225                           ;led.c: 750: case DIGITAL_DUISHI:
  3226                           ;led.c: 751: {
  3227                           ;led.c: 752: display_mode_state=display_normal;
  3228  044D  1283               	bcf	3,5	;RP0=0, select bank0
  3229  044E  01D8               	clrf	up_time2@display_mode_state
  3230                           
  3231                           ;led.c: 753: break;
  3232  044F  2C77               	goto	l13762
  3233  0450                     l13750:	
  3234                           
  3235                           ;led.c: 756: {
  3236                           ;led.c: 757: display_mode_state=display_stop;
  3237  0450  3002               	movlw	2
  3238  0451  2C57               	goto	L8
  3239  0452                     l13752:	
  3240                           ;led.c: 758: break;
  3241                           
  3242                           
  3243                           ;led.c: 761: {
  3244                           ;led.c: 762: display_mode_state=display_close;
  3245  0452  3003               	movlw	3
  3246  0453  2C57               	goto	L8
  3247  0454                     l13754:	
  3248                           ;led.c: 763: break;
  3249                           
  3250                           
  3251                           ;led.c: 766: {
  3252                           ;led.c: 767: display_mode_state=display_open;
  3253  0454  3004               	movlw	4
  3254  0455  2C57               	goto	L8
  3255  0456                     l13756:	
  3256                           ;led.c: 768: break;
  3257                           
  3258                           
  3259                           ;led.c: 771: {
  3260                           ;led.c: 772: display_mode_state=display_reset;
  3261  0456  3005               	movlw	5
  3262  0457                     L8:	
  3263  0457  1283               	bcf	3,5	;RP0=0, select bank0
  3264  0458  00D8               	movwf	up_time2@display_mode_state
  3265                           
  3266                           ;led.c: 773: break;
  3267  0459  2C77               	goto	l13762
  3268  045A                     l13760:	
  3269  045A  1683               	bsf	3,5	;RP0=1, select bank1
  3270  045B  0839               	movf	(_ntp_info^(0+128)+1),w
  3271                           
  3272                           ; Switch size 1, requested type "space"
  3273                           ; Number of cases is 9, Range of values is 0 to 8
  3274                           ; switch strategies available:
  3275                           ; Name         Bytes Cycles
  3276                           ; simple_byte    28    15 (average)
  3277                           ; direct_byte    34    16 (fixed)
  3278                           ;	Chosen strategy is simple_byte
  3279  045C  3A00               	xorlw	0	; case 0
  3280  045D  1903               	skipnz
  3281  045E  2C4D               	goto	l13748
  3282  045F  3A01               	xorlw	1	; case 1
  3283  0460  1903               	skipnz
  3284  0461  2C4D               	goto	l13748
  3285  0462  3A03               	xorlw	3	; case 2
  3286  0463  1903               	skipnz
  3287  0464  2C50               	goto	l13750
  3288  0465  3A01               	xorlw	1	; case 3
  3289  0466  1903               	skipnz
  3290  0467  2C4D               	goto	l13748
  3291  0468  3A07               	xorlw	7	; case 4
  3292  0469  1903               	skipnz
  3293  046A  2C4D               	goto	l13748
  3294  046B  3A01               	xorlw	1	; case 5
  3295  046C  1903               	skipnz
  3296  046D  2C52               	goto	l13752
  3297  046E  3A03               	xorlw	3	; case 6
  3298  046F  1903               	skipnz
  3299  0470  2C54               	goto	l13754
  3300  0471  3A01               	xorlw	1	; case 7
  3301  0472  1903               	skipnz
  3302  0473  2C48               	goto	l13744
  3303  0474  3A0F               	xorlw	15	; case 8
  3304  0475  1903               	skipnz
  3305  0476  2C56               	goto	l13756
  3306  0477                     l13762:	
  3307                           
  3308                           ;led.c: 798: if(old_time.sec<=59 && old_time.min<=59 && old_time.hour<=23)
  3309  0477  303C               	movlw	60
  3310  0478  1283               	bcf	3,5	;RP0=0, select bank0
  3311  0479  025F               	subwf	_old_time+2,w
  3312  047A  1803               	skipnc
  3313  047B  2CF6               	goto	l3401
  3314  047C  303C               	movlw	60
  3315  047D  025E               	subwf	_old_time+1,w
  3316  047E  1803               	skipnc
  3317  047F  2CF6               	goto	l3401
  3318  0480  3018               	movlw	24
  3319  0481  025D               	subwf	_old_time,w
  3320  0482  1C03               	btfss	3,0
  3321  0483  2CEE               	goto	l13838
  3322  0484  2CF6               	goto	l3401
  3323  0485                     l13770:	
  3324                           
  3325                           ;led.c: 1066: {
  3326                           ;led.c: 1067: if(old_time.sec!=0){
  3327  0485  085F               	movf	_old_time+2,w
  3328  0486  1903               	btfsc	3,2
  3329  0487  2CFA               	goto	l13844
  3330                           
  3331                           ;led.c: 1069: i=0;
  3332  0488  01B9               	clrf	up_time2@i
  3333                           
  3334                           ;led.c: 1070: if(old_date.day==0)
  3335  0489  08E0               	movf	_old_date,f
  3336  048A  1D03               	skipz
  3337  048B  2C8E               	goto	l13778
  3338                           
  3339                           ;led.c: 1071: old_date.day=8;
  3340  048C  3008               	movlw	8
  3341  048D  00E0               	movwf	_old_date
  3342  048E                     l13778:	
  3343                           
  3344                           ;led.c: 1073: date[i++] = old_date.day;
  3345  048E  0860               	movf	_old_date,w
  3346  048F  00B0               	movwf	up_time2@date
  3347  0490  0AB9               	incf	up_time2@i,f
  3348                           
  3349                           ;led.c: 1074: date[i++] = old_date.date%10;
  3350  0491  0839               	movf	up_time2@i,w
  3351  0492  3E30               	addlw	up_time2@date& (0+255)
  3352  0493  0084               	movwf	4
  3353  0494  300A               	movlw	10
  3354  0495  00F4               	movwf	?___lbmod
  3355  0496  0861               	movf	_old_date+1,w
  3356  0497  2567  118A         	fcall	___lbmod
  3357  0499  1383               	bcf	3,7	;select IRP bank0
  3358                           
  3359                           ;led.c: 1075: date[i++] = old_date.date/10;
  3360  049A  264F  118A         	fcall	PL2	;call to abstracted procedure
  3361  049C  00F6               	movwf	?___lbdiv
  3362  049D  0861               	movf	_old_date+1,w
  3363  049E  2507  118A         	fcall	___lbdiv
  3364                           
  3365                           ;led.c: 1076: date[i++] = old_date.month%10;
  3366  04A0  264F  118A         	fcall	PL2	;call to abstracted procedure
  3367  04A2  00F4               	movwf	?___lbmod
  3368  04A3  0862               	movf	_old_date+2,w
  3369  04A4  2567  118A         	fcall	___lbmod
  3370                           
  3371                           ;led.c: 1077: date[i++] = old_date.month/10;
  3372  04A6  264F  118A         	fcall	PL2	;call to abstracted procedure
  3373  04A8  00F6               	movwf	?___lbdiv
  3374  04A9  0862               	movf	_old_date+2,w
  3375  04AA  2507  118A         	fcall	___lbdiv
  3376                           
  3377                           ;led.c: 1078: date[i++] = old_date.year %10;
  3378  04AC  264F  118A         	fcall	PL2	;call to abstracted procedure
  3379  04AE  00F4               	movwf	?___lbmod
  3380  04AF  0863               	movf	_old_date+3,w
  3381  04B0  2567  118A         	fcall	___lbmod
  3382                           
  3383                           ;led.c: 1079: date[i++] = old_date.year/10;
  3384  04B2  264F  118A         	fcall	PL2	;call to abstracted procedure
  3385  04B4  00F6               	movwf	?___lbdiv
  3386  04B5  0863               	movf	_old_date+3,w
  3387  04B6  2507  118A         	fcall	___lbdiv
  3388  04B8  0080               	movwf	0
  3389  04B9  0AB9               	incf	up_time2@i,f
  3390                           
  3391                           ;led.c: 1080: date[i++] =0;
  3392  04BA  0839               	movf	up_time2@i,w
  3393  04BB  3E30               	addlw	up_time2@date& (0+255)
  3394  04BC  0084               	movwf	4
  3395  04BD  0180               	clrf	0
  3396  04BE  0AB9               	incf	up_time2@i,f
  3397                           
  3398                           ;led.c: 1081: date[i++] =2;
  3399  04BF  0839               	movf	up_time2@i,w
  3400  04C0  3E30               	addlw	up_time2@date& (0+255)
  3401  04C1  0084               	movwf	4
  3402  04C2  3002               	movlw	2
  3403  04C3  0080               	movwf	0
  3404  04C4  0AB9               	incf	up_time2@i,f
  3405                           
  3406                           ;led.c: 1082: up_date(date,i,0,2);
  3407  04C5  0839               	movf	up_time2@i,w
  3408  04C6  00A4               	movwf	?_up_date
  3409  04C7  01A5               	clrf	?_up_date+1
  3410  04C8  3002               	movlw	2
  3411  04C9  00A6               	movwf	?_up_date+2
  3412  04CA  3030               	movlw	up_time2@date& (0+255)
  3413  04CB  2584  118A         	fcall	_up_date
  3414  04CD  2CFA               	goto	l13844
  3415  04CE                     l13816:	
  3416                           
  3417                           ;led.c: 1087: {
  3418                           ;led.c: 1088: for(i=0;i<9;i++)
  3419  04CE  01B9               	clrf	up_time2@i
  3420  04CF                     l13822:	
  3421                           
  3422                           ;led.c: 1089: {
  3423                           ;led.c: 1090: date[i]=count;
  3424  04CF  0839               	movf	up_time2@i,w
  3425  04D0  3E30               	addlw	up_time2@date& (0+255)
  3426  04D1  0084               	movwf	4
  3427  04D2  0857               	movf	up_time2@count,w
  3428  04D3  1383               	bcf	3,7	;select IRP bank0
  3429  04D4  0080               	movwf	0
  3430  04D5  0AB9               	incf	up_time2@i,f
  3431  04D6  3009               	movlw	9
  3432  04D7  0239               	subwf	up_time2@i,w
  3433  04D8  1C03               	skipc
  3434  04D9  2CCF               	goto	l13822
  3435                           
  3436                           ;led.c: 1091: }
  3437                           ;led.c: 1092: if(count>=9)
  3438  04DA  3009               	movlw	9
  3439  04DB  0257               	subwf	up_time2@count,w
  3440  04DC  1C03               	skipc
  3441  04DD  2CE1               	goto	l13832
  3442                           
  3443                           ;led.c: 1093: {
  3444                           ;led.c: 1094: count=0;
  3445  04DE  01D7               	clrf	up_time2@count
  3446                           
  3447                           ;led.c: 1095: display_mode_state=display_normal;
  3448  04DF  01D8               	clrf	up_time2@display_mode_state
  3449                           
  3450                           ;led.c: 1096: }
  3451  04E0  2CE2               	goto	l13834
  3452  04E1                     l13832:	
  3453                           
  3454                           ;led.c: 1097: else
  3455                           ;led.c: 1098: {
  3456                           ;led.c: 1099: count++;
  3457  04E1  0AD7               	incf	up_time2@count,f
  3458  04E2                     l13834:	
  3459                           
  3460                           ;led.c: 1100: }
  3461                           ;led.c: 1101: up_date(date,i,copy_flag_dian,2);
  3462  04E2  0839               	movf	up_time2@i,w
  3463  04E3  00A4               	movwf	?_up_date
  3464  04E4  0856               	movf	up_time2@copy_flag_dian,w
  3465  04E5  00A5               	movwf	?_up_date+1
  3466  04E6  3002               	movlw	2
  3467  04E7  00A6               	movwf	?_up_date+2
  3468  04E8  3030               	movlw	up_time2@date& (0+255)
  3469  04E9  2584  118A         	fcall	_up_date
  3470                           
  3471                           ;led.c: 1103: break;
  3472  04EB  2CFA               	goto	l13844
  3473  04EC                     l13836:	
  3474  04EC  01D8               	clrf	up_time2@display_mode_state
  3475                           
  3476                           ;led.c: 1106: }
  3477  04ED  2CFA               	goto	l13844
  3478  04EE                     l13838:	
  3479  04EE  0858               	movf	up_time2@display_mode_state,w
  3480                           
  3481                           ; Switch size 1, requested type "space"
  3482                           ; Number of cases is 2, Range of values is 0 to 1
  3483                           ; switch strategies available:
  3484                           ; Name         Bytes Cycles
  3485                           ; simple_byte     7     4 (average)
  3486                           ; direct_byte    20    16 (fixed)
  3487                           ;	Chosen strategy is simple_byte
  3488  04EF  3A00               	xorlw	0	; case 0
  3489  04F0  1903               	skipnz
  3490  04F1  2C85               	goto	l13770
  3491  04F2  3A01               	xorlw	1	; case 1
  3492  04F3  1903               	skipnz
  3493  04F4  2CCE               	goto	l13816
  3494  04F5  2CEC               	goto	l13836
  3495  04F6                     l3401:	
  3496                           
  3497                           ;led.c: 1212: else
  3498                           ;led.c: 1213: {
  3499                           ;led.c: 1214: old_date.year = 1;
  3500                           
  3501                           ;led.c: 1215: old_date.month = 1;
  3502                           
  3503                           ;led.c: 1216: old_date.date = 1;
  3504                           
  3505                           ;led.c: 1217: old_date.day = 0;
  3506                           
  3507                           ;led.c: 1218: old_time.hour = 0;
  3508                           
  3509                           ;led.c: 1219: old_time.min = 0;
  3510                           
  3511                           ;led.c: 1220: old_time.sec = 0;
  3512  04F6  265B  118A         	fcall	PL5	;call to abstracted procedure
  3513                           
  3514                           ;led.c: 1221: settime();
  3515  04F8  25D2  118A         	fcall	_settime
  3516  04FA                     l13844:	
  3517                           
  3518                           ;led.c: 1222: }
  3519                           ;led.c: 1224: for(i=0;i<9;i++)
  3520  04FA  01B9               	clrf	up_time2@i
  3521  04FB                     l13850:	
  3522                           
  3523                           ;led.c: 1225: {
  3524                           ;led.c: 1226: seg_disp(10,0,2);
  3525  04FB  01F5               	clrf	?_seg_disp
  3526  04FC  3002               	movlw	2
  3527  04FD  00F6               	movwf	?_seg_disp+1
  3528  04FE  300A               	movlw	10
  3529  04FF  259A  118A         	fcall	_seg_disp
  3530  0501  0AB9               	incf	up_time2@i,f
  3531  0502  3009               	movlw	9
  3532  0503  0239               	subwf	up_time2@i,w
  3533  0504  1803               	btfsc	3,0
  3534  0505  0008               	return
  3535  0506  2CFB               	goto	l13850
  3536  0507                     __end_of_up_time2:	
  3537  0507                     __ptext1364:	
  3538 ;; =============== function ___lbmod ends ============
  3539                           
  3540                           
  3541 ;; *************** function ___lbdiv *****************
  3542 ;; Defined at:
  3543 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\sources\lbdiv.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dividend        1    wreg     unsigned char 
  3546 ;;  divisor         1    6[COMMON] unsigned char 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  dividend        1    3[BANK0 ] unsigned char 
  3549 ;;  quotient        1    5[BANK0 ] unsigned char 
  3550 ;;  counter         1    4[BANK0 ] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      unsigned char 
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0
  3555 ;; Tracked objects:
  3556 ;;		On entry : 60/100
  3557 ;;		On exit  : 60/100
  3558 ;;		Unchanged: FFF9F/0
  3559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3560 ;;      Params:         1       0       0       0
  3561 ;;      Locals:         0       3       0       0
  3562 ;;      Temps:          0       0       0       0
  3563 ;;      Totals:         1       3       0       0
  3564 ;;Total ram usage:        4 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    2
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_dec_hex
  3571 ;;		_lcd_init
  3572 ;;		_up_time1
  3573 ;;		_up_time2
  3574 ;;		_main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577  0507                     ___lbdiv:	
  3578                           
  3579                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3580                           ;___lbdiv@dividend stored from wreg
  3581  0507  00A3               	movwf	___lbdiv@dividend
  3582  0508  01A5               	clrf	___lbdiv@quotient
  3583  0509  0876               	movf	___lbdiv@divisor,w
  3584  050A  1903               	btfsc	3,2
  3585  050B  2D20               	goto	l13290
  3586  050C  01A4               	clrf	___lbdiv@counter
  3587  050D                     l13276:	
  3588  050D  0AA4               	incf	___lbdiv@counter,f
  3589  050E  1BF6               	btfsc	___lbdiv@divisor,7
  3590  050F  2D13               	goto	l9212
  3591  0510  1003               	clrc
  3592  0511  0DF6               	rlf	___lbdiv@divisor,f
  3593  0512  2D0D               	goto	l13276
  3594  0513                     l9212:	
  3595  0513  1003               	clrc
  3596  0514  0DA5               	rlf	___lbdiv@quotient,f
  3597  0515  0876               	movf	___lbdiv@divisor,w
  3598  0516  0223               	subwf	___lbdiv@dividend,w
  3599  0517  1C03               	skipc
  3600  0518  2D1D               	goto	L22
  3601  0519  0876               	movf	___lbdiv@divisor,w
  3602  051A  02A3               	subwf	___lbdiv@dividend,f
  3603  051B  1425               	bsf	___lbdiv@quotient,0
  3604  051C  1003               	clrc
  3605  051D                     L22:	
  3606  051D  0CF6               	rrf	___lbdiv@divisor,f
  3607  051E  0BA4               	decfsz	___lbdiv@counter,f
  3608  051F  2D13               	goto	l9212
  3609  0520                     l13290:	
  3610  0520  0825               	movf	___lbdiv@quotient,w
  3611  0521  0008               	return
  3612  0522                     __end_of___lbdiv:	
  3613  0522                     __ptext1344:	
  3614 ;; =============== function _main ends ============
  3615                           
  3616                           
  3617 ;; *************** function _lcd_init *****************
  3618 ;; Defined at:
  3619 ;;		line 195 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\led.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;		None               void
  3626 ;; Registers used:
  3627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 160/100
  3630 ;;		On exit  : 60/0
  3631 ;;		Unchanged: FFE00/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3633 ;;      Params:         0       0       0       0
  3634 ;;      Locals:         0       1       0       0
  3635 ;;      Temps:          0       0       0       0
  3636 ;;      Totals:         0       1       0       0
  3637 ;;Total ram usage:        1 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    6
  3640 ;; This function calls:
  3641 ;;		___lbmod
  3642 ;;		___lbdiv
  3643 ;;		_up_time1
  3644 ;;		_up_time2
  3645 ;; This function is called by:
  3646 ;;		_main
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649  0522                     _lcd_init:	
  3650                           
  3651                           ;led.c: 196: TRISC0 = 0;
  3652                           
  3653                           ; Regs used in _lcd_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3654  0522  1683               	bsf	3,5	;RP0=1, select bank1
  3655  0523  1007               	bcf	7,0
  3656                           
  3657                           ;led.c: 197: TRISC5 = 0;
  3658  0524  1287               	bcf	7,5
  3659                           
  3660                           ;led.c: 198: TRISA5 = 0;
  3661  0525  1285               	bcf	5,5
  3662                           
  3663                           ;led.c: 199: TRISC2 = 0;
  3664  0526  1107               	bcf	7,2
  3665                           
  3666                           ;led.c: 200: RC2 = 1;
  3667  0527  1283               	bcf	3,5	;RP0=0, select bank0
  3668  0528  1507               	bsf	7,2
  3669                           
  3670                           ;led.c: 201: TRISA2 = 0;
  3671  0529  1683               	bsf	3,5	;RP0=1, select bank1
  3672  052A  1105               	bcf	5,2
  3673                           
  3674                           ;led.c: 202: TRISA3 = 0;
  3675  052B  1185               	bcf	5,3
  3676                           
  3677                           ;led.c: 203: TRISA4 = 0;
  3678  052C  1205               	bcf	5,4
  3679                           
  3680                           ;led.c: 204: TRISC1 = 0;
  3681  052D  1087               	bcf	7,1
  3682                           
  3683                           ;led.c: 205: RC1 = 1;
  3684  052E  1283               	bcf	3,5	;RP0=0, select bank0
  3685  052F  1487               	bsf	7,1
  3686                           
  3687                           ;led.c: 206: ntp_info.test_mode1 = 0;
  3688  0530  1683               	bsf	3,5	;RP0=1, select bank1
  3689  0531  01B8               	clrf	_ntp_info^(0+128)
  3690                           
  3691                           ;led.c: 207: ntp_info.test_mode2 = 0;
  3692  0532  01B9               	clrf	(_ntp_info^(0+128)+1)
  3693                           
  3694                           ;led.c: 208: disp_data_time[0]=(old_time.min%100)%10;
  3695  0533  3064               	movlw	100
  3696  0534  00F4               	movwf	?___lbmod
  3697  0535  1283               	bcf	3,5	;RP0=0, select bank0
  3698  0536  085E               	movf	_old_time+1,w
  3699  0537  2567  118A         	fcall	___lbmod
  3700  0539  00D9               	movwf	_disp_data_time
  3701  053A  300A               	movlw	10
  3702  053B  00F4               	movwf	?___lbmod
  3703  053C  0859               	movf	_disp_data_time,w
  3704  053D  2567  118A         	fcall	___lbmod
  3705  053F  00D9               	movwf	_disp_data_time
  3706                           
  3707                           ;led.c: 209: disp_data_time[1]=(old_time.min%100)/10;
  3708  0540  300A               	movlw	10
  3709  0541  00F6               	movwf	?___lbdiv
  3710  0542  3064               	movlw	100
  3711  0543  00F4               	movwf	?___lbmod
  3712  0544  085E               	movf	_old_time+1,w
  3713  0545  2567  118A         	fcall	___lbmod
  3714  0547  2507  118A         	fcall	___lbdiv
  3715  0549  00DA               	movwf	_disp_data_time+1
  3716                           
  3717                           ;led.c: 210: disp_data_time[2]=(old_time.hour%100)%10;
  3718  054A  3064               	movlw	100
  3719  054B  00F4               	movwf	?___lbmod
  3720  054C  085D               	movf	_old_time,w
  3721  054D  2567  118A         	fcall	___lbmod
  3722  054F  00BA               	movwf	_lcd_init$5143
  3723                           
  3724                           ;led.c: 210: disp_data_time[2]=(old_time.hour%100)%10;
  3725  0550  300A               	movlw	10
  3726  0551  00F4               	movwf	?___lbmod
  3727  0552  083A               	movf	_lcd_init$5143,w
  3728  0553  2567  118A         	fcall	___lbmod
  3729  0555  00DB               	movwf	_disp_data_time+2
  3730                           
  3731                           ;led.c: 211: disp_data_time[3]=(old_time.hour%100)/10;
  3732  0556  300A               	movlw	10
  3733  0557  00F6               	movwf	?___lbdiv
  3734  0558  3064               	movlw	100
  3735  0559  00F4               	movwf	?___lbmod
  3736  055A  085D               	movf	_old_time,w
  3737  055B  2567  118A         	fcall	___lbmod
  3738  055D  2507  118A         	fcall	___lbdiv
  3739  055F  00DC               	movwf	_disp_data_time+3
  3740                           
  3741                           ;led.c: 212: up_time1(disp_data_time);
  3742  0560  239C  118A         	fcall	_up_time1
  3743                           
  3744                           ;led.c: 215: up_time2(disp_data_time);
  3745  0562  3059               	movlw	_disp_data_time& (0+255)
  3746  0563  2445               	fcall	_up_time2
  3747                           
  3748                           ;led.c: 217: RC2 = 0;
  3749  0564  1107               	bcf	7,2
  3750                           
  3751                           ;led.c: 218: RC1 = 0;
  3752  0565  1087               	bcf	7,1
  3753  0566  0008               	return
  3754  0567                     __end_of_lcd_init:	
  3755  0567                     __ptext1363:	
  3756 ;; =============== function ___awmod ends ============
  3757                           
  3758                           
  3759 ;; *************** function ___lbmod *****************
  3760 ;; Defined at:
  3761 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\sources\lbmod.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  dividend        1    wreg     unsigned char 
  3764 ;;  divisor         1    4[COMMON] unsigned char 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  dividend        1    0[BANK0 ] unsigned char 
  3767 ;;  rem             1    2[BANK0 ] unsigned char 
  3768 ;;  counter         1    1[BANK0 ] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      unsigned char 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0
  3773 ;; Tracked objects:
  3774 ;;		On entry : 20/100
  3775 ;;		On exit  : 60/100
  3776 ;;		Unchanged: FFF9F/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3778 ;;      Params:         1       0       0       0
  3779 ;;      Locals:         0       3       0       0
  3780 ;;      Temps:          1       0       0       0
  3781 ;;      Totals:         2       3       0       0
  3782 ;;Total ram usage:        5 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    2
  3785 ;; This function calls:
  3786 ;;		Nothing
  3787 ;; This function is called by:
  3788 ;;		_dec_hex
  3789 ;;		_lcd_init
  3790 ;;		_up_time1
  3791 ;;		_up_time2
  3792 ;;		_main
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795  0567                     ___lbmod:	
  3796                           
  3797                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3798                           ;___lbmod@dividend stored from wreg
  3799  0567  1303               	bcf	3,6	;RP1=0, select bank0
  3800  0568  00A0               	movwf	___lbmod@dividend
  3801  0569  3008               	movlw	8
  3802  056A  00A1               	movwf	___lbmod@counter
  3803  056B  01A2               	clrf	___lbmod@rem
  3804  056C                     l13298:	
  3805  056C  0820               	movf	___lbmod@dividend,w
  3806  056D  00F5               	movwf	??___lbmod
  3807  056E  3007               	movlw	7
  3808  056F  1003               	clrc
  3809  0570                     L21:	
  3810  0570  0CF5               	rrf	??___lbmod,f
  3811  0571  3EFF               	addlw	-1
  3812  0572  1003               	clrc
  3813  0573  1D03               	skipz
  3814  0574  2D70               	goto	L21
  3815  0575  0D22               	rlf	___lbmod@rem,w
  3816  0576  0475               	iorwf	??___lbmod,w
  3817  0577  00A2               	movwf	___lbmod@rem
  3818  0578  1003               	clrc
  3819  0579  0DA0               	rlf	___lbmod@dividend,f
  3820  057A  0874               	movf	___lbmod@divisor,w
  3821  057B  0222               	subwf	___lbmod@rem,w
  3822  057C  1C03               	skipc
  3823  057D  2D80               	goto	l13306
  3824  057E  0874               	movf	___lbmod@divisor,w
  3825  057F  02A2               	subwf	___lbmod@rem,f
  3826  0580                     l13306:	
  3827  0580  0BA1               	decfsz	___lbmod@counter,f
  3828  0581  2D6C               	goto	l13298
  3829  0582  0822               	movf	___lbmod@rem,w
  3830  0583  0008               	return
  3831  0584                     __end_of___lbmod:	
  3832  0584                     __ptext1347:	
  3833 ;; =============== function _up_time1 ends ============
  3834                           
  3835                           
  3836 ;; *************** function _up_date *****************
  3837 ;; Defined at:
  3838 ;;		line 697 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\led.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  date            1    wreg     PTR unsigned char 
  3841 ;;		 -> up_time2@date(9), up_time1@date(6), 
  3842 ;;  length          1    4[BANK0 ] unsigned char 
  3843 ;;  dian            1    5[BANK0 ] unsigned char 
  3844 ;;  flag            1    6[BANK0 ] unsigned char 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  date            1    8[BANK0 ] PTR unsigned char 
  3847 ;;		 -> up_time2@date(9), up_time1@date(6), 
  3848 ;;  i               1    9[BANK0 ] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;		None               void
  3851 ;; Registers used:
  3852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 160/0
  3855 ;;		On exit  : 60/0
  3856 ;;		Unchanged: FFE00/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3858 ;;      Params:         0       3       0       0
  3859 ;;      Locals:         0       2       0       0
  3860 ;;      Temps:          0       1       0       0
  3861 ;;      Totals:         0       6       0       0
  3862 ;;Total ram usage:        6 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    4
  3865 ;; This function calls:
  3866 ;;		_seg_disp
  3867 ;;		_latch_rclk
  3868 ;; This function is called by:
  3869 ;;		_up_time1
  3870 ;;		_up_time2
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873  0584                     _up_date:	
  3874                           
  3875                           ; Regs used in _up_date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3876                           ;up_date@date stored from wreg
  3877  0584  00A8               	movwf	up_date@date
  3878                           
  3879                           ;led.c: 698: UINT8 i;
  3880                           ;led.c: 699: for(i=0;i<length;i++)
  3881  0585  01A9               	clrf	up_date@i
  3882  0586                     l13646:	
  3883  0586  0824               	movf	up_date@length,w
  3884  0587  0229               	subwf	up_date@i,w
  3885  0588  1803               	btfsc	3,0
  3886  0589  2D98               	goto	l13648
  3887                           
  3888                           ;led.c: 700: {
  3889                           ;led.c: 701: seg_disp(date[i],dian,flag);
  3890  058A  0825               	movf	up_date@dian,w
  3891  058B  00F5               	movwf	?_seg_disp
  3892  058C  0826               	movf	up_date@flag,w
  3893  058D  00F6               	movwf	?_seg_disp+1
  3894  058E  0829               	movf	up_date@i,w
  3895  058F  0728               	addwf	up_date@date,w
  3896  0590  00A7               	movwf	??_up_date
  3897  0591  0084               	movwf	4
  3898  0592  1383               	bcf	3,7	;select IRP bank0
  3899  0593  0800               	movf	0,w
  3900  0594  259A  118A         	fcall	_seg_disp
  3901  0596  0AA9               	incf	up_date@i,f
  3902  0597  2D86               	goto	l13646
  3903  0598                     l13648:	
  3904                           
  3905                           ;led.c: 702: }
  3906                           ;led.c: 706: latch_rclk(flag);
  3907  0598  0826               	movf	up_date@flag,w
  3908  0599  2E32               	ljmp	_latch_rclk
  3909  059A                     __end_of_up_date:	
  3910  059A                     __ptext1354:	
  3911 ;; =============== function _MakeCRC16 ends ============
  3912                           
  3913                           
  3914 ;; *************** function _seg_disp *****************
  3915 ;; Defined at:
  3916 ;;		line 135 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\led.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  num             1    wreg     unsigned char 
  3919 ;;  dp              1    5[COMMON] unsigned char 
  3920 ;;  flag            1    6[COMMON] unsigned char 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  num             1    1[BANK0 ] unsigned char 
  3923 ;;  i               1    3[BANK0 ] unsigned char 
  3924 ;;  date            1    2[BANK0 ] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;		None               void
  3927 ;; Registers used:
  3928 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 60/100
  3931 ;;		On exit  : 60/0
  3932 ;;		Unchanged: FFE00/0
  3933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3934 ;;      Params:         2       0       0       0
  3935 ;;      Locals:         0       3       0       0
  3936 ;;      Temps:          0       1       0       0
  3937 ;;      Totals:         2       4       0       0
  3938 ;;Total ram usage:        6 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    3
  3941 ;; This function calls:
  3942 ;;		_shift_srclk
  3943 ;; This function is called by:
  3944 ;;		_up_time1
  3945 ;;		_up_date
  3946 ;;		_up_time2
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949  059A                     _seg_disp:	
  3950                           
  3951                           ; Regs used in _seg_disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3952                           ;seg_disp@num stored from wreg
  3953  059A  00A1               	movwf	seg_disp@num
  3954                           
  3955                           ;led.c: 136: UINT8 i;
  3956                           ;led.c: 137: UINT8 date;
  3957                           ;led.c: 138: if(flag==1)
  3958  059B  0B76               	decfsz	seg_disp@flag,w
  3959  059C  2DA0               	goto	l13464
  3960                           
  3961                           ;led.c: 139: {
  3962                           ;led.c: 140: date = SEG_CODE1[num];
  3963  059D  0821               	movf	seg_disp@num,w
  3964  059E  3E01               	addlw	low (_SEG_CODE1-__stringbase)
  3965  059F  2DA2               	goto	L16
  3966  05A0                     l13464:	
  3967                           ;led.c: 141: }
  3968                           
  3969                           
  3970                           ;led.c: 142: else
  3971                           ;led.c: 143: {
  3972                           ;led.c: 144: date = SEG_CODE2[num];
  3973  05A0  0821               	movf	seg_disp@num,w
  3974  05A1  3E0C               	addlw	low (_SEG_CODE2-__stringbase)
  3975  05A2                     L16:	
  3976  05A2  0084               	movwf	4
  3977  05A3  118A  200F  118A   	fcall	stringdir
  3978  05A6  00A2               	movwf	seg_disp@date
  3979                           
  3980                           ;led.c: 145: }
  3981                           ;led.c: 146: if(dp)
  3982  05A7  0875               	movf	seg_disp@dp,w
  3983  05A8  1D03               	skipz
  3984                           
  3985                           ;led.c: 149: {
  3986                           ;led.c: 150: date |= ONE_DP;
  3987  05A9  1422               	bsf	seg_disp@date,0
  3988                           
  3989                           ;led.c: 155: }
  3990                           ;led.c: 156: }
  3991                           ;led.c: 157: for(i=0; i<8; i++)
  3992                           
  3993                           ;led.c: 151: }
  3994  05AA  01A3               	clrf	seg_disp@i
  3995  05AB                     l13478:	
  3996                           
  3997                           ;led.c: 158: {
  3998                           ;led.c: 159: if( date&(1<<i) )
  3999  05AB  3001               	movlw	1
  4000  05AC  00A0               	movwf	??_seg_disp
  4001  05AD  0A23               	incf	seg_disp@i,w
  4002  05AE  2DB1               	goto	u3704
  4003  05AF                     u3705:	
  4004  05AF  1003               	clrc
  4005  05B0  0DA0               	rlf	??_seg_disp,f
  4006  05B1                     u3704:	
  4007  05B1  3EFF               	addlw	-1
  4008  05B2  1D03               	skipz
  4009  05B3  2DAF               	goto	u3705
  4010  05B4  0820               	movf	??_seg_disp,w
  4011  05B5  0522               	andwf	seg_disp@date,w
  4012  05B6  1903               	btfsc	3,2
  4013  05B7  2DBE               	goto	l13484
  4014                           
  4015                           ;led.c: 160: {
  4016                           ;led.c: 161: if(flag==1)
  4017  05B8  0B76               	decfsz	seg_disp@flag,w
  4018  05B9  2DBC               	goto	l3326
  4019                           
  4020                           ;led.c: 162: {
  4021                           ;led.c: 163: RC0 = 1;
  4022  05BA  1407               	bsf	7,0
  4023                           
  4024                           ;led.c: 164: }
  4025  05BB  2DC3               	goto	l3328
  4026  05BC                     l3326:	
  4027                           
  4028                           ;led.c: 165: else
  4029                           ;led.c: 166: {
  4030                           ;led.c: 167: RA2 = 1;
  4031  05BC  1505               	bsf	5,2
  4032  05BD  2DC3               	goto	l3328
  4033  05BE                     l13484:	
  4034                           
  4035                           ;led.c: 170: else
  4036                           ;led.c: 171: {
  4037                           ;led.c: 172: if(flag==1)
  4038  05BE  0B76               	decfsz	seg_disp@flag,w
  4039  05BF  2DC2               	goto	l3329
  4040                           
  4041                           ;led.c: 173: {
  4042                           ;led.c: 174: RC0 = 0;
  4043  05C0  1007               	bcf	7,0
  4044                           
  4045                           ;led.c: 175: }
  4046  05C1  2DC3               	goto	l3328
  4047  05C2                     l3329:	
  4048                           
  4049                           ;led.c: 176: else
  4050                           ;led.c: 177: {
  4051                           ;led.c: 178: RA2 = 0;
  4052  05C2  1105               	bcf	5,2
  4053  05C3                     l3328:	
  4054  05C3  0000               	nop	;#
  4055  05C4  0000               	nop	;#
  4056                           
  4057                           ;led.c: 182: if(flag==1)
  4058  05C5  0B76               	decfsz	seg_disp@flag,w
  4059  05C6  2DC9               	goto	l13492
  4060                           
  4061                           ;led.c: 183: {
  4062                           ;led.c: 184: shift_srclk(1);
  4063  05C7  3001               	movlw	1
  4064  05C8  2DCA               	goto	L17
  4065  05C9                     l13492:	
  4066                           ;led.c: 185: }
  4067                           
  4068                           
  4069                           ;led.c: 186: else
  4070                           ;led.c: 187: {
  4071                           ;led.c: 188: shift_srclk(2);
  4072  05C9  3002               	movlw	2
  4073  05CA                     L17:	
  4074  05CA  2611  118A         	fcall	_shift_srclk
  4075  05CC  0AA3               	incf	seg_disp@i,f
  4076  05CD  3008               	movlw	8
  4077  05CE  0223               	subwf	seg_disp@i,w
  4078  05CF  1803               	btfsc	3,0
  4079  05D0  0008               	return
  4080  05D1  2DAB               	goto	l13478
  4081  05D2                     __end_of_seg_disp:	
  4082  05D2                     __ptext1348:	
  4083 ;; =============== function _up_date ends ============
  4084                           
  4085                           
  4086 ;; *************** function _settime *****************
  4087 ;; Defined at:
  4088 ;;		line 97 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\DS3231.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  write_time      7    8[BANK0 ] unsigned char [7]
  4093 ;;  i               1   15[BANK0 ] unsigned char 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;		None               void
  4096 ;; Registers used:
  4097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 20/140
  4100 ;;		On exit  : 60/0
  4101 ;;		Unchanged: FFE00/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4103 ;;      Params:         0       0       0       0
  4104 ;;      Locals:         0       8       0       0
  4105 ;;      Temps:          0       0       0       0
  4106 ;;      Totals:         0       8       0       0
  4107 ;;Total ram usage:        8 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    4
  4110 ;; This function calls:
  4111 ;;		_dec_hex
  4112 ;;		_writebyte
  4113 ;; This function is called by:
  4114 ;;		_up_time1
  4115 ;;		_up_time2
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119  05D2                     _settime:	
  4120                           
  4121                           ;DS3231.c: 99: UINT8 write_time[7],i;
  4122                           ;DS3231.c: 113: write_time[0] = dec_hex(old_time.sec);
  4123                           
  4124                           ; Regs used in _settime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4125  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  4126  05D3  085F               	movf	_old_time+2,w
  4127  05D4  2601  118A         	fcall	_dec_hex
  4128  05D6  00A8               	movwf	settime@write_time
  4129                           
  4130                           ;DS3231.c: 114: write_time[1] = dec_hex(old_time.min);
  4131  05D7  085E               	movf	_old_time+1,w
  4132  05D8  2601  118A         	fcall	_dec_hex
  4133  05DA  00A9               	movwf	settime@write_time+1
  4134                           
  4135                           ;DS3231.c: 115: write_time[2] = dec_hex(old_time.hour);
  4136  05DB  085D               	movf	_old_time,w
  4137  05DC  2601  118A         	fcall	_dec_hex
  4138  05DE  00AA               	movwf	settime@write_time+2
  4139                           
  4140                           ;DS3231.c: 116: write_time[3] = dec_hex(old_date.day);
  4141  05DF  0860               	movf	_old_date,w
  4142  05E0  2601  118A         	fcall	_dec_hex
  4143  05E2  00AB               	movwf	settime@write_time+3
  4144                           
  4145                           ;DS3231.c: 120: write_time[4] = dec_hex(old_date.date);
  4146  05E3  0861               	movf	_old_date+1,w
  4147  05E4  2601  118A         	fcall	_dec_hex
  4148  05E6  00AC               	movwf	settime@write_time+4
  4149                           
  4150                           ;DS3231.c: 121: write_time[5] = dec_hex(old_date.month);
  4151  05E7  0862               	movf	_old_date+2,w
  4152  05E8  2601  118A         	fcall	_dec_hex
  4153  05EA  00AD               	movwf	settime@write_time+5
  4154                           
  4155                           ;DS3231.c: 122: write_time[6] = dec_hex(old_date.year);
  4156  05EB  0863               	movf	_old_date+3,w
  4157  05EC  2601               	fcall	_dec_hex
  4158  05ED  00AE               	movwf	settime@write_time+6
  4159                           
  4160                           ;DS3231.c: 124: for(i=0;i<7;i++)
  4161  05EE  01AF               	clrf	settime@i
  4162  05EF                     l13634:	
  4163                           
  4164                           ;DS3231.c: 125: {
  4165                           ;DS3231.c: 126: writebyte(0x00+i,write_time[i]);
  4166  05EF  082F               	movf	settime@i,w
  4167  05F0  3E28               	addlw	settime@write_time& (0+255)
  4168  05F1  0084               	movwf	4
  4169  05F2  1383               	bcf	3,7	;select IRP bank0
  4170  05F3  0800               	movf	0,w
  4171  05F4  00F6               	movwf	?_writebyte
  4172  05F5  082F               	movf	settime@i,w
  4173  05F6  158A  25F6  118A   	fcall	_writebyte
  4174  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  4175  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  4176  05FB  0AAF               	incf	settime@i,f
  4177  05FC  3007               	movlw	7
  4178  05FD  022F               	subwf	settime@i,w
  4179  05FE  1803               	btfsc	3,0
  4180  05FF  0008               	return
  4181  0600  2DEF               	goto	l13634
  4182  0601                     __end_of_settime:	
  4183  0601                     __ptext1355:	
  4184 ;; =============== function _seg_disp ends ============
  4185                           
  4186                           
  4187 ;; *************** function _dec_hex *****************
  4188 ;; Defined at:
  4189 ;;		line 145 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\DS3231.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  dec16           1    wreg     unsigned char 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;  dec16           1    7[BANK0 ] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      unsigned char 
  4196 ;; Registers used:
  4197 ;;		wreg, status,2, status,0, pclath, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 60/100
  4200 ;;		On exit  : 60/100
  4201 ;;		Unchanged: FFF9F/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4203 ;;      Params:         0       0       0       0
  4204 ;;      Locals:         0       1       0       0
  4205 ;;      Temps:          0       1       0       0
  4206 ;;      Totals:         0       2       0       0
  4207 ;;Total ram usage:        2 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    3
  4210 ;; This function calls:
  4211 ;;		___lbmod
  4212 ;;		___lbdiv
  4213 ;; This function is called by:
  4214 ;;		_settime
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217  0601                     _dec_hex:	
  4218                           
  4219                           ; Regs used in _dec_hex: [wreg+status,2+status,0+pclath+cstack]
  4220                           ;dec_hex@dec16 stored from wreg
  4221  0601  00A7               	movwf	dec_hex@dec16
  4222                           
  4223                           ;DS3231.c: 146: return((dec16/10)*16+(dec16%10));
  4224  0602  300A               	movlw	10
  4225  0603  00F6               	movwf	?___lbdiv
  4226  0604  0827               	movf	dec_hex@dec16,w
  4227  0605  2507  118A         	fcall	___lbdiv
  4228  0607  00A6               	movwf	??_dec_hex
  4229  0608  0E26               	swapf	??_dec_hex,w
  4230  0609  39F0               	andlw	240
  4231  060A  00A6               	movwf	??_dec_hex
  4232  060B  300A               	movlw	10
  4233  060C  00F4               	movwf	?___lbmod
  4234  060D  0827               	movf	dec_hex@dec16,w
  4235  060E  2567               	fcall	___lbmod
  4236  060F  0726               	addwf	??_dec_hex,w
  4237  0610  0008               	return
  4238  0611                     __end_of_dec_hex:	
  4239  0611                     __ptext1377:	
  4240 ;; =============== function _latch_rclk ends ============
  4241                           
  4242                           
  4243 ;; *************** function _shift_srclk *****************
  4244 ;; Defined at:
  4245 ;;		line 71 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\led.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  flag            1    wreg     unsigned char 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  flag            1    4[COMMON] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;		None               void
  4252 ;; Registers used:
  4253 ;;		wreg
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/100
  4256 ;;		On exit  : 60/0
  4257 ;;		Unchanged: FFE00/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4259 ;;      Params:         0       0       0       0
  4260 ;;      Locals:         1       0       0       0
  4261 ;;      Temps:          0       0       0       0
  4262 ;;      Totals:         1       0       0       0
  4263 ;;Total ram usage:        1 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    2
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_seg_disp
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272  0611                     _shift_srclk:	
  4273                           
  4274                           ; Regs used in _shift_srclk: [wreg]
  4275                           ;shift_srclk@flag stored from wreg
  4276  0611  00F4               	movwf	shift_srclk@flag
  4277                           
  4278                           ;led.c: 72: if(flag==1)
  4279  0612  0B74               	decfsz	shift_srclk@flag,w
  4280  0613  2E18               	goto	l3300
  4281                           
  4282                           ;led.c: 73: {
  4283                           ;led.c: 74: RC5 = 0;
  4284  0614  1283               	bcf	3,5	;RP0=0, select bank0
  4285  0615  1303               	bcf	3,6	;RP1=0, select bank0
  4286  0616  1287               	bcf	7,5
  4287                           
  4288                           ;led.c: 75: }
  4289  0617  2E1B               	goto	l3301
  4290  0618                     l3300:	
  4291                           
  4292                           ;led.c: 76: else
  4293                           ;led.c: 77: {
  4294                           ;led.c: 78: RA3 = 0;
  4295  0618  1283               	bcf	3,5	;RP0=0, select bank0
  4296  0619  1303               	bcf	3,6	;RP1=0, select bank0
  4297  061A  1185               	bcf	5,3
  4298  061B                     l3301:	
  4299  061B  0000               	nop	;#
  4300  061C  0000               	nop	;#
  4301                           
  4302                           ;led.c: 82: if(flag==1)
  4303  061D  0B74               	decfsz	shift_srclk@flag,w
  4304  061E  2E23               	goto	l3302
  4305                           
  4306                           ;led.c: 83: {
  4307                           ;led.c: 84: RC5 = 1;
  4308  061F  1283               	bcf	3,5	;RP0=0, select bank0
  4309  0620  1303               	bcf	3,6	;RP1=0, select bank0
  4310  0621  1687               	bsf	7,5
  4311                           
  4312                           ;led.c: 85: }
  4313  0622  2E26               	goto	l3303
  4314  0623                     l3302:	
  4315                           
  4316                           ;led.c: 86: else
  4317                           ;led.c: 87: {
  4318                           ;led.c: 88: RA3 = 1;
  4319  0623  1283               	bcf	3,5	;RP0=0, select bank0
  4320  0624  1303               	bcf	3,6	;RP1=0, select bank0
  4321  0625  1585               	bsf	5,3
  4322  0626                     l3303:	
  4323  0626  0000               	nop	;#
  4324  0627  0000               	nop	;#
  4325                           
  4326                           ;led.c: 91: if(flag==1)
  4327  0628  0B74               	decfsz	shift_srclk@flag,w
  4328  0629  2E2E               	goto	l3304
  4329                           
  4330                           ;led.c: 92: {
  4331                           ;led.c: 93: RC5 = 0;
  4332  062A  1283               	bcf	3,5	;RP0=0, select bank0
  4333  062B  1303               	bcf	3,6	;RP1=0, select bank0
  4334  062C  1287               	bcf	7,5
  4335                           
  4336                           ;led.c: 94: }
  4337  062D  0008               	return
  4338  062E                     l3304:	
  4339                           
  4340                           ;led.c: 95: else
  4341                           ;led.c: 96: {
  4342                           ;led.c: 97: RA3 = 0;
  4343  062E  1283               	bcf	3,5	;RP0=0, select bank0
  4344  062F  1303               	bcf	3,6	;RP1=0, select bank0
  4345  0630  1185               	bcf	5,3
  4346  0631  0008               	return
  4347  0632                     __end_of_shift_srclk:	
  4348  0632                     __ptext1376:	
  4349 ;; =============== function _interupt_init ends ============
  4350                           
  4351                           
  4352 ;; *************** function _latch_rclk *****************
  4353 ;; Defined at:
  4354 ;;		line 103 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\led.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  flag            1    wreg     unsigned char 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  flag            1    4[COMMON] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;		None               void
  4361 ;; Registers used:
  4362 ;;		wreg
  4363 ;; Tracked objects:
  4364 ;;		On entry : 60/0
  4365 ;;		On exit  : 60/0
  4366 ;;		Unchanged: FFE00/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4368 ;;      Params:         0       0       0       0
  4369 ;;      Locals:         1       0       0       0
  4370 ;;      Temps:          0       0       0       0
  4371 ;;      Totals:         1       0       0       0
  4372 ;;Total ram usage:        1 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    2
  4375 ;; This function calls:
  4376 ;;		Nothing
  4377 ;; This function is called by:
  4378 ;;		_up_date
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381  0632                     _latch_rclk:	
  4382                           
  4383                           ; Regs used in _latch_rclk: [wreg]
  4384                           ;latch_rclk@flag stored from wreg
  4385  0632  00F4               	movwf	latch_rclk@flag
  4386                           
  4387                           ;led.c: 104: if(flag==1)
  4388  0633  0B74               	decfsz	latch_rclk@flag,w
  4389  0634  2E37               	goto	l3309
  4390                           
  4391                           ;led.c: 105: {
  4392                           ;led.c: 106: RA5 = 0;
  4393  0635  1285               	bcf	5,5
  4394                           
  4395                           ;led.c: 107: }
  4396  0636  2E38               	goto	l3310
  4397  0637                     l3309:	
  4398                           
  4399                           ;led.c: 108: else
  4400                           ;led.c: 109: {
  4401                           ;led.c: 110: RA4 = 0;
  4402  0637  1205               	bcf	5,4
  4403  0638                     l3310:	
  4404  0638  0000               	nop	;#
  4405  0639  0000               	nop	;#
  4406                           
  4407                           ;led.c: 115: if(flag==1)
  4408  063A  0B74               	decfsz	latch_rclk@flag,w
  4409  063B  2E40               	goto	l3311
  4410                           
  4411                           ;led.c: 116: {
  4412                           ;led.c: 117: RA5 = 1;
  4413  063C  1283               	bcf	3,5	;RP0=0, select bank0
  4414  063D  1303               	bcf	3,6	;RP1=0, select bank0
  4415  063E  1685               	bsf	5,5
  4416                           
  4417                           ;led.c: 118: }
  4418  063F  2E43               	goto	l3312
  4419  0640                     l3311:	
  4420                           
  4421                           ;led.c: 119: else
  4422                           ;led.c: 120: {
  4423                           ;led.c: 121: RA4 = 1;
  4424  0640  1283               	bcf	3,5	;RP0=0, select bank0
  4425  0641  1303               	bcf	3,6	;RP1=0, select bank0
  4426  0642  1605               	bsf	5,4
  4427  0643                     l3312:	
  4428  0643  0000               	nop	;#
  4429  0644  0000               	nop	;#
  4430                           
  4431                           ;led.c: 124: if(flag==1)
  4432  0645  0B74               	decfsz	latch_rclk@flag,w
  4433  0646  2E4B               	goto	l3313
  4434                           
  4435                           ;led.c: 125: {
  4436                           ;led.c: 126: RA5 = 0;
  4437  0647  1283               	bcf	3,5	;RP0=0, select bank0
  4438  0648  1303               	bcf	3,6	;RP1=0, select bank0
  4439  0649  1285               	bcf	5,5
  4440                           
  4441                           ;led.c: 127: }
  4442  064A  0008               	return
  4443  064B                     l3313:	
  4444                           
  4445                           ;led.c: 128: else
  4446                           ;led.c: 129: {
  4447                           ;led.c: 130: RA4 = 0;
  4448  064B  1283               	bcf	3,5	;RP0=0, select bank0
  4449  064C  1303               	bcf	3,6	;RP1=0, select bank0
  4450  064D  1205               	bcf	5,4
  4451  064E  0008               	return
  4452  064F                     __end_of_latch_rclk:	
  4453  064F                     PL2:	
  4454  064F  0080               	movwf	0
  4455  0650  0AB9               	incf	up_time2@i,f
  4456  0651  0839               	movf	up_time2@i,w
  4457  0652  3E30               	addlw	up_time2@date& (0+255)
  4458  0653  0084               	movwf	4
  4459  0654  340A               	retlw	10
  4460  0655                     PL4:	
  4461  0655  0080               	movwf	0
  4462  0656  0AB6               	incf	up_time1@i,f
  4463  0657  0836               	movf	up_time1@i,w
  4464  0658  3E30               	addlw	up_time1@date& (0+255)
  4465  0659  0084               	movwf	4
  4466  065A  340A               	retlw	10
  4467  065B                     PL5:	
  4468  065B  01E3               	clrf	_old_date+3
  4469  065C  0AE3               	incf	_old_date+3,f
  4470  065D  01E2               	clrf	_old_date+2
  4471  065E  0AE2               	incf	_old_date+2,f
  4472  065F  01E1               	clrf	_old_date+1
  4473  0660  0AE1               	incf	_old_date+1,f
  4474  0661  01E0               	clrf	_old_date
  4475  0662  01DD               	clrf	_old_time
  4476  0663  01DE               	clrf	_old_time+1
  4477  0664  01DF               	clrf	_old_time+2
  4478  0665  0008               	return
  4479  0666                     PL11:	
  4480  0666  00A5               	movwf	?_up_date+1
  4481  0667  01A6               	clrf	?_up_date+2
  4482  0668  0AA6               	incf	?_up_date+2,f
  4483  0669  3430               	retlw	up_time1@date& (0+255)
  4484                           
  4485                           	psect	text1350
  4486  0DEA                     __ptext1350:	
  4487 ;; =============== function _get_time ends ============
  4488                           
  4489                           
  4490 ;; *************** function _ds3231_init *****************
  4491 ;; Defined at:
  4492 ;;		line 15 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\DS3231.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  ds3231_state    1    2[BANK0 ] unsigned char 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;		None               void
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0, pclath, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : 17F/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: FFE00/0
  4505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4506 ;;      Params:         0       0       0       0
  4507 ;;      Locals:         0       1       0       0
  4508 ;;      Temps:          0       0       0       0
  4509 ;;      Totals:         0       1       0       0
  4510 ;;Total ram usage:        1 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    4
  4513 ;; This function calls:
  4514 ;;		_readbyte
  4515 ;;		_writebyte
  4516 ;; This function is called by:
  4517 ;;		_main
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520  0DEA                     _ds3231_init:	
  4521                           
  4522                           ;DS3231.c: 19: UINT8 ds3231_state;
  4523                           ;DS3231.c: 20: TRISC3 = 0;
  4524                           
  4525                           ; Regs used in _ds3231_init: [wreg+status,2+status,0+pclath+cstack]
  4526  0DEA  1683               	bsf	3,5	;RP0=1, select bank1
  4527  0DEB  1187               	bcf	7,3
  4528                           
  4529                           ;DS3231.c: 37: ntp_info.time_zone = 0x88;
  4530  0DEC  3088               	movlw	136
  4531  0DED  00BA               	movwf	(_ntp_info^(0+128)+2)
  4532                           
  4533                           ;DS3231.c: 41: ds3231_state = readbyte(0x0E);
  4534  0DEE  300E               	movlw	14
  4535  0DEF  26AF  158A         	fcall	_readbyte
  4536  0DF1  00A2               	movwf	ds3231_init@ds3231_state
  4537                           
  4538                           ;DS3231.c: 42: writebyte(0x0E,ds3231_state & 0x7f);
  4539  0DF2  00F6               	movwf	?_writebyte
  4540  0DF3  13F6               	bcf	?_writebyte,7
  4541  0DF4  300E               	movlw	14
  4542  0DF5  2DF6               	ljmp	_writebyte
  4543  0DF6                     __end_of_ds3231_init:	
  4544  0DF6                     __ptext1358:	
  4545 ;; =============== function _hex_dec ends ============
  4546                           
  4547                           
  4548 ;; *************** function _writebyte *****************
  4549 ;; Defined at:
  4550 ;;		line 120 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\rtc.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  address         1    wreg     unsigned char 
  4553 ;;  data            1    6[COMMON] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  address         1    0[BANK0 ] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;		None               void
  4558 ;; Registers used:
  4559 ;;		wreg, status,2, status,0, pclath, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 60/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: FFE00/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4565 ;;      Params:         1       0       0       0
  4566 ;;      Locals:         0       1       0       0
  4567 ;;      Temps:          0       0       0       0
  4568 ;;      Totals:         1       1       0       0
  4569 ;;Total ram usage:        2 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    3
  4572 ;; This function calls:
  4573 ;;		_start_i2c
  4574 ;;		_i2c_send
  4575 ;;		_waitack_i2c
  4576 ;; This function is called by:
  4577 ;;		_ds3231_init
  4578 ;;		_get_time
  4579 ;;		_settime
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582  0DF6                     _writebyte:	
  4583                           
  4584                           ; Regs used in _writebyte: [wreg+status,2+status,0+pclath+cstack]
  4585                           ;writebyte@address stored from wreg
  4586  0DF6  00A0               	movwf	writebyte@address
  4587                           
  4588                           ;rtc.c: 121: start_i2c();
  4589  0DF7  2716  158A         	fcall	_start_i2c
  4590                           
  4591                           ;rtc.c: 122: i2c_send(0xD0);
  4592  0DF9  30D0               	movlw	208
  4593  0DFA  26FA  158A         	fcall	_i2c_send
  4594                           
  4595                           ;rtc.c: 123: waitack_i2c();
  4596  0DFC  26D8  158A         	fcall	_waitack_i2c
  4597                           
  4598                           ;rtc.c: 124: i2c_send(address);
  4599  0DFE  1283               	bcf	3,5	;RP0=0, select bank0
  4600  0DFF  1303               	bcf	3,6	;RP1=0, select bank0
  4601  0E00  0820               	movf	writebyte@address,w
  4602  0E01  26FA  158A         	fcall	_i2c_send
  4603                           
  4604                           ;rtc.c: 125: waitack_i2c();
  4605  0E03  26D8  158A         	fcall	_waitack_i2c
  4606                           
  4607                           ;rtc.c: 126: i2c_send(data);
  4608  0E05  0876               	movf	writebyte@data,w
  4609  0E06  26FA  158A         	fcall	_i2c_send
  4610                           
  4611                           ;rtc.c: 127: waitack_i2c();
  4612  0E08  26D8               	fcall	_waitack_i2c
  4613                           
  4614                           ;rtc.c: 128: RC4=0; RC3=1; asm("nop");asm("nop");; RC4=1;asm("nop");asm("nop");;
  4615  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  4616  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  4617  0E0B  1207               	bcf	7,4
  4618  0E0C  1587               	bsf	7,3
  4619  0E0D  0000               	nop	;#
  4620  0E0E  0000               	nop	;#
  4621  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  4622  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  4623  0E11  1607               	bsf	7,4
  4624  0E12  0000               	nop	;#
  4625  0E13  0000               	nop	;#
  4626  0E14  0008               	return
  4627  0E15                     __end_of_writebyte:	
  4628  0E15                     __ptext1349:	
  4629 ;; =============== function _settime ends ============
  4630                           
  4631                           
  4632 ;; *************** function _get_time *****************
  4633 ;; Defined at:
  4634 ;;		line 47 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\DS3231.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;		None
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  ds3231_time     7   28[BANK0 ] unsigned char [7]
  4639 ;;  ds3231_time3    7   21[BANK0 ] unsigned char [7]
  4640 ;;  ds3231_time2    7   14[BANK0 ] unsigned char [7]
  4641 ;;  i               1   36[BANK0 ] unsigned char 
  4642 ;;  ds3231_state    1   35[BANK0 ] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;		None               void
  4645 ;; Registers used:
  4646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 60/0
  4649 ;;		On exit  : 160/100
  4650 ;;		Unchanged: FFE00/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4652 ;;      Params:         0       0       0       0
  4653 ;;      Locals:         0      23       0       0
  4654 ;;      Temps:          0       1       0       0
  4655 ;;      Totals:         0      24       0       0
  4656 ;;Total ram usage:       24 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    4
  4659 ;; This function calls:
  4660 ;;		_readbyte
  4661 ;;		_writebyte
  4662 ;;		_hex_dec
  4663 ;;		_WeekDay20
  4664 ;;		_calc_zone
  4665 ;; This function is called by:
  4666 ;;		_main
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669  0E15                     _get_time:	
  4670                           
  4671                           ;DS3231.c: 49: UINT8 ds3231_state,ds3231_time[7],ds3231_time2[7],ds3231_time3[7],i;
  4672                           ;DS3231.c: 50: ds3231_state = readbyte(0x0F);
  4673                           
  4674                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4675  0E15  300F               	movlw	15
  4676  0E16  26AF  158A         	fcall	_readbyte
  4677  0E18  00C3               	movwf	get_time@ds3231_state
  4678                           
  4679                           ;DS3231.c: 51: if(ds3231_state & 0x80)
  4680  0E19  1FC3               	btfss	get_time@ds3231_state,7
  4681  0E1A  2E21               	goto	l13570
  4682                           
  4683                           ;DS3231.c: 52: {
  4684                           ;DS3231.c: 53: ds3231_state = ds3231_state & 0x7f;
  4685  0E1B  13C3               	bcf	get_time@ds3231_state,7
  4686                           
  4687                           ;DS3231.c: 54: writebyte(0x0F,ds3231_state);
  4688  0E1C  0843               	movf	get_time@ds3231_state,w
  4689  0E1D  00F6               	movwf	?_writebyte
  4690  0E1E  300F               	movlw	15
  4691  0E1F  25F6  158A         	fcall	_writebyte
  4692  0E21                     l13570:	
  4693                           
  4694                           ;DS3231.c: 55: }
  4695                           ;DS3231.c: 57: for(i=0;i<7;i++)
  4696  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  4697  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  4698  0E23  01C4               	clrf	get_time@i
  4699  0E24                     l13576:	
  4700                           
  4701                           ;DS3231.c: 58: {
  4702                           ;DS3231.c: 59: ds3231_time[i] = readbyte(0x00+i);
  4703  0E24  0844               	movf	get_time@i,w
  4704  0E25  3E3C               	addlw	get_time@ds3231_time& (0+255)
  4705  0E26  0084               	movwf	4
  4706  0E27  0844               	movf	get_time@i,w
  4707  0E28  26AF  158A         	fcall	_readbyte
  4708  0E2A  1383               	bcf	3,7	;select IRP bank0
  4709  0E2B  0080               	movwf	0
  4710                           
  4711                           ;DS3231.c: 60: ds3231_time2[i] = readbyte(0x00+i);
  4712  0E2C  0844               	movf	get_time@i,w
  4713  0E2D  3E2E               	addlw	get_time@ds3231_time2& (0+255)
  4714  0E2E  0084               	movwf	4
  4715  0E2F  0844               	movf	get_time@i,w
  4716  0E30  26AF  158A         	fcall	_readbyte
  4717  0E32  1383               	bcf	3,7	;select IRP bank0
  4718  0E33  0080               	movwf	0
  4719                           
  4720                           ;DS3231.c: 61: ds3231_time3[i] = readbyte(0x00+i);
  4721  0E34  0844               	movf	get_time@i,w
  4722  0E35  3E35               	addlw	get_time@ds3231_time3& (0+255)
  4723  0E36  0084               	movwf	4
  4724  0E37  0844               	movf	get_time@i,w
  4725  0E38  26AF  158A         	fcall	_readbyte
  4726  0E3A  1383               	bcf	3,7	;select IRP bank0
  4727  0E3B  0080               	movwf	0
  4728                           
  4729                           ;DS3231.c: 63: ds3231_time[i] = hex_dec(ds3231_time[i]);
  4730  0E3C  0844               	movf	get_time@i,w
  4731  0E3D  3E3C               	addlw	get_time@ds3231_time& (0+255)
  4732  0E3E  0084               	movwf	4
  4733  0E3F  0800               	movf	0,w
  4734  0E40  2722  158A         	fcall	_hex_dec
  4735  0E42  00AD               	movwf	??_get_time
  4736  0E43  0844               	movf	get_time@i,w
  4737  0E44  3E3C               	addlw	get_time@ds3231_time& (0+255)
  4738  0E45  0084               	movwf	4
  4739  0E46  082D               	movf	??_get_time,w
  4740  0E47  0080               	movwf	0
  4741                           
  4742                           ;DS3231.c: 64: ds3231_time2[i] = hex_dec(ds3231_time2[i]);
  4743  0E48  0844               	movf	get_time@i,w
  4744  0E49  3E2E               	addlw	get_time@ds3231_time2& (0+255)
  4745  0E4A  0084               	movwf	4
  4746  0E4B  0800               	movf	0,w
  4747  0E4C  2722  158A         	fcall	_hex_dec
  4748  0E4E  00AD               	movwf	??_get_time
  4749  0E4F  0844               	movf	get_time@i,w
  4750  0E50  3E2E               	addlw	get_time@ds3231_time2& (0+255)
  4751  0E51  0084               	movwf	4
  4752  0E52  082D               	movf	??_get_time,w
  4753  0E53  0080               	movwf	0
  4754                           
  4755                           ;DS3231.c: 65: ds3231_time3[i] = hex_dec(ds3231_time3[i]);
  4756  0E54  0844               	movf	get_time@i,w
  4757  0E55  3E35               	addlw	get_time@ds3231_time3& (0+255)
  4758  0E56  0084               	movwf	4
  4759  0E57  0800               	movf	0,w
  4760  0E58  2722  158A         	fcall	_hex_dec
  4761  0E5A  00AD               	movwf	??_get_time
  4762  0E5B  0844               	movf	get_time@i,w
  4763  0E5C  3E35               	addlw	get_time@ds3231_time3& (0+255)
  4764  0E5D  0084               	movwf	4
  4765  0E5E  082D               	movf	??_get_time,w
  4766  0E5F  0080               	movwf	0
  4767  0E60  0AC4               	incf	get_time@i,f
  4768  0E61  3007               	movlw	7
  4769  0E62  0244               	subwf	get_time@i,w
  4770  0E63  1C03               	skipc
  4771  0E64  2E24               	goto	l13576
  4772                           
  4773                           ;DS3231.c: 67: }
  4774                           ;DS3231.c: 68: for(i=0;i<7;i++)
  4775  0E65  01C4               	clrf	get_time@i
  4776  0E66                     l13588:	
  4777                           
  4778                           ;DS3231.c: 69: {
  4779                           ;DS3231.c: 70: if((ds3231_time[i] !=ds3231_time2[i]) || (ds3231_time[i] !=ds3231_time3[i
      +                          ]))
  4780  0E66  0844               	movf	get_time@i,w
  4781  0E67  3E2E               	addlw	get_time@ds3231_time2& (0+255)
  4782  0E68  0084               	movwf	4
  4783  0E69  0800               	movf	0,w
  4784  0E6A  00AD               	movwf	??_get_time
  4785  0E6B  27F6  158A         	fcall	PL7	;call to abstracted procedure
  4786  0E6D  1D03               	skipz
  4787  0E6E  2E78               	goto	l2470
  4788  0E6F  0844               	movf	get_time@i,w
  4789  0E70  3E35               	addlw	get_time@ds3231_time3& (0+255)
  4790  0E71  0084               	movwf	4
  4791  0E72  0800               	movf	0,w
  4792  0E73  00AD               	movwf	??_get_time
  4793  0E74  27F6  158A         	fcall	PL7	;call to abstracted procedure
  4794  0E76  1903               	skipnz
  4795  0E77  2E7B               	goto	l13592
  4796  0E78                     l2470:	
  4797                           
  4798                           ;DS3231.c: 71: {
  4799                           ;DS3231.c: 72: TMR1ON = 0;GIE = 0;PEIE = 0;
  4800  0E78  1010               	bcf	16,0
  4801  0E79  138B               	bcf	11,7
  4802  0E7A  130B               	bcf	11,6
  4803  0E7B                     l13592:	
  4804  0E7B  0AC4               	incf	get_time@i,f
  4805  0E7C  3007               	movlw	7
  4806  0E7D  0244               	subwf	get_time@i,w
  4807  0E7E  1C03               	skipc
  4808  0E7F  2E66               	goto	l13588
  4809                           
  4810                           ;DS3231.c: 73: }
  4811                           ;DS3231.c: 74: }
  4812                           ;DS3231.c: 76: TMR1H=0x00;
  4813  0E80  018F               	clrf	15	;volatile
  4814                           
  4815                           ;DS3231.c: 77: TMR1L=0x00;
  4816  0E81  018E               	clrf	14	;volatile
  4817                           
  4818                           ;DS3231.c: 78: old_time.sec = ds3231_time[0] ;
  4819  0E82  083C               	movf	get_time@ds3231_time,w
  4820  0E83  00DF               	movwf	_old_time+2
  4821                           
  4822                           ;DS3231.c: 79: old_time.min = ds3231_time[1] ;
  4823  0E84  083D               	movf	get_time@ds3231_time+1,w
  4824  0E85  00DE               	movwf	_old_time+1
  4825                           
  4826                           ;DS3231.c: 80: old_time.hour = ds3231_time[2] ;
  4827  0E86  083E               	movf	get_time@ds3231_time+2,w
  4828  0E87  00DD               	movwf	_old_time
  4829                           
  4830                           ;DS3231.c: 83: old_date.date = ds3231_time[4];
  4831  0E88  0840               	movf	get_time@ds3231_time+4,w
  4832  0E89  00E1               	movwf	_old_date+1
  4833                           
  4834                           ;DS3231.c: 84: old_date.month = ds3231_time[5];
  4835  0E8A  0841               	movf	get_time@ds3231_time+5,w
  4836  0E8B  00E2               	movwf	_old_date+2
  4837                           
  4838                           ;DS3231.c: 85: old_date.year = ds3231_time[6];
  4839  0E8C  0842               	movf	get_time@ds3231_time+6,w
  4840  0E8D  00E3               	movwf	_old_date+3
  4841                           
  4842                           ;DS3231.c: 87: old_date.day = WeekDay20(ds3231_time[6],ds3231_time[5],ds3231_time[4]);
  4843  0E8E  0841               	movf	get_time@ds3231_time+5,w
  4844  0E8F  00A4               	movwf	?_WeekDay20
  4845  0E90  0840               	movf	get_time@ds3231_time+4,w
  4846  0E91  00A5               	movwf	?_WeekDay20+1
  4847  0E92  0842               	movf	get_time@ds3231_time+6,w
  4848  0E93  2752  158A         	fcall	_WeekDay20
  4849  0E95  00E0               	movwf	_old_date
  4850                           
  4851                           ;DS3231.c: 89: if(old_time.sec<=59 && old_time.min<=59 && old_time.hour<=23 && old_date.
      +                          date<=31 && old_date.month<=12 && old_date.year<=99)
  4852  0E96  303C               	movlw	60
  4853  0E97  025F               	subwf	_old_time+2,w
  4854  0E98  1803               	skipnc
  4855  0E99  0008               	return
  4856  0E9A  303C               	movlw	60
  4857  0E9B  025E               	subwf	_old_time+1,w
  4858  0E9C  1803               	skipnc
  4859  0E9D  0008               	return
  4860  0E9E  3018               	movlw	24
  4861  0E9F  025D               	subwf	_old_time,w
  4862  0EA0  1803               	skipnc
  4863  0EA1  0008               	return
  4864  0EA2  3020               	movlw	32
  4865  0EA3  0261               	subwf	_old_date+1,w
  4866  0EA4  1803               	skipnc
  4867  0EA5  0008               	return
  4868  0EA6  300D               	movlw	13
  4869  0EA7  0262               	subwf	_old_date+2,w
  4870  0EA8  1803               	skipnc
  4871  0EA9  0008               	return
  4872  0EAA  3064               	movlw	100
  4873  0EAB  0263               	subwf	_old_date+3,w
  4874  0EAC  1803               	skipnc
  4875  0EAD  0008               	return
  4876                           
  4877                           ;DS3231.c: 92: {
  4878                           ;DS3231.c: 93: calc_zone();
  4879  0EAE  2F97               	ljmp	l13084
  4880  0EAF                     __end_of_get_time:	
  4881  0EAF                     __ptext1359:	
  4882 ;; =============== function _writebyte ends ============
  4883                           
  4884                           
  4885 ;; *************** function _readbyte *****************
  4886 ;; Defined at:
  4887 ;;		line 133 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\rtc.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  address         1    wreg     unsigned char 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  address         1    0[BANK0 ] unsigned char 
  4892 ;;  recv_data       1    1[BANK0 ] unsigned char 
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  1    wreg      unsigned char 
  4895 ;; Registers used:
  4896 ;;		wreg, status,2, status,0, pclath, cstack
  4897 ;; Tracked objects:
  4898 ;;		On entry : 40/0
  4899 ;;		On exit  : 60/0
  4900 ;;		Unchanged: FFE00/0
  4901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4902 ;;      Params:         0       0       0       0
  4903 ;;      Locals:         0       2       0       0
  4904 ;;      Temps:          0       0       0       0
  4905 ;;      Totals:         0       2       0       0
  4906 ;;Total ram usage:        2 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; Hardware stack levels required when called:    3
  4909 ;; This function calls:
  4910 ;;		_start_i2c
  4911 ;;		_i2c_send
  4912 ;;		_waitack_i2c
  4913 ;;		_i2c_read
  4914 ;;		_sendnotack_i2c
  4915 ;; This function is called by:
  4916 ;;		_ds3231_init
  4917 ;;		_get_time
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920  0EAF                     _readbyte:	
  4921                           
  4922                           ; Regs used in _readbyte: [wreg+status,2+status,0+pclath+cstack]
  4923                           ;readbyte@address stored from wreg
  4924  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  4925  0EB0  00A0               	movwf	readbyte@address
  4926                           
  4927                           ;rtc.c: 136: start_i2c();
  4928  0EB1  2716  158A         	fcall	_start_i2c
  4929                           
  4930                           ;rtc.c: 137: i2c_send(0xD0);
  4931  0EB3  30D0               	movlw	208
  4932  0EB4  26FA  158A         	fcall	_i2c_send
  4933                           
  4934                           ;rtc.c: 138: waitack_i2c();
  4935  0EB6  26D8  158A         	fcall	_waitack_i2c
  4936                           
  4937                           ;rtc.c: 140: i2c_send(address);
  4938  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  4940  0EBA  0820               	movf	readbyte@address,w
  4941  0EBB  26FA  158A         	fcall	_i2c_send
  4942                           
  4943                           ;rtc.c: 141: waitack_i2c();
  4944  0EBD  26D8  158A         	fcall	_waitack_i2c
  4945                           
  4946                           ;rtc.c: 143: start_i2c();
  4947  0EBF  2716  158A         	fcall	_start_i2c
  4948                           
  4949                           ;rtc.c: 144: i2c_send(0xD0+0x01);
  4950  0EC1  30D1               	movlw	209
  4951  0EC2  26FA  158A         	fcall	_i2c_send
  4952                           
  4953                           ;rtc.c: 145: waitack_i2c();
  4954  0EC4  26D8  158A         	fcall	_waitack_i2c
  4955                           
  4956                           ;rtc.c: 147: recv_data=i2c_read();
  4957  0EC6  272D  158A         	fcall	_i2c_read
  4958  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  4959  0EC9  00A1               	movwf	readbyte@recv_data
  4960                           
  4961                           ;rtc.c: 148: sendnotack_i2c();
  4962  0ECA  27A2               	fcall	_sendnotack_i2c
  4963                           
  4964                           ;rtc.c: 150: RC4=0; RC3=1; asm("nop");asm("nop");; RC4=1;asm("nop");asm("nop");;
  4965  0ECB  1207               	bcf	7,4
  4966  0ECC  1587               	bsf	7,3
  4967  0ECD  0000               	nop	;#
  4968  0ECE  0000               	nop	;#
  4969  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  4970  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0ED1  1607               	bsf	7,4
  4972  0ED2  0000               	nop	;#
  4973  0ED3  0000               	nop	;#
  4974                           
  4975                           ;rtc.c: 151: return(recv_data);
  4976  0ED4  1283               	bcf	3,5	;RP0=0, select bank0
  4977  0ED5  1303               	bcf	3,6	;RP1=0, select bank0
  4978  0ED6  0821               	movf	readbyte@recv_data,w
  4979  0ED7  0008               	return
  4980  0ED8                     __end_of_readbyte:	
  4981  0ED8                     __ptext1370:	
  4982 ;; =============== function _sendnotack_i2c ends ============
  4983                           
  4984                           
  4985 ;; *************** function _waitack_i2c *****************
  4986 ;; Defined at:
  4987 ;;		line 24 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\rtc.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  errtime         1    4[COMMON] unsigned char 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;		None               void
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, status,0
  4996 ;; Tracked objects:
  4997 ;;		On entry : 60/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: FFE00/0
  5000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5001 ;;      Params:         0       0       0       0
  5002 ;;      Locals:         1       0       0       0
  5003 ;;      Temps:          0       0       0       0
  5004 ;;      Totals:         1       0       0       0
  5005 ;;Total ram usage:        1 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    2
  5008 ;; This function calls:
  5009 ;;		Nothing
  5010 ;; This function is called by:
  5011 ;;		_writebyte
  5012 ;;		_readbyte
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015  0ED8                     _waitack_i2c:	
  5016                           
  5017                           ;rtc.c: 25: UINT8 errtime=200;
  5018                           
  5019                           ; Regs used in _waitack_i2c: [wreg+status,2+status,0]
  5020  0ED8  30C8               	movlw	200
  5021  0ED9  00F4               	movwf	waitack_i2c@errtime
  5022                           
  5023                           ;rtc.c: 26: RC3 = 0;
  5024  0EDA  1187               	bcf	7,3
  5025                           
  5026                           ;rtc.c: 27: RC4 = 1;
  5027  0EDB  1607               	bsf	7,4
  5028                           
  5029                           ;rtc.c: 28: TRISC4 = 1;
  5030  0EDC  1683               	bsf	3,5	;RP0=1, select bank1
  5031  0EDD  1607               	bsf	7,4
  5032  0EDE  0000               	nop	;#
  5033  0EDF  0000               	nop	;#
  5034                           
  5035                           ;rtc.c: 30: RC3 = 1;
  5036  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  5037  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  5038  0EE2  1587               	bsf	7,3
  5039  0EE3  0000               	nop	;#
  5040  0EE4  0000               	nop	;#
  5041  0EE5                     l5997:	
  5042                           ;rtc.c: 32: while(RC4)
  5043                           
  5044  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  5045  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  5046  0EE7  1E07               	btfss	7,4
  5047  0EE8  2EF5               	goto	l6001
  5048                           
  5049                           ;rtc.c: 33: {
  5050                           ;rtc.c: 34: errtime--;
  5051  0EE9  0BF4               	decfsz	waitack_i2c@errtime,f
  5052                           
  5053                           ;rtc.c: 35: if(errtime == 0)
  5054  0EEA  2EE5               	goto	l5997
  5055                           
  5056                           ;rtc.c: 36: {
  5057                           ;rtc.c: 37: RC4=0; RC3=1; asm("nop");asm("nop");; RC4=1;asm("nop");asm("nop");;
  5058  0EEB  1207               	bcf	7,4
  5059  0EEC  1587               	bsf	7,3
  5060  0EED  0000               	nop	;#
  5061  0EEE  0000               	nop	;#
  5062  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  5063  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  5064  0EF1  1607               	bsf	7,4
  5065  0EF2  0000               	nop	;#
  5066  0EF3  0000               	nop	;#
  5067                           
  5068                           ;rtc.c: 38: return;
  5069  0EF4  0008               	return
  5070  0EF5                     l6001:	
  5071                           
  5072                           ;rtc.c: 39: }
  5073                           ;rtc.c: 40: }
  5074                           ;rtc.c: 42: TRISC4 = 0;
  5075  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  5076  0EF6  1207               	bcf	7,4
  5077                           
  5078                           ;rtc.c: 43: RC3 = 0;
  5079  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  5080  0EF8  1187               	bcf	7,3
  5081  0EF9  0008               	return
  5082  0EFA                     __end_of_waitack_i2c:	
  5083  0EFA                     __ptext1368:	
  5084 ;; =============== function _i2c_read ends ============
  5085                           
  5086                           
  5087 ;; *************** function _i2c_send *****************
  5088 ;; Defined at:
  5089 ;;		line 68 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\rtc.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  send_data       1    wreg     unsigned char 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  send_data       1    4[COMMON] unsigned char 
  5094 ;;  count           1    5[COMMON] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;		None               void
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 60/0
  5102 ;;		Unchanged: FFE00/0
  5103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5104 ;;      Params:         0       0       0       0
  5105 ;;      Locals:         2       0       0       0
  5106 ;;      Temps:          0       0       0       0
  5107 ;;      Totals:         2       0       0       0
  5108 ;;Total ram usage:        2 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    2
  5111 ;; This function calls:
  5112 ;;		Nothing
  5113 ;; This function is called by:
  5114 ;;		_writebyte
  5115 ;;		_readbyte
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118  0EFA                     _i2c_send:	
  5119                           
  5120                           ; Regs used in _i2c_send: [wreg+status,2+status,0]
  5121                           ;i2c_send@send_data stored from wreg
  5122  0EFA  00F4               	movwf	i2c_send@send_data
  5123                           
  5124                           ;rtc.c: 69: UINT8 count;
  5125                           ;rtc.c: 70: for(count=0;count<8;count++)
  5126  0EFB  01F5               	clrf	i2c_send@count
  5127  0EFC                     l6010:	
  5128                           
  5129                           ;rtc.c: 71: {
  5130                           ;rtc.c: 72: RC3 = 0;
  5131  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  5132  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  5133  0EFE  1187               	bcf	7,3
  5134                           
  5135                           ;rtc.c: 73: if((send_data&0x80)==0x80)
  5136  0EFF  1FF4               	btfss	i2c_send@send_data,7
  5137  0F00  2F03               	goto	l6012
  5138                           
  5139                           ;rtc.c: 74: {
  5140                           ;rtc.c: 75: RC4=1;
  5141  0F01  1607               	bsf	7,4
  5142                           
  5143                           ;rtc.c: 76: }
  5144  0F02  2F04               	goto	l6013
  5145  0F03                     l6012:	
  5146                           
  5147                           ;rtc.c: 77: else
  5148                           ;rtc.c: 78: {
  5149                           ;rtc.c: 79: RC4=0;
  5150  0F03  1207               	bcf	7,4
  5151  0F04                     l6013:	
  5152                           
  5153                           ;rtc.c: 80: }
  5154                           ;rtc.c: 81: send_data<<=1;
  5155  0F04  1003               	clrc
  5156  0F05  0DF4               	rlf	i2c_send@send_data,f
  5157  0F06  0000               	nop	;#
  5158  0F07  0000               	nop	;#
  5159                           
  5160                           ;rtc.c: 83: RC3 = 1;
  5161  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  5162  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  5163  0F0A  1587               	bsf	7,3
  5164  0F0B  0000               	nop	;#
  5165  0F0C  0000               	nop	;#
  5166  0F0D  0AF5               	incf	i2c_send@count,f
  5167  0F0E  3008               	movlw	8
  5168  0F0F  0275               	subwf	i2c_send@count,w
  5169  0F10  1C03               	skipc
  5170  0F11  2EFC               	goto	l6010
  5171                           
  5172                           ;rtc.c: 85: }
  5173                           ;rtc.c: 86: RC3 = 0;
  5174  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  5175  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  5176  0F14  1187               	bcf	7,3
  5177  0F15  0008               	return
  5178  0F16                     __end_of_i2c_send:	
  5179  0F16                     __ptext1371:	
  5180 ;; =============== function _waitack_i2c ends ============
  5181                           
  5182                           
  5183 ;; *************** function _start_i2c *****************
  5184 ;; Defined at:
  5185 ;;		line 12 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\rtc.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;		None
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;		None
  5190 ;; Return value:  Size  Location     Type
  5191 ;;		None               void
  5192 ;; Registers used:
  5193 ;;		None
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 60/0
  5197 ;;		Unchanged: FFE00/0
  5198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5199 ;;      Params:         0       0       0       0
  5200 ;;      Locals:         0       0       0       0
  5201 ;;      Temps:          0       0       0       0
  5202 ;;      Totals:         0       0       0       0
  5203 ;;Total ram usage:        0 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; Hardware stack levels required when called:    2
  5206 ;; This function calls:
  5207 ;;		Nothing
  5208 ;; This function is called by:
  5209 ;;		_writebyte
  5210 ;;		_readbyte
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213  0F16                     _start_i2c:	
  5214                           
  5215                           ;rtc.c: 13: RC4=1;
  5216                           
  5217                           ; Regs used in _start_i2c: []
  5218  0F16  1283               	bcf	3,5	;RP0=0, select bank0
  5219  0F17  1303               	bcf	3,6	;RP1=0, select bank0
  5220  0F18  1607               	bsf	7,4
  5221                           
  5222                           ;rtc.c: 14: RC3=1;
  5223  0F19  1587               	bsf	7,3
  5224  0F1A  0000               	nop	;#
  5225  0F1B  0000               	nop	;#
  5226                           
  5227                           ;rtc.c: 16: RC4=0;
  5228  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  5229  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  5230  0F1E  1207               	bcf	7,4
  5231  0F1F  0000               	nop	;#
  5232  0F20  0000               	nop	;#
  5233                           
  5234                           ;rtc.c: 18: RC3=0;
  5235  0F21  2FFC               	ljmp	PL9	;call to abstracted procedure
  5236  0F22                     __end_of_start_i2c:	
  5237  0F22                     __ptext1357:	
  5238 ;; =============== function _WeekDay20 ends ============
  5239                           
  5240                           
  5241 ;; *************** function _hex_dec *****************
  5242 ;; Defined at:
  5243 ;;		line 140 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\DS3231.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  hex16           1    wreg     unsigned char 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  hex16           1    1[BANK0 ] unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      unsigned char 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 160/0
  5254 ;;		On exit  : 160/0
  5255 ;;		Unchanged: FFE9F/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5257 ;;      Params:         0       0       0       0
  5258 ;;      Locals:         0       1       0       0
  5259 ;;      Temps:          0       1       0       0
  5260 ;;      Totals:         0       2       0       0
  5261 ;;Total ram usage:        2 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    3
  5264 ;; This function calls:
  5265 ;;		___bmul
  5266 ;; This function is called by:
  5267 ;;		_get_time
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270  0F22                     _hex_dec:	
  5271                           
  5272                           ; Regs used in _hex_dec: [wreg+status,2+status,0+pclath+cstack]
  5273                           ;hex_dec@hex16 stored from wreg
  5274  0F22  00A1               	movwf	hex_dec@hex16
  5275                           
  5276                           ;DS3231.c: 141: return ((hex16/16)*10+(hex16%16));
  5277  0F23  300A               	movlw	10
  5278  0F24  00F4               	movwf	?___bmul
  5279  0F25  0E21               	swapf	hex_dec@hex16,w
  5280  0F26  390F               	andlw	15
  5281  0F27  27AB               	fcall	___bmul
  5282  0F28  00A0               	movwf	??_hex_dec
  5283  0F29  0821               	movf	hex_dec@hex16,w
  5284  0F2A  390F               	andlw	15
  5285  0F2B  0720               	addwf	??_hex_dec,w
  5286  0F2C  0008               	return
  5287  0F2D                     __end_of_hex_dec:	
  5288  0F2D                     __ptext1367:	
  5289 ;; =============== function ___bmul ends ============
  5290                           
  5291                           
  5292 ;; *************** function _i2c_read *****************
  5293 ;; Defined at:
  5294 ;;		line 91 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\rtc.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  count           1    5[COMMON] unsigned char 
  5299 ;;  dat             1    4[COMMON] unsigned char 
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      unsigned char 
  5302 ;; Registers used:
  5303 ;;		wreg, status,2, status,0
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 60/20
  5307 ;;		Unchanged: FFE00/0
  5308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5309 ;;      Params:         0       0       0       0
  5310 ;;      Locals:         2       0       0       0
  5311 ;;      Temps:          0       0       0       0
  5312 ;;      Totals:         2       0       0       0
  5313 ;;Total ram usage:        2 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    2
  5316 ;; This function calls:
  5317 ;;		Nothing
  5318 ;; This function is called by:
  5319 ;;		_readbyte
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322  0F2D                     _i2c_read:	
  5323                           
  5324                           ;rtc.c: 92: UINT8 count;
  5325                           ;rtc.c: 93: UINT8 dat = 0xff;
  5326                           
  5327                           ; Regs used in _i2c_read: [wreg+status,2+status,0]
  5328  0F2D  30FF               	movlw	255
  5329  0F2E  00F4               	movwf	i2c_read@dat
  5330                           
  5331                           ;rtc.c: 94: RC4=1;
  5332  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  5333  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  5334  0F31  1607               	bsf	7,4
  5335                           
  5336                           ;rtc.c: 95: RC4=1;
  5337  0F32  1607               	bsf	7,4
  5338                           
  5339                           ;rtc.c: 96: TRISC4 = 1;
  5340  0F33  1683               	bsf	3,5	;RP0=1, select bank1
  5341  0F34  1607               	bsf	7,4
  5342                           
  5343                           ;rtc.c: 97: for(count=0;count<8;count++)
  5344  0F35  01F5               	clrf	i2c_read@count
  5345                           
  5346                           ;rtc.c: 98: {
  5347                           ;rtc.c: 99: dat <<= 1;
  5348  0F36  1003               	clrc
  5349  0F37                     L25:	
  5350  0F37  0DF4               	rlf	i2c_read@dat,f
  5351                           
  5352                           ;rtc.c: 100: RC3 = 0;
  5353  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  5354  0F39  1187               	bcf	7,3
  5355  0F3A  0000               	nop	;#
  5356  0F3B  0000               	nop	;#
  5357                           
  5358                           ;rtc.c: 102: RC3 = 1;
  5359  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  5360  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  5361  0F3E  1587               	bsf	7,3
  5362  0F3F  0000               	nop	;#
  5363  0F40  0000               	nop	;#
  5364                           
  5365                           ;rtc.c: 104: if(RC4)
  5366  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  5367  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  5368  0F43  1E07               	btfss	7,4
  5369  0F44  2F47               	goto	l6019
  5370                           
  5371                           ;rtc.c: 105: {
  5372                           ;rtc.c: 106: dat|=0x01;
  5373  0F45  1474               	bsf	i2c_read@dat,0
  5374                           
  5375                           ;rtc.c: 107: }
  5376  0F46  2F48               	goto	l13226
  5377  0F47                     l6019:	
  5378                           
  5379                           ;rtc.c: 108: else
  5380                           ;rtc.c: 109: {
  5381                           ;rtc.c: 110: dat&=0xFE;
  5382  0F47  1074               	bcf	i2c_read@dat,0
  5383  0F48                     l13226:	
  5384  0F48  0AF5               	incf	i2c_read@count,f
  5385  0F49  3008               	movlw	8
  5386  0F4A  0275               	subwf	i2c_read@count,w
  5387  0F4B  1C03               	skipc
  5388  0F4C  2F37               	goto	L25
  5389                           
  5390                           ;rtc.c: 111: }
  5391                           ;rtc.c: 112: }
  5392                           ;rtc.c: 113: RC3 = 0;
  5393  0F4D  1187               	bcf	7,3
  5394                           
  5395                           ;rtc.c: 114: TRISC4 = 0;
  5396  0F4E  1683               	bsf	3,5	;RP0=1, select bank1
  5397  0F4F  1207               	bcf	7,4
  5398                           
  5399                           ;rtc.c: 115: return(dat);
  5400  0F50  0874               	movf	i2c_read@dat,w
  5401  0F51  0008               	return
  5402  0F52                     __end_of_i2c_read:	
  5403  0F52                     __ptext1356:	
  5404 ;; =============== function _dec_hex ends ============
  5405                           
  5406                           
  5407 ;; *************** function _WeekDay20 *****************
  5408 ;; Defined at:
  5409 ;;		line 26 in file "E:\cjbc_zmz\subClock\szz485_v1.5.01\source\week.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;  y               1    wreg     unsigned char 
  5412 ;;  m               1    4[BANK0 ] unsigned char 
  5413 ;;  d               1    5[BANK0 ] unsigned char 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  y               1   12[BANK0 ] unsigned char 
  5416 ;;  week            1   11[BANK0 ] unsigned char 
  5417 ;;  day             1   10[BANK0 ] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  1    wreg      unsigned char 
  5420 ;; Registers used:
  5421 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 60/100
  5424 ;;		On exit  : 160/100
  5425 ;;		Unchanged: FFE9F/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5427 ;;      Params:         0       2       0       0
  5428 ;;      Locals:         0       3       0       0
  5429 ;;      Temps:          0       4       0       0
  5430 ;;      Totals:         0       9       0       0
  5431 ;;Total ram usage:        9 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    3
  5434 ;; This function calls:
  5435 ;;		___awmod
  5436 ;; This function is called by:
  5437 ;;		_get_time
  5438 ;;		_main
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441  0F52                     _WeekDay20:	
  5442                           
  5443                           ; Regs used in _WeekDay20: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5444                           ;WeekDay20@y stored from wreg
  5445  0F52  00AC               	movwf	WeekDay20@y
  5446                           
  5447                           ;week.c: 27: unsigned char week, day;
  5448                           ;week.c: 29: day = WeekTab[m - 1];
  5449  0F53  0824               	movf	WeekDay20@m,w
  5450  0F54  3E2E               	addlw	(_WeekTab+-1)& (0+255)
  5451  0F55  0084               	movwf	4
  5452  0F56  1783               	bsf	3,7	;select IRP bank2
  5453  0F57  0800               	movf	0,w
  5454  0F58  00AA               	movwf	WeekDay20@day
  5455                           
  5456                           ;week.c: 30: week = day >> 5;
  5457  0F59  00A6               	movwf	??_WeekDay20
  5458  0F5A  3005               	movlw	5
  5459  0F5B                     u3645:	
  5460  0F5B  1003               	clrc
  5461  0F5C  0CA6               	rrf	??_WeekDay20,f
  5462  0F5D  3EFF               	addlw	-1
  5463  0F5E  1D03               	skipz
  5464  0F5F  2F5B               	goto	u3645
  5465  0F60  0826               	movf	??_WeekDay20,w
  5466  0F61  00AB               	movwf	WeekDay20@week
  5467                           
  5468                           ;week.c: 31: day &= 0x1f;
  5469  0F62  301F               	movlw	31
  5470  0F63  05AA               	andwf	WeekDay20@day,f
  5471                           
  5472                           ;week.c: 32: if ((m < 3) && (y & 0x03)){
  5473  0F64  3003               	movlw	3
  5474  0F65  0224               	subwf	WeekDay20@m,w
  5475  0F66  082C               	movf	WeekDay20@y,w
  5476  0F67  1803               	skipnc
  5477  0F68  2F73               	goto	L18
  5478  0F69  3903               	andlw	3
  5479  0F6A  1903               	btfsc	3,2
  5480  0F6B  2F72               	goto	l13448
  5481                           
  5482                           ;week.c: 33: if (m == 2) day--;
  5483  0F6C  0824               	movf	WeekDay20@m,w
  5484  0F6D  3A02               	xorlw	2
  5485  0F6E  1D03               	skipz
  5486  0F6F  2F71               	goto	l9172
  5487  0F70  03AA               	decf	WeekDay20@day,f
  5488  0F71                     l9172:	
  5489                           
  5490                           ;week.c: 34: week++;
  5491  0F71  0AAB               	incf	WeekDay20@week,f
  5492  0F72                     l13448:	
  5493                           
  5494                           ;week.c: 35: }
  5495                           ;week.c: 36: y = y + (y >> 2);
  5496  0F72  082C               	movf	WeekDay20@y,w
  5497  0F73                     L18:	
  5498  0F73  00A6               	movwf	??_WeekDay20
  5499  0F74  1003               	clrc
  5500  0F75  0CA6               	rrf	??_WeekDay20,f
  5501  0F76  1003               	clrc
  5502  0F77  0CA6               	rrf	??_WeekDay20,f
  5503  0F78  082C               	movf	WeekDay20@y,w
  5504  0F79  0726               	addwf	??_WeekDay20,w
  5505  0F7A  00AC               	movwf	WeekDay20@y
  5506                           
  5507                           ;week.c: 37: week = (week + y + d + 2) % 7;
  5508  0F7B  3007               	movlw	7
  5509  0F7C  00A0               	movwf	?___awmod
  5510  0F7D  01A1               	clrf	?___awmod+1
  5511  0F7E  082B               	movf	WeekDay20@week,w
  5512  0F7F  072C               	addwf	WeekDay20@y,w
  5513  0F80  00A6               	movwf	??_WeekDay20
  5514  0F81  01A7               	clrf	??_WeekDay20+1
  5515  0F82  0DA7               	rlf	??_WeekDay20+1,f
  5516  0F83  0825               	movf	WeekDay20@d,w
  5517  0F84  0726               	addwf	??_WeekDay20,w
  5518  0F85  00A8               	movwf	??_WeekDay20+2
  5519  0F86  3000               	movlw	0
  5520  0F87  1803               	skipnc
  5521  0F88  3001               	movlw	1
  5522  0F89  0727               	addwf	??_WeekDay20+1,w
  5523  0F8A  00A9               	movwf	??_WeekDay20+3
  5524  0F8B  0828               	movf	??_WeekDay20+2,w
  5525  0F8C  3E02               	addlw	2
  5526  0F8D  00A2               	movwf	?___awmod+2
  5527  0F8E  0829               	movf	??_WeekDay20+3,w
  5528  0F8F  1803               	skipnc
  5529  0F90  3E01               	addlw	1
  5530  0F91  3E00               	addlw	0
  5531  0F92  00A3               	movwf	?___awmod+3
  5532  0F93  27B9               	fcall	___awmod
  5533  0F94  0820               	movf	?___awmod,w
  5534  0F95  00AB               	movwf	WeekDay20@week
  5535                           
  5536                           ;week.c: 39: return week;
  5537  0F96  0008               	return
  5538  0F97                     __end_of_WeekDay20:	
  5539  0F97                     __ptext1378:	
  5540 ;; =============== function _shift_srclk ends ============
  5541                           
  5542                           
  5543 ;; *************** function _calc_zone *****************
  5544 ;; Defined at:
  5545 ;;		line 151 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\DS3231.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;		None               void
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0
  5554 ;; Tracked objects:
  5555 ;;		On entry : 60/100
  5556 ;;		On exit  : 60/100
  5557 ;;		Unchanged: FFF9F/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5559 ;;      Params:         0       0       0       0
  5560 ;;      Locals:         0       0       0       0
  5561 ;;      Temps:          0       0       0       0
  5562 ;;      Totals:         0       0       0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    2
  5566 ;; This function calls:
  5567 ;;		Nothing
  5568 ;; This function is called by:
  5569 ;;		_get_time
  5570 ;;		_main
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573  0F97                     _calc_zone:	
  5574  0F97                     l13084:	
  5575                           ; Regs used in _calc_zone: [wreg+status,2+status,0]
  5576                           
  5577                           
  5578                           ;DS3231.c: 191: old_time.hour += 8;
  5579  0F97  3008               	movlw	8
  5580  0F98  07DD               	addwf	_old_time,f
  5581                           
  5582                           ;DS3231.c: 192: if(old_time.hour>=24)
  5583  0F99  3018               	movlw	24
  5584  0F9A  025D               	subwf	_old_time,w
  5585  0F9B  1C03               	skipc
  5586  0F9C  0008               	return
  5587                           
  5588                           ;DS3231.c: 193: {
  5589                           ;DS3231.c: 194: old_time.hour-=24;
  5590  0F9D  3018               	movlw	24
  5591  0F9E  02DD               	subwf	_old_time,f
  5592                           
  5593                           ;DS3231.c: 196: up_date_flag=1;
  5594  0F9F  01CF               	clrf	_up_date_flag
  5595  0FA0  0ACF               	incf	_up_date_flag,f
  5596  0FA1  0008               	return
  5597  0FA2                     __end_of_calc_zone:	
  5598  0FA2                     __ptext1369:	
  5599 ;; =============== function _i2c_send ends ============
  5600                           
  5601                           
  5602 ;; *************** function _sendnotack_i2c *****************
  5603 ;; Defined at:
  5604 ;;		line 58 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\rtc.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;		None
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;		None
  5609 ;; Return value:  Size  Location     Type
  5610 ;;		None               void
  5611 ;; Registers used:
  5612 ;;		None
  5613 ;; Tracked objects:
  5614 ;;		On entry : 60/0
  5615 ;;		On exit  : 60/0
  5616 ;;		Unchanged: FFE00/0
  5617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5618 ;;      Params:         0       0       0       0
  5619 ;;      Locals:         0       0       0       0
  5620 ;;      Temps:          0       0       0       0
  5621 ;;      Totals:         0       0       0       0
  5622 ;;Total ram usage:        0 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    2
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		_readbyte
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631  0FA2                     _sendnotack_i2c:	
  5632                           
  5633                           ;rtc.c: 59: RC4 =1 ;
  5634                           
  5635                           ; Regs used in _sendnotack_i2c: []
  5636  0FA2  1607               	bsf	7,4
  5637  0FA3  0000               	nop	;#
  5638  0FA4  0000               	nop	;#
  5639                           
  5640                           ;rtc.c: 61: RC3 = 1;
  5641  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  5642  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  5643  0FA7  1587               	bsf	7,3
  5644  0FA8  0000               	nop	;#
  5645  0FA9  0000               	nop	;#
  5646                           
  5647                           ;rtc.c: 63: RC3 = 0;
  5648  0FAA  2FFC               	ljmp	PL9	;call to abstracted procedure
  5649  0FAB                     __end_of_sendnotack_i2c:	
  5650  0FAB                     __ptext1366:	
  5651 ;; =============== function ___lwmod ends ============
  5652                           
  5653                           
  5654 ;; *************** function ___bmul *****************
  5655 ;; Defined at:
  5656 ;;		line 3 in file "bmul.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  multiplier      1    wreg     unsigned char 
  5659 ;;  multiplicand    1    4[COMMON] unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  multiplier      1    6[COMMON] unsigned char 
  5662 ;;  product         1    5[COMMON] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      unsigned char 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0
  5667 ;; Tracked objects:
  5668 ;;		On entry : 160/0
  5669 ;;		On exit  : 160/0
  5670 ;;		Unchanged: FFE9F/0
  5671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5672 ;;      Params:         1       0       0       0
  5673 ;;      Locals:         2       0       0       0
  5674 ;;      Temps:          0       0       0       0
  5675 ;;      Totals:         3       0       0       0
  5676 ;;Total ram usage:        3 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    2
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_hex_dec
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685  0FAB                     ___bmul:	
  5686                           
  5687                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5688                           ;___bmul@multiplier stored from wreg
  5689  0FAB  00F6               	movwf	___bmul@multiplier
  5690  0FAC  01F5               	clrf	___bmul@product
  5691  0FAD                     l13236:	
  5692  0FAD  0874               	movf	___bmul@multiplicand,w
  5693  0FAE  1876               	btfsc	___bmul@multiplier,0
  5694  0FAF  07F5               	addwf	___bmul@product,f
  5695  0FB0  1003               	clrc
  5696  0FB1  0DF4               	rlf	___bmul@multiplicand,f
  5697  0FB2  1003               	clrc
  5698  0FB3  0CF6               	rrf	___bmul@multiplier,f
  5699  0FB4  08F6               	movf	___bmul@multiplier,f
  5700  0FB5  1D03               	skipz
  5701  0FB6  2FAD               	goto	l13236
  5702  0FB7  0875               	movf	___bmul@product,w
  5703  0FB8  0008               	return
  5704  0FB9                     __end_of___bmul:	
  5705  0FB9                     __ptext1362:	
  5706 ;; =============== function _isleap ends ============
  5707                           
  5708                           
  5709 ;; *************** function ___awmod *****************
  5710 ;; Defined at:
  5711 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\sources\awmod.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  divisor         2    0[BANK0 ] int 
  5714 ;;  dividend        2    2[BANK0 ] int 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;  sign            1    5[COMMON] unsigned char 
  5717 ;;  counter         1    4[COMMON] unsigned char 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;                  2    0[BANK0 ] int 
  5720 ;; Registers used:
  5721 ;;		wreg, status,2, status,0
  5722 ;; Tracked objects:
  5723 ;;		On entry : 160/100
  5724 ;;		On exit  : 160/100
  5725 ;;		Unchanged: FFE9F/0
  5726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5727 ;;      Params:         0       4       0       0
  5728 ;;      Locals:         2       0       0       0
  5729 ;;      Temps:          0       0       0       0
  5730 ;;      Totals:         2       4       0       0
  5731 ;;Total ram usage:        6 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    2
  5734 ;; This function calls:
  5735 ;;		Nothing
  5736 ;; This function is called by:
  5737 ;;		_WeekDay20
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740  0FB9                     ___awmod:	
  5741                           
  5742                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5743  0FB9  01F5               	clrf	___awmod@sign
  5744  0FBA  1FA3               	btfss	___awmod@dividend+1,7
  5745  0FBB  2FC3               	goto	l13320
  5746  0FBC  09A2               	comf	___awmod@dividend,f
  5747  0FBD  09A3               	comf	___awmod@dividend+1,f
  5748  0FBE  0AA2               	incf	___awmod@dividend,f
  5749  0FBF  1903               	skipnz
  5750  0FC0  0AA3               	incf	___awmod@dividend+1,f
  5751  0FC1  01F5               	clrf	___awmod@sign
  5752  0FC2  0AF5               	incf	___awmod@sign,f
  5753  0FC3                     l13320:	
  5754  0FC3  1FA1               	btfss	___awmod@divisor+1,7
  5755  0FC4  2FCA               	goto	l13324
  5756  0FC5  09A0               	comf	___awmod@divisor,f
  5757  0FC6  09A1               	comf	___awmod@divisor+1,f
  5758  0FC7  0AA0               	incf	___awmod@divisor,f
  5759  0FC8  1903               	skipnz
  5760  0FC9  0AA1               	incf	___awmod@divisor+1,f
  5761  0FCA                     l13324:	
  5762  0FCA  0821               	movf	___awmod@divisor+1,w
  5763  0FCB  0420               	iorwf	___awmod@divisor,w
  5764  0FCC  1903               	skipnz
  5765  0FCD  2FE9               	goto	l13340
  5766  0FCE  01F4               	clrf	___awmod@counter
  5767  0FCF                     L19:	
  5768  0FCF  0AF4               	incf	___awmod@counter,f
  5769  0FD0  1BA1               	btfsc	___awmod@divisor+1,7
  5770  0FD1  2FD6               	goto	l13332
  5771  0FD2  1003               	clrc
  5772  0FD3  0DA0               	rlf	___awmod@divisor,f
  5773  0FD4  0DA1               	rlf	___awmod@divisor+1,f
  5774  0FD5  2FCF               	goto	L19
  5775  0FD6                     l13332:	
  5776  0FD6  0821               	movf	___awmod@divisor+1,w
  5777  0FD7  0223               	subwf	___awmod@dividend+1,w
  5778  0FD8  1D03               	skipz
  5779  0FD9  2FDC               	goto	u3575
  5780  0FDA  0820               	movf	___awmod@divisor,w
  5781  0FDB  0222               	subwf	___awmod@dividend,w
  5782  0FDC                     u3575:	
  5783  0FDC  1C03               	skipc
  5784  0FDD  2FE5               	goto	L20
  5785  0FDE  0820               	movf	___awmod@divisor,w
  5786  0FDF  02A2               	subwf	___awmod@dividend,f
  5787  0FE0  0821               	movf	___awmod@divisor+1,w
  5788  0FE1  1C03               	skipc
  5789  0FE2  03A3               	decf	___awmod@dividend+1,f
  5790  0FE3  02A3               	subwf	___awmod@dividend+1,f
  5791  0FE4  1003               	clrc
  5792  0FE5                     L20:	
  5793  0FE5  0CA1               	rrf	___awmod@divisor+1,f
  5794  0FE6  0CA0               	rrf	___awmod@divisor,f
  5795  0FE7  0BF4               	decfsz	___awmod@counter,f
  5796  0FE8  2FD6               	goto	l13332
  5797  0FE9                     l13340:	
  5798  0FE9  0875               	movf	___awmod@sign,w
  5799  0FEA  1903               	btfsc	3,2
  5800  0FEB  2FF1               	goto	l13344
  5801  0FEC  09A2               	comf	___awmod@dividend,f
  5802  0FED  09A3               	comf	___awmod@dividend+1,f
  5803  0FEE  0AA2               	incf	___awmod@dividend,f
  5804  0FEF  1903               	skipnz
  5805  0FF0  0AA3               	incf	___awmod@dividend+1,f
  5806  0FF1                     l13344:	
  5807  0FF1  0823               	movf	___awmod@dividend+1,w
  5808  0FF2  00A1               	movwf	?___awmod+1
  5809  0FF3  0822               	movf	___awmod@dividend,w
  5810  0FF4  00A0               	movwf	?___awmod
  5811  0FF5  0008               	return
  5812  0FF6                     __end_of___awmod:	
  5813  0FF6                     PL7:	
  5814  0FF6  0844               	movf	get_time@i,w
  5815  0FF7  3E3C               	addlw	get_time@ds3231_time& (0+255)
  5816  0FF8  0084               	movwf	4
  5817  0FF9  0800               	movf	0,w
  5818  0FFA  062D               	xorwf	??_get_time,w
  5819  0FFB  0008               	return
  5820  0FFC                     PL9:	
  5821  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  5822  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  5823  0FFE  1187               	bcf	7,3
  5824  0FFF  0008               	return
  5825                           
  5826                           	psect	text1351
  5827  066A                     __ptext1351:	
  5828 ;; =============== function _ds3231_init ends ============
  5829                           
  5830                           
  5831 ;; *************** function _date_dec *****************
  5832 ;; Defined at:
  5833 ;;		line 178 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\timer1.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  t               1    wreg     PTR struct _DATE
  5836 ;;		 -> old_date(4), 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  t               1    6[COMMON] PTR struct _DATE
  5839 ;;		 -> old_date(4), 
  5840 ;; Return value:  Size  Location     Type
  5841 ;;		None               void
  5842 ;; Registers used:
  5843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 60/100
  5846 ;;		On exit  : 140/0
  5847 ;;		Unchanged: FFE9F/0
  5848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5849 ;;      Params:         0       0       0       0
  5850 ;;      Locals:         1       0       0       0
  5851 ;;      Temps:          1       0       0       0
  5852 ;;      Totals:         2       0       0       0
  5853 ;;Total ram usage:        2 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:    4
  5856 ;; This function calls:
  5857 ;;		_isleap
  5858 ;; This function is called by:
  5859 ;;		_main
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862  066A                     _date_dec:	
  5863                           
  5864                           ; Regs used in _date_dec: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5865                           ;date_dec@t stored from wreg
  5866  066A  00F6               	movwf	date_dec@t
  5867                           
  5868                           ;timer1.c: 180: if(t->month == 2)
  5869  066B  272C  118A         	fcall	PL8	;call to abstracted procedure
  5870  066D  1D03               	skipz
  5871  066E  2E7A               	goto	l13542
  5872                           
  5873                           ;timer1.c: 181: {
  5874                           ;timer1.c: 182: if(isleap(t->year+2000))
  5875  066F  0876               	movf	date_dec@t,w
  5876  0670  2719  118A         	fcall	PL3	;call to abstracted procedure
  5877  0672  26D9  118A         	fcall	_isleap
  5878  0674  3A00               	xorlw	0
  5879  0675  1903               	skipnz
  5880  0676  2E7A               	goto	l13542
  5881                           
  5882                           ;timer1.c: 183: {
  5883                           ;timer1.c: 184: months[2] = 29;
  5884  0677  301D               	movlw	29
  5885  0678  1683               	bsf	3,5	;RP0=1, select bank1
  5886  0679  00E2               	movwf	(_months^(0+128)+2)
  5887  067A                     l13542:	
  5888                           
  5889                           ;timer1.c: 185: }
  5890                           ;timer1.c: 186: }
  5891                           ;timer1.c: 187: if(t->date == 1)
  5892  067A  0876               	movf	date_dec@t,w
  5893  067B  3E01               	addlw	1
  5894  067C  0084               	movwf	4
  5895  067D  0B00               	decfsz	0,w
  5896  067E  2E99               	goto	l13552
  5897                           
  5898                           ;timer1.c: 188: {
  5899                           ;timer1.c: 189: if(t->month == 1)
  5900  067F  0876               	movf	date_dec@t,w
  5901  0680  3E02               	addlw	2
  5902  0681  0084               	movwf	4
  5903  0682  0B00               	decfsz	0,w
  5904  0683  2E8C               	goto	l13550
  5905                           
  5906                           ;timer1.c: 190: {
  5907                           ;timer1.c: 191: t->month = 12;
  5908  0684  0876               	movf	date_dec@t,w
  5909  0685  3E02               	addlw	2
  5910  0686  0084               	movwf	4
  5911  0687  300C               	movlw	12
  5912  0688  0080               	movwf	0
  5913                           
  5914                           ;timer1.c: 192: t->year--;
  5915  0689  0876               	movf	date_dec@t,w
  5916  068A  3E03               	addlw	3
  5917  068B  2E8E               	goto	L12
  5918  068C                     l13550:	
  5919                           ;timer1.c: 194: }
  5920                           
  5921                           
  5922                           ;timer1.c: 195: else
  5923                           ;timer1.c: 196: {
  5924                           ;timer1.c: 197: t->month--;
  5925  068C  0876               	movf	date_dec@t,w
  5926  068D  3E02               	addlw	2
  5927  068E                     L12:	
  5928  068E  0084               	movwf	4
  5929  068F  0380               	decf	0,f
  5930                           
  5931                           ;timer1.c: 198: }
  5932                           ;timer1.c: 199: t->date = months[t->month];
  5933  0690  0876               	movf	date_dec@t,w
  5934  0691  2725               	fcall	PL6	;call to abstracted procedure
  5935  0692  00F5               	movwf	??_date_dec
  5936  0693  0876               	movf	date_dec@t,w
  5937  0694  3E01               	addlw	1
  5938  0695  0084               	movwf	4
  5939  0696  0875               	movf	??_date_dec,w
  5940  0697  0080               	movwf	0
  5941                           
  5942                           ;timer1.c: 200: }
  5943  0698  0008               	return
  5944  0699                     l13552:	
  5945                           
  5946                           ;timer1.c: 201: else
  5947                           ;timer1.c: 202: {
  5948                           ;timer1.c: 203: t->date--;
  5949  0699  0876               	movf	date_dec@t,w
  5950  069A  3E01               	addlw	1
  5951  069B  0084               	movwf	4
  5952  069C  0380               	decf	0,f
  5953  069D  0008               	return
  5954  069E                     __end_of_date_dec:	
  5955  069E                     __ptext1352:	
  5956 ;; =============== function _date_dec ends ============
  5957                           
  5958                           
  5959 ;; *************** function _date_add *****************
  5960 ;; Defined at:
  5961 ;;		line 139 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\timer1.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  t               1    wreg     PTR struct _DATE
  5964 ;;		 -> old_date(4), 
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;  t               1    6[COMMON] PTR struct _DATE
  5967 ;;		 -> old_date(4), 
  5968 ;;  month_day       1    5[COMMON] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;		None               void
  5971 ;; Registers used:
  5972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 60/100
  5975 ;;		On exit  : 140/0
  5976 ;;		Unchanged: FFE9F/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5978 ;;      Params:         0       0       0       0
  5979 ;;      Locals:         2       0       0       0
  5980 ;;      Temps:          0       0       0       0
  5981 ;;      Totals:         2       0       0       0
  5982 ;;Total ram usage:        2 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    4
  5985 ;; This function calls:
  5986 ;;		_isleap
  5987 ;; This function is called by:
  5988 ;;		_main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991  069E                     _date_add:	
  5992                           
  5993                           ; Regs used in _date_add: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5994                           ;date_add@t stored from wreg
  5995  069E  00F6               	movwf	date_add@t
  5996                           
  5997                           ;timer1.c: 140: UINT8 month_day;
  5998                           ;timer1.c: 141: if(t->month == 2)
  5999  069F  272C  118A         	fcall	PL8	;call to abstracted procedure
  6000  06A1  1D03               	skipz
  6001  06A2  2EB0               	goto	l13522
  6002                           
  6003                           ;timer1.c: 142: {
  6004                           ;timer1.c: 143: if(isleap(t->year+2000))
  6005  06A3  0876               	movf	date_add@t,w
  6006  06A4  2719  118A         	fcall	PL3	;call to abstracted procedure
  6007  06A6  26D9  118A         	fcall	_isleap
  6008  06A8  3A00               	xorlw	0
  6009  06A9  1903               	skipnz
  6010  06AA  2EAD               	goto	l13520
  6011                           
  6012                           ;timer1.c: 144: {
  6013                           ;timer1.c: 145: months[2] = 29;
  6014  06AB  301D               	movlw	29
  6015  06AC  2EAE               	goto	L13
  6016  06AD                     l13520:	
  6017                           ;timer1.c: 146: }else{
  6018                           
  6019                           
  6020                           ;timer1.c: 147: months[2] = 28;
  6021  06AD  301C               	movlw	28
  6022  06AE                     L13:	
  6023  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  6024  06AF  00E2               	movwf	(_months^(0+128)+2)
  6025  06B0                     l13522:	
  6026                           
  6027                           ;timer1.c: 148: }
  6028                           ;timer1.c: 149: }
  6029                           ;timer1.c: 150: month_day = months[t->month];
  6030  06B0  0876               	movf	date_add@t,w
  6031  06B1  2725  118A         	fcall	PL6	;call to abstracted procedure
  6032  06B3  00F5               	movwf	date_add@month_day
  6033                           
  6034                           ;timer1.c: 152: if(t->date >= month_day)
  6035  06B4  0876               	movf	date_add@t,w
  6036  06B5  3E01               	addlw	1
  6037  06B6  0084               	movwf	4
  6038  06B7  0875               	movf	date_add@month_day,w
  6039  06B8  0200               	subwf	0,w
  6040                           
  6041                           ;timer1.c: 153: {
  6042                           ;timer1.c: 155: t->date = 1;
  6043  06B9  0876               	movf	date_add@t,w
  6044  06BA  1C03               	skipc
  6045  06BB  2ED5               	goto	L14
  6046  06BC  3E01               	addlw	1
  6047  06BD  0084               	movwf	4
  6048  06BE  0180               	clrf	0
  6049  06BF  0A80               	incf	0,f
  6050                           
  6051                           ;timer1.c: 156: if(t->month >=12)
  6052  06C0  0876               	movf	date_add@t,w
  6053  06C1  3E02               	addlw	2
  6054  06C2  0084               	movwf	4
  6055  06C3  300C               	movlw	12
  6056  06C4  0200               	subwf	0,w
  6057                           
  6058                           ;timer1.c: 157: {
  6059                           ;timer1.c: 158: t->month = 1;
  6060  06C5  0876               	movf	date_add@t,w
  6061  06C6  1C03               	skipc
  6062  06C7  2ED1               	goto	L15
  6063  06C8  3E02               	addlw	2
  6064  06C9  0084               	movwf	4
  6065  06CA  0180               	clrf	0
  6066  06CB  0A80               	incf	0,f
  6067                           
  6068                           ;timer1.c: 159: t->year++;
  6069  06CC  0876               	movf	date_add@t,w
  6070  06CD  3E03               	addlw	3
  6071  06CE  0084               	movwf	4
  6072  06CF  0A80               	incf	0,f
  6073                           
  6074                           ;timer1.c: 160: }
  6075  06D0  0008               	return
  6076  06D1                     L15:	
  6077                           ;timer1.c: 161: else
  6078                           ;timer1.c: 162: {
  6079                           ;timer1.c: 163: t->month++;
  6080                           
  6081  06D1  3E02               	addlw	2
  6082  06D2  0084               	movwf	4
  6083  06D3  0A80               	incf	0,f
  6084  06D4  0008               	return
  6085  06D5                     L14:	
  6086                           ;timer1.c: 166: else
  6087                           ;timer1.c: 167: {
  6088                           ;timer1.c: 169: t->date++;
  6089                           
  6090  06D5  3E01               	addlw	1
  6091  06D6  0084               	movwf	4
  6092  06D7  0A80               	incf	0,f
  6093  06D8  0008               	return
  6094  06D9                     __end_of_date_add:	
  6095  06D9                     __ptext1361:	
  6096 ;; =============== function _usart_init ends ============
  6097                           
  6098                           
  6099 ;; *************** function _isleap *****************
  6100 ;; Defined at:
  6101 ;;		line 215 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\timer1.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  year            2    4[BANK0 ] unsigned short 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;		None
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      unsigned char 
  6108 ;; Registers used:
  6109 ;;		wreg, status,2, status,0, pclath, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 160/0
  6112 ;;		On exit  : 160/0
  6113 ;;		Unchanged: FFE9F/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6115 ;;      Params:         0       2       0       0
  6116 ;;      Locals:         0       0       0       0
  6117 ;;      Temps:          0       0       0       0
  6118 ;;      Totals:         0       2       0       0
  6119 ;;Total ram usage:        2 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    3
  6122 ;; This function calls:
  6123 ;;		___lwmod
  6124 ;; This function is called by:
  6125 ;;		_date_add
  6126 ;;		_date_dec
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129  06D9                     _isleap:	
  6130                           
  6131                           ;timer1.c: 216: if ((year%400==0) || ((year%100!=0) && (year%4==0)))
  6132                           
  6133                           ; Regs used in _isleap: [wreg+status,2+status,0+pclath+cstack]
  6134  06D9  3090               	movlw	144
  6135  06DA  00A0               	movwf	?___lwmod
  6136  06DB  3001               	movlw	1
  6137  06DC  00A1               	movwf	?___lwmod+1
  6138  06DD  2732  118A         	fcall	PL10	;call to abstracted procedure
  6139  06DF  26F5  118A         	fcall	___lwmod
  6140  06E1  0821               	movf	?___lwmod+1,w
  6141  06E2  0420               	iorwf	?___lwmod,w
  6142  06E3  1903               	skipnz
  6143  06E4  3401               	retlw	1
  6144  06E5  3064               	movlw	100
  6145  06E6  00A0               	movwf	?___lwmod
  6146  06E7  01A1               	clrf	?___lwmod+1
  6147  06E8  2732  118A         	fcall	PL10	;call to abstracted procedure
  6148  06EA  26F5  118A         	fcall	___lwmod
  6149  06EC  0821               	movf	?___lwmod+1,w
  6150  06ED  0420               	iorwf	?___lwmod,w
  6151  06EE  1903               	skipnz
  6152  06EF  3400               	retlw	0
  6153  06F0  0824               	movf	isleap@year,w
  6154  06F1  3903               	andlw	3
  6155  06F2  1903               	btfsc	3,2
  6156                           
  6157                           ;timer1.c: 217: {
  6158                           ;timer1.c: 218: return TRUE;
  6159  06F3  3401               	retlw	1
  6160                           
  6161                           ;timer1.c: 220: else
  6162                           ;timer1.c: 221: {
  6163                           ;timer1.c: 222: return FALSE;
  6164  06F4  3400               	retlw	0
  6165  06F5                     __end_of_isleap:	
  6166  06F5                     __ptext1365:	
  6167 ;; =============== function ___lbdiv ends ============
  6168                           
  6169                           
  6170 ;; *************** function ___lwmod *****************
  6171 ;; Defined at:
  6172 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\sources\lwmod.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;  divisor         2    0[BANK0 ] unsigned int 
  6175 ;;  dividend        2    2[BANK0 ] unsigned int 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  counter         1    4[COMMON] unsigned char 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  2    0[BANK0 ] unsigned int 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, status,0
  6182 ;; Tracked objects:
  6183 ;;		On entry : 160/0
  6184 ;;		On exit  : 160/0
  6185 ;;		Unchanged: FFE9F/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6187 ;;      Params:         0       4       0       0
  6188 ;;      Locals:         1       0       0       0
  6189 ;;      Temps:          0       0       0       0
  6190 ;;      Totals:         1       4       0       0
  6191 ;;Total ram usage:        5 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    2
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_isleap
  6198 ;;		_main
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201  06F5                     ___lwmod:	
  6202                           
  6203                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6204  06F5  0821               	movf	___lwmod@divisor+1,w
  6205  06F6  0420               	iorwf	___lwmod@divisor,w
  6206  06F7  1903               	skipnz
  6207  06F8  2F14               	goto	l13266
  6208  06F9  01F4               	clrf	___lwmod@counter
  6209  06FA                     L23:	
  6210  06FA  0AF4               	incf	___lwmod@counter,f
  6211  06FB  1BA1               	btfsc	___lwmod@divisor+1,7
  6212  06FC  2F01               	goto	l13258
  6213  06FD  1003               	clrc
  6214  06FE  0DA0               	rlf	___lwmod@divisor,f
  6215  06FF  0DA1               	rlf	___lwmod@divisor+1,f
  6216  0700  2EFA               	goto	L23
  6217  0701                     l13258:	
  6218  0701  0821               	movf	___lwmod@divisor+1,w
  6219  0702  0223               	subwf	___lwmod@dividend+1,w
  6220  0703  1D03               	skipz
  6221  0704  2F07               	goto	u3445
  6222  0705  0820               	movf	___lwmod@divisor,w
  6223  0706  0222               	subwf	___lwmod@dividend,w
  6224  0707                     u3445:	
  6225  0707  1C03               	skipc
  6226  0708  2F10               	goto	L24
  6227  0709  0820               	movf	___lwmod@divisor,w
  6228  070A  02A2               	subwf	___lwmod@dividend,f
  6229  070B  0821               	movf	___lwmod@divisor+1,w
  6230  070C  1C03               	skipc
  6231  070D  03A3               	decf	___lwmod@dividend+1,f
  6232  070E  02A3               	subwf	___lwmod@dividend+1,f
  6233  070F  1003               	clrc
  6234  0710                     L24:	
  6235  0710  0CA1               	rrf	___lwmod@divisor+1,f
  6236  0711  0CA0               	rrf	___lwmod@divisor,f
  6237  0712  0BF4               	decfsz	___lwmod@counter,f
  6238  0713  2F01               	goto	l13258
  6239  0714                     l13266:	
  6240  0714  0823               	movf	___lwmod@dividend+1,w
  6241  0715  00A1               	movwf	?___lwmod+1
  6242  0716  0822               	movf	___lwmod@dividend,w
  6243  0717  00A0               	movwf	?___lwmod
  6244  0718  0008               	return
  6245  0719                     __end_of___lwmod:	
  6246  0719                     PL3:	
  6247  0719  3E03               	addlw	3
  6248  071A  0084               	movwf	4
  6249  071B  0800               	movf	0,w
  6250  071C  00A4               	movwf	?_isleap
  6251  071D  01A5               	clrf	?_isleap+1
  6252  071E  30D0               	movlw	208
  6253  071F  07A4               	addwf	?_isleap,f
  6254  0720  1803               	skipnc
  6255  0721  0AA5               	incf	?_isleap+1,f
  6256  0722  3007               	movlw	7
  6257  0723  07A5               	addwf	?_isleap+1,f
  6258  0724  0008               	return
  6259  0725                     PL6:	
  6260  0725  3E02               	addlw	2
  6261  0726  0084               	movwf	4
  6262  0727  0800               	movf	0,w
  6263  0728  3EE0               	addlw	_months& (0+255)
  6264  0729  0084               	movwf	4
  6265  072A  0800               	movf	0,w
  6266  072B  0008               	return
  6267  072C                     PL8:	
  6268  072C  3E02               	addlw	2
  6269  072D  0084               	movwf	4
  6270  072E  1383               	bcf	3,7	;select IRP bank0
  6271  072F  0800               	movf	0,w
  6272  0730  3A02               	xorlw	2
  6273  0731  0008               	return
  6274  0732                     PL10:	
  6275  0732  0825               	movf	isleap@year+1,w
  6276  0733  00A3               	movwf	?___lwmod+3
  6277  0734  0824               	movf	isleap@year,w
  6278  0735  00A2               	movwf	?___lwmod+2
  6279  0736  0008               	return
  6280                           
  6281                           	psect	text1353
  6282  0791                     __ptext1353:	
  6283 ;; =============== function _date_add ends ============
  6284                           
  6285                           
  6286 ;; *************** function _MakeCRC16 *****************
  6287 ;; Defined at:
  6288 ;;		line 24 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\CRC.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  buf             1    wreg     PTR unsigned char 
  6291 ;;		 -> tx_udata(20), copy_rx_udata(17), 
  6292 ;;  len             1    3[BANK0 ] unsigned char 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  6295 ;;		 -> tx_udata(20), copy_rx_udata(17), 
  6296 ;;  crc             2   12[BANK0 ] unsigned short 
  6297 ;;  i               2   10[BANK0 ] unsigned short 
  6298 ;;  lo              1    9[BANK0 ] unsigned char 
  6299 ;;  hi              1    8[BANK0 ] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  2    3[BANK0 ] unsigned short 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 160/0
  6306 ;;		On exit  : 160/0
  6307 ;;		Unchanged: FFE9F/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6309 ;;      Params:         0       2       0       0
  6310 ;;      Locals:         0       7       0       0
  6311 ;;      Temps:          0       2       0       0
  6312 ;;      Totals:         0      11       0       0
  6313 ;;Total ram usage:       11 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    3
  6316 ;; This function calls:
  6317 ;;		_calccrc
  6318 ;; This function is called by:
  6319 ;;		_main
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322  0791                     _MakeCRC16:	
  6323                           
  6324                           ; Regs used in _MakeCRC16: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6325                           ;MakeCRC16@buf stored from wreg
  6326  0791  00A7               	movwf	MakeCRC16@buf
  6327                           
  6328                           ;CRC.c: 25: unsigned char hi,lo;
  6329                           ;CRC.c: 26: unsigned short int i;
  6330                           ;CRC.c: 27: unsigned short int crc;
  6331                           ;CRC.c: 28: crc=0xFFFF;
  6332  0792  30FF               	movlw	255
  6333  0793  00AC               	movwf	MakeCRC16@crc
  6334  0794  00AD               	movwf	MakeCRC16@crc+1
  6335                           
  6336                           ;CRC.c: 29: for (i=0;i<len;i++)
  6337  0795  01AA               	clrf	MakeCRC16@i
  6338  0796  01AB               	clrf	MakeCRC16@i+1
  6339  0797                     l13508:	
  6340  0797  0823               	movf	MakeCRC16@len,w
  6341  0798  00A5               	movwf	??_MakeCRC16
  6342  0799  01A6               	clrf	??_MakeCRC16+1
  6343  079A  0826               	movf	??_MakeCRC16+1,w
  6344  079B  022B               	subwf	MakeCRC16@i+1,w
  6345  079C  1D03               	skipz
  6346  079D  2FA0               	goto	u3765
  6347  079E  0825               	movf	??_MakeCRC16,w
  6348  079F  022A               	subwf	MakeCRC16@i,w
  6349  07A0                     u3765:	
  6350  07A0  1803               	btfsc	3,0
  6351  07A1  2FB4               	goto	l13510
  6352                           
  6353                           ;CRC.c: 30: {
  6354                           ;CRC.c: 31: crc=calccrc(*buf,crc);
  6355  07A2  082D               	movf	MakeCRC16@crc+1,w
  6356  07A3  00F5               	movwf	?_calccrc+1
  6357  07A4  082C               	movf	MakeCRC16@crc,w
  6358  07A5  00F4               	movwf	?_calccrc
  6359  07A6  0827               	movf	MakeCRC16@buf,w
  6360  07A7  0084               	movwf	4
  6361  07A8  0800               	movf	0,w
  6362  07A9  27C4  118A         	fcall	_calccrc
  6363  07AB  0875               	movf	?_calccrc+1,w
  6364  07AC  00AD               	movwf	MakeCRC16@crc+1
  6365  07AD  0874               	movf	?_calccrc,w
  6366  07AE  00AC               	movwf	MakeCRC16@crc
  6367                           
  6368                           ;CRC.c: 32: buf++;
  6369  07AF  0AA7               	incf	MakeCRC16@buf,f
  6370  07B0  0AAA               	incf	MakeCRC16@i,f
  6371  07B1  1903               	skipnz
  6372  07B2  0AAB               	incf	MakeCRC16@i+1,f
  6373  07B3  2F97               	goto	l13508
  6374  07B4                     l13510:	
  6375                           
  6376                           ;CRC.c: 33: }
  6377                           ;CRC.c: 34: hi=crc%256;
  6378  07B4  082C               	movf	MakeCRC16@crc,w
  6379  07B5  00A8               	movwf	MakeCRC16@hi
  6380                           
  6381                           ;CRC.c: 35: lo=crc/256;
  6382  07B6  082D               	movf	MakeCRC16@crc+1,w
  6383  07B7  00A9               	movwf	MakeCRC16@lo
  6384                           
  6385                           ;CRC.c: 36: crc=((unsigned short int)hi<<8)|lo;
  6386  07B8  0828               	movf	MakeCRC16@hi,w
  6387  07B9  00AC               	movwf	MakeCRC16@crc
  6388  07BA  01AD               	clrf	MakeCRC16@crc+1
  6389  07BB  00AD               	movwf	MakeCRC16@crc+1
  6390  07BC  01AC               	clrf	MakeCRC16@crc
  6391  07BD  0829               	movf	MakeCRC16@lo,w
  6392  07BE  04AC               	iorwf	MakeCRC16@crc,f
  6393                           
  6394                           ;CRC.c: 37: return crc;
  6395  07BF  082D               	movf	MakeCRC16@crc+1,w
  6396  07C0  00A4               	movwf	?_MakeCRC16+1
  6397  07C1  082C               	movf	MakeCRC16@crc,w
  6398  07C2  00A3               	movwf	?_MakeCRC16
  6399  07C3  0008               	return
  6400  07C4                     __end_of_MakeCRC16:	
  6401  07C4                     __ptext1372:	
  6402 ;; =============== function _start_i2c ends ============
  6403                           
  6404                           
  6405 ;; *************** function _calccrc *****************
  6406 ;; Defined at:
  6407 ;;		line 5 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\CRC.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  crcbuf          1    wreg     unsigned char 
  6410 ;;  crc             2    4[COMMON] unsigned short 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  crcbuf          1    0[BANK0 ] unsigned char 
  6413 ;;  i               1    2[BANK0 ] unsigned char 
  6414 ;;  chk             1    1[BANK0 ] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  2    4[COMMON] unsigned short 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0
  6419 ;; Tracked objects:
  6420 ;;		On entry : 160/0
  6421 ;;		On exit  : 160/0
  6422 ;;		Unchanged: FFE9F/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6424 ;;      Params:         2       0       0       0
  6425 ;;      Locals:         0       3       0       0
  6426 ;;      Temps:          0       0       0       0
  6427 ;;      Totals:         2       3       0       0
  6428 ;;Total ram usage:        5 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    2
  6431 ;; This function calls:
  6432 ;;		Nothing
  6433 ;; This function is called by:
  6434 ;;		_MakeCRC16
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437  07C4                     _calccrc:	
  6438                           
  6439                           ; Regs used in _calccrc: [wreg+status,2+status,0]
  6440                           ;calccrc@crcbuf stored from wreg
  6441  07C4  00A0               	movwf	calccrc@crcbuf
  6442                           
  6443                           ;CRC.c: 6: unsigned char i,chk;
  6444                           ;CRC.c: 7: crc=crc ^ crcbuf;
  6445  07C5  06F4               	xorwf	calccrc@crc,f
  6446                           
  6447                           ;CRC.c: 8: for(i=0;i<8;i++)
  6448  07C6  01A2               	clrf	calccrc@i
  6449  07C7                     l13158:	
  6450                           
  6451                           ;CRC.c: 9: {
  6452                           ;CRC.c: 10: chk=crc&1;
  6453  07C7  0874               	movf	calccrc@crc,w
  6454  07C8  00A1               	movwf	calccrc@chk
  6455  07C9  3001               	movlw	1
  6456  07CA  05A1               	andwf	calccrc@chk,f
  6457                           
  6458                           ;CRC.c: 11: crc=crc>>1;
  6459  07CB  1003               	clrc
  6460  07CC  0CF5               	rrf	calccrc@crc+1,f
  6461  07CD  0CF4               	rrf	calccrc@crc,f
  6462                           
  6463                           ;CRC.c: 12: crc=crc&0x7fff;
  6464  07CE  13F5               	bcf	calccrc@crc+1,7
  6465                           
  6466                           ;CRC.c: 13: if (chk==1)
  6467  07CF  0B21               	decfsz	calccrc@chk,w
  6468  07D0  2FD5               	goto	l13168
  6469                           
  6470                           ;CRC.c: 14: {
  6471                           ;CRC.c: 15: crc=crc^0xa001;
  6472  07D1  3001               	movlw	1
  6473  07D2  06F4               	xorwf	calccrc@crc,f
  6474  07D3  30A0               	movlw	160
  6475  07D4  06F5               	xorwf	calccrc@crc+1,f
  6476  07D5                     l13168:	
  6477  07D5  0AA2               	incf	calccrc@i,f
  6478  07D6  3008               	movlw	8
  6479  07D7  0222               	subwf	calccrc@i,w
  6480  07D8  1803               	btfsc	3,0
  6481  07D9  0008               	return
  6482  07DA  2FC7               	goto	l13158
  6483  07DB                     __end_of_calccrc:	
  6484                           ;CRC.c: 18: }
  6485                           ;CRC.c: 20: return crc;
  6486                           
  6487                           
  6488                           	psect	text1360
  6489  0D73                     __ptext1360:	
  6490 ;; =============== function _readbyte ends ============
  6491                           
  6492                           
  6493 ;; *************** function _usart_init *****************
  6494 ;; Defined at:
  6495 ;;		line 17 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\usart.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;		None
  6498 ;; Auto vars:     Size  Location     Type
  6499 ;;		None
  6500 ;; Return value:  Size  Location     Type
  6501 ;;		None               void
  6502 ;; Registers used:
  6503 ;;		wreg, status,2, pclath, cstack
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 60/0
  6507 ;;		Unchanged: FFF9F/0
  6508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6509 ;;      Params:         0       0       0       0
  6510 ;;      Locals:         0       0       0       0
  6511 ;;      Temps:          0       0       0       0
  6512 ;;      Totals:         0       0       0       0
  6513 ;;Total ram usage:        0 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    3
  6516 ;; This function calls:
  6517 ;;		_id_code
  6518 ;; This function is called by:
  6519 ;;		_main
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522  0D73                     _usart_init:	
  6523                           
  6524                           ;usart.c: 18: TRISB0 = 0;
  6525                           
  6526                           ; Regs used in _usart_init: [wreg+status,2+pclath+cstack]
  6527  0D73  1683               	bsf	3,5	;RP0=1, select bank1
  6528  0D74  1303               	bcf	3,6	;RP1=0, select bank1
  6529  0D75  1006               	bcf	6,0
  6530                           
  6531                           ;usart.c: 19: TRISB6 = 1;
  6532  0D76  1706               	bsf	6,6
  6533                           
  6534                           ;usart.c: 20: TRISB7 = 1;
  6535  0D77  1786               	bsf	6,7
  6536                           
  6537                           ;usart.c: 21: TRISB5 = 1;
  6538  0D78  1686               	bsf	6,5
  6539                           
  6540                           ;usart.c: 22: TRISB4 = 1;
  6541  0D79  1606               	bsf	6,4
  6542                           
  6543                           ;usart.c: 23: TRISB2 = 1;
  6544  0D7A  1506               	bsf	6,2
  6545                           
  6546                           ;usart.c: 24: TRISB1 = 1;
  6547  0D7B  1486               	bsf	6,1
  6548                           
  6549                           ;usart.c: 25: TRISA0 = 1;
  6550  0D7C  1405               	bsf	5,0
  6551                           
  6552                           ;usart.c: 26: TRISA1 = 1;
  6553  0D7D  1485               	bsf	5,1
  6554                           
  6555                           ;usart.c: 28: TRISC7 = 1; TRISC6 = 1; SPBRG = ((int)(8000000L/(16UL * 9600) -1)); RCSTA 
      +                          = (0|0x90); TXSTA = (0x4|0|0x20); RCIE = 1;;
  6556  0D7E  1787               	bsf	7,7
  6557  0D7F  1707               	bsf	7,6
  6558  0D80  3033               	movlw	51
  6559  0D81  0099               	movwf	25
  6560  0D82  3090               	movlw	144
  6561  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  6562  0D84  0098               	movwf	24	;volatile
  6563  0D85  3024               	movlw	36
  6564  0D86  1683               	bsf	3,5	;RP0=1, select bank1
  6565  0D87  0098               	movwf	24	;volatile
  6566  0D88  168C               	bsf	12,5
  6567  0D89                     l1631:	
  6568                           ;usart.c: 29: while(!TRMT);RB0 = 0;
  6569                           
  6570  0D89  1C98               	btfss	24,1
  6571  0D8A  2D89               	goto	l1631
  6572  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  6573  0D8C  1006               	bcf	6,0
  6574                           
  6575                           ;usart.c: 30: my_id_code=id_code();
  6576  0D8D  2590               	fcall	_id_code
  6577  0D8E  00CD               	movwf	_my_id_code
  6578  0D8F  0008               	return
  6579  0D90                     __end_of_usart_init:	
  6580  0D90                     __ptext1380:	
  6581 ;; =============== function _putch ends ============
  6582                           
  6583                           
  6584 ;; *************** function _id_code *****************
  6585 ;; Defined at:
  6586 ;;		line 33 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\usart.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  id              1    4[COMMON] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      unsigned char 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2
  6595 ;; Tracked objects:
  6596 ;;		On entry : 60/0
  6597 ;;		On exit  : 60/0
  6598 ;;		Unchanged: FFF9F/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6600 ;;      Params:         0       0       0       0
  6601 ;;      Locals:         1       0       0       0
  6602 ;;      Temps:          0       0       0       0
  6603 ;;      Totals:         1       0       0       0
  6604 ;;Total ram usage:        1 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    2
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_usart_init
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613  0D90                     _id_code:	
  6614                           
  6615                           ;usart.c: 34: UINT8 id= 0;
  6616                           
  6617                           ; Regs used in _id_code: [wreg+status,2]
  6618  0D90  01F4               	clrf	id_code@id
  6619                           
  6620                           ;usart.c: 35: id = 0x00;
  6621  0D91  01F4               	clrf	id_code@id
  6622                           
  6623                           ;usart.c: 36: if(RA1 == 0)
  6624  0D92  1C85               	btfss	5,1
  6625                           
  6626                           ;usart.c: 37: {
  6627                           ;usart.c: 38: id |= 1<<7;
  6628  0D93  17F4               	bsf	id_code@id,7
  6629                           
  6630                           ;usart.c: 39: }
  6631                           ;usart.c: 40: if(RA0 == 0)
  6632  0D94  1C05               	btfss	5,0
  6633                           
  6634                           ;usart.c: 41: {
  6635                           ;usart.c: 42: id |= 1<<6;
  6636  0D95  1774               	bsf	id_code@id,6
  6637                           
  6638                           ;usart.c: 43: }
  6639                           ;usart.c: 44: if(RB1 == 0)
  6640  0D96  1C86               	btfss	6,1
  6641                           
  6642                           ;usart.c: 45: {
  6643                           ;usart.c: 46: id |= 1<<5;
  6644  0D97  16F4               	bsf	id_code@id,5
  6645                           
  6646                           ;usart.c: 47: }
  6647                           ;usart.c: 48: if(RB2 == 0)
  6648  0D98  1D06               	btfss	6,2
  6649                           
  6650                           ;usart.c: 49: {
  6651                           ;usart.c: 50: id |= 1<<4;
  6652  0D99  1674               	bsf	id_code@id,4
  6653                           
  6654                           ;usart.c: 51: }
  6655                           ;usart.c: 52: if(RB4 == 0)
  6656  0D9A  1E06               	btfss	6,4
  6657                           
  6658                           ;usart.c: 53: {
  6659                           ;usart.c: 54: id |= 1<<3;
  6660  0D9B  15F4               	bsf	id_code@id,3
  6661                           
  6662                           ;usart.c: 55: }
  6663                           ;usart.c: 56: if(RB5 == 0)
  6664  0D9C  1E86               	btfss	6,5
  6665                           
  6666                           ;usart.c: 57: {
  6667                           ;usart.c: 58: id |= 1<<2;
  6668  0D9D  1574               	bsf	id_code@id,2
  6669                           
  6670                           ;usart.c: 59: }
  6671                           ;usart.c: 60: if(RB7 == 0)
  6672  0D9E  1F86               	btfss	6,7
  6673                           
  6674                           ;usart.c: 61: {
  6675                           ;usart.c: 62: id |= 1<<1;
  6676  0D9F  14F4               	bsf	id_code@id,1
  6677                           
  6678                           ;usart.c: 63: }
  6679                           ;usart.c: 64: if(RB6 == 0)
  6680  0DA0  1F06               	btfss	6,6
  6681                           
  6682                           ;usart.c: 65: {
  6683                           ;usart.c: 66: id |= 1;
  6684  0DA1  1474               	bsf	id_code@id,0
  6685                           
  6686                           ;usart.c: 67: }
  6687                           ;usart.c: 68: return(id);
  6688  0DA2  0874               	movf	id_code@id,w
  6689  0DA3  0008               	return
  6690  0DA4                     __end_of_id_code:	
  6691                           
  6692                           	psect	text1373
  6693  07F3                     __ptext1373:	
  6694 ;; =============== function _calccrc ends ============
  6695                           
  6696                           
  6697 ;; *************** function _timer2_init *****************
  6698 ;; Defined at:
  6699 ;;		line 23 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\timer2.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;		None
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;		None
  6704 ;; Return value:  Size  Location     Type
  6705 ;;		None               void
  6706 ;; Registers used:
  6707 ;;		status,2
  6708 ;; Tracked objects:
  6709 ;;		On entry : 60/100
  6710 ;;		On exit  : 60/120
  6711 ;;		Unchanged: FFF9F/0
  6712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6713 ;;      Params:         0       0       0       0
  6714 ;;      Locals:         0       0       0       0
  6715 ;;      Temps:          0       0       0       0
  6716 ;;      Totals:         0       0       0       0
  6717 ;;Total ram usage:        0 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    2
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726  07F3                     _timer2_init:	
  6727                           
  6728                           ;timer2.c: 24: TMR2 = 0;
  6729                           
  6730                           ; Regs used in _timer2_init: [status,2]
  6731  07F3  0191               	clrf	17	;volatile
  6732                           
  6733                           ;timer2.c: 25: TMR2IF = 0;
  6734  07F4  108C               	bcf	12,1
  6735                           
  6736                           ;timer2.c: 26: T2CKPS1 = 0;
  6737  07F5  1092               	bcf	18,1
  6738                           
  6739                           ;timer2.c: 27: T2CKPS0 = 0;
  6740  07F6  1012               	bcf	18,0
  6741                           
  6742                           ;timer2.c: 28: TOUTPS3 = 0;
  6743  07F7  1312               	bcf	18,6
  6744                           
  6745                           ;timer2.c: 29: TOUTPS2 = 1;
  6746  07F8  1692               	bsf	18,5
  6747                           
  6748                           ;timer2.c: 30: TOUTPS1 = 1;
  6749  07F9  1612               	bsf	18,4
  6750                           
  6751                           ;timer2.c: 31: TOUTPS0 = 1;
  6752  07FA  1592               	bsf	18,3
  6753                           
  6754                           ;timer2.c: 33: TMR2ON = 1;
  6755  07FB  1512               	bsf	18,2
  6756                           
  6757                           ;timer2.c: 34: TMR2IE = 1;
  6758  07FC  1683               	bsf	3,5	;RP0=1, select bank1
  6759  07FD  148C               	bsf	12,1
  6760                           
  6761                           ;timer2.c: 35: timer2_cnt=0;
  6762  07FE  01F8               	clrf	_timer2_cnt
  6763  07FF  0008               	return
  6764  0800                     __end_of_timer2_init:	
  6765                           
  6766                           	psect	text1374
  6767  07DB                     __ptext1374:	
  6768 ;; =============== function _timer2_init ends ============
  6769                           
  6770                           
  6771 ;; *************** function _system_value_init *****************
  6772 ;; Defined at:
  6773 ;;		line 141 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\sys.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;		None               void
  6780 ;; Registers used:
  6781 ;;		status,2
  6782 ;; Tracked objects:
  6783 ;;		On entry : 17F/60
  6784 ;;		On exit  : 17F/0
  6785 ;;		Unchanged: FFE80/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6787 ;;      Params:         0       0       0       0
  6788 ;;      Locals:         0       0       0       0
  6789 ;;      Temps:          0       0       0       0
  6790 ;;      Totals:         0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    2
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_main
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800  07DB                     _system_value_init:	
  6801                           
  6802                           ;sys.c: 142: old_time.hour=0;
  6803                           
  6804                           ; Regs used in _system_value_init: [status,2]
  6805  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  6806  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  6807  07DD  01DD               	clrf	_old_time
  6808                           
  6809                           ;sys.c: 143: old_time.min=0;
  6810  07DE  01DE               	clrf	_old_time+1
  6811                           
  6812                           ;sys.c: 144: old_time.sec=0;
  6813  07DF  01DF               	clrf	_old_time+2
  6814                           
  6815                           ;sys.c: 145: old_date.day=1;
  6816  07E0  01E0               	clrf	_old_date
  6817  07E1  0AE0               	incf	_old_date,f
  6818                           
  6819                           ;sys.c: 146: old_date.date=1;
  6820  07E2  01E1               	clrf	_old_date+1
  6821  07E3  0AE1               	incf	_old_date+1,f
  6822                           
  6823                           ;sys.c: 147: old_date.month=1;
  6824  07E4  01E2               	clrf	_old_date+2
  6825  07E5  0AE2               	incf	_old_date+2,f
  6826                           
  6827                           ;sys.c: 148: old_date.year=1;
  6828  07E6  01E3               	clrf	_old_date+3
  6829  07E7  0AE3               	incf	_old_date+3,f
  6830                           
  6831                           ;sys.c: 150: up_time_flag=0;
  6832  07E8  01D1               	clrf	_up_time_flag
  6833                           
  6834                           ;sys.c: 151: flag_jiaoshi=0;
  6835  07E9  01CB               	clrf	_flag_jiaoshi
  6836                           
  6837                           ;sys.c: 152: timer1_cnt=0;
  6838  07EA  01CE               	clrf	_timer1_cnt
  6839                           
  6840                           ;sys.c: 153: jiaoshi_cnt=0;
  6841  07EB  01CC               	clrf	_jiaoshi_cnt
  6842                           
  6843                           ;sys.c: 156: flag_dian2=0;
  6844  07EC  01CA               	clrf	_flag_dian1
  6845                           
  6846                           ;sys.c: 160: my_id_code=0;
  6847  07ED  01CD               	clrf	_my_id_code
  6848                           
  6849                           ;sys.c: 169: usart_timer_cnt=0;
  6850  07EE  01D2               	clrf	_usart_timer_cnt
  6851                           
  6852                           ;sys.c: 170: usart_count=0;
  6853  07EF  01F9               	clrf	_usart_count
  6854                           
  6855                           ;sys.c: 171: flag_usart_start=0;
  6856  07F0  01F7               	clrf	_flag_usart_start
  6857                           
  6858                           ;sys.c: 173: up_date_flag=0;
  6859  07F1  01CF               	clrf	_up_date_flag
  6860  07F2  0008               	return
  6861  07F3                     __end_of_system_value_init:	
  6862                           
  6863                           	psect	text1375
  6864  0D26                     __ptext1375:	
  6865 ;; =============== function _system_value_init ends ============
  6866                           
  6867                           
  6868 ;; *************** function _interupt_init *****************
  6869 ;; Defined at:
  6870 ;;		line 79 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\sys.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 17F/0
  6881 ;;		On exit  : 17F/60
  6882 ;;		Unchanged: FFE80/0
  6883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6884 ;;      Params:         0       0       0       0
  6885 ;;      Locals:         0       0       0       0
  6886 ;;      Temps:          0       0       0       0
  6887 ;;      Totals:         0       0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    2
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897  0D26                     _interupt_init:	
  6898                           
  6899                           ;sys.c: 80: GIE = 1;
  6900                           
  6901                           ; Regs used in _interupt_init: [status,2]
  6902  0D26  178B               	bsf	11,7
  6903                           
  6904                           ;sys.c: 81: PEIE = 1;
  6905  0D27  170B               	bsf	11,6
  6906                           
  6907                           ;sys.c: 82: ANSEL = 0x00;
  6908  0D28  1683               	bsf	3,5	;RP0=1, select bank3
  6909  0D29  1703               	bsf	3,6	;RP1=1, select bank3
  6910  0D2A  0188               	clrf	8
  6911                           
  6912                           ;sys.c: 83: ANSELH = 0x00;
  6913  0D2B  0189               	clrf	9
  6914  0D2C  0008               	return
  6915  0D2D                     __end_of_interupt_init:	
  6916                           
  6917                           	psect	text1379
  6918  0D1F                     __ptext1379:	
  6919 ;; =============== function _calc_zone ends ============
  6920                           
  6921                           
  6922 ;; *************** function _putch *****************
  6923 ;; Defined at:
  6924 ;;		line 94 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\usart.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  byte            1    wreg     unsigned char 
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;  byte            1    4[COMMON] unsigned char 
  6929 ;; Return value:  Size  Location     Type
  6930 ;;		None               void
  6931 ;; Registers used:
  6932 ;;		wreg
  6933 ;; Tracked objects:
  6934 ;;		On entry : 160/40
  6935 ;;		On exit  : 160/0
  6936 ;;		Unchanged: FFE9F/0
  6937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6938 ;;      Params:         0       0       0       0
  6939 ;;      Locals:         1       0       0       0
  6940 ;;      Temps:          0       0       0       0
  6941 ;;      Totals:         1       0       0       0
  6942 ;;Total ram usage:        1 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    2
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		_main
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951  0D1F                     _putch:	
  6952                           
  6953                           ; Regs used in _putch: [wreg]
  6954                           ;putch@byte stored from wreg
  6955  0D1F  00F4               	movwf	putch@byte
  6956  0D20                     l1654:	
  6957                           ;usart.c: 96: while(!TXIF)
  6958                           
  6959  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  6960  0D21  1E0C               	btfss	12,4
  6961  0D22  2D20               	goto	l1654
  6962                           
  6963                           ;usart.c: 98: TXREG = byte;
  6964  0D23  0874               	movf	putch@byte,w
  6965  0D24  0099               	movwf	25	;volatile
  6966  0D25  0008               	return
  6967  0D26                     __end_of_putch:	
  6968                           
  6969                           	psect	text1381
  6970  0D4C                     __ptext1381:	
  6971 ;; =============== function _id_code ends ============
  6972                           
  6973                           
  6974 ;; *************** function _time_add *****************
  6975 ;; Defined at:
  6976 ;;		line 78 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\timer1.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  t               1    wreg     PTR struct _TIME
  6979 ;;		 -> old_time(3), 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  t               1    4[COMMON] PTR struct _TIME
  6982 ;;		 -> old_time(3), 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  1    wreg      unsigned char 
  6985 ;; Registers used:
  6986 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6987 ;; Tracked objects:
  6988 ;;		On entry : 40/0
  6989 ;;		On exit  : 140/0
  6990 ;;		Unchanged: FFEBF/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6992 ;;      Params:         0       0       0       0
  6993 ;;      Locals:         1       0       0       0
  6994 ;;      Temps:          0       0       0       0
  6995 ;;      Totals:         1       0       0       0
  6996 ;;Total ram usage:        1 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    2
  6999 ;; This function calls:
  7000 ;;		Nothing
  7001 ;; This function is called by:
  7002 ;;		_main
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005  0D4C                     _time_add:	
  7006                           
  7007                           ; Regs used in _time_add: [wreg-fsr0h+status,2+status,0]
  7008                           ;time_add@t stored from wreg
  7009  0D4C  00F4               	movwf	time_add@t
  7010                           
  7011                           ;timer1.c: 79: if(t->sec >= 59)
  7012  0D4D  3E02               	addlw	2
  7013  0D4E  0084               	movwf	4
  7014  0D4F  303B               	movlw	59
  7015  0D50  1383               	bcf	3,7	;select IRP bank0
  7016  0D51  0200               	subwf	0,w
  7017                           
  7018                           ;timer1.c: 80: {
  7019                           ;timer1.c: 81: t->sec = 0;
  7020  0D52  0874               	movf	time_add@t,w
  7021  0D53  1C03               	skipc
  7022  0D54  2D6F               	goto	L27
  7023  0D55  3E02               	addlw	2
  7024  0D56  0084               	movwf	4
  7025  0D57  0180               	clrf	0
  7026                           
  7027                           ;timer1.c: 82: if(t->min >= 59)
  7028  0D58  0874               	movf	time_add@t,w
  7029  0D59  3E01               	addlw	1
  7030  0D5A  0084               	movwf	4
  7031  0D5B  303B               	movlw	59
  7032  0D5C  0200               	subwf	0,w
  7033                           
  7034                           ;timer1.c: 83: {
  7035                           ;timer1.c: 84: t->min = 0;
  7036  0D5D  0874               	movf	time_add@t,w
  7037  0D5E  1C03               	skipc
  7038  0D5F  2D6D               	goto	L28
  7039  0D60  3E01               	addlw	1
  7040  0D61  0084               	movwf	4
  7041  0D62  0180               	clrf	0
  7042                           
  7043                           ;timer1.c: 85: if(t->hour >= 23)
  7044  0D63  0874               	movf	time_add@t,w
  7045  0D64  0084               	movwf	4
  7046  0D65  3017               	movlw	23
  7047  0D66  0200               	subwf	0,w
  7048                           
  7049                           ;timer1.c: 86: {
  7050                           ;timer1.c: 87: t->hour = 0;
  7051  0D67  0874               	movf	time_add@t,w
  7052  0D68  0084               	movwf	4
  7053  0D69  1C03               	skipc
  7054  0D6A  2D71               	goto	L30
  7055  0D6B  0180               	clrf	0
  7056                           
  7057                           ;timer1.c: 88: return 1;
  7058  0D6C  3401               	retlw	1
  7059  0D6D                     L28:	
  7060                           ;timer1.c: 95: else
  7061                           ;timer1.c: 96: {
  7062                           ;timer1.c: 97: t->min++;
  7063                           
  7064                           ;timer1.c: 90: else
  7065                           ;timer1.c: 91: {
  7066                           ;timer1.c: 92: t->hour++;
  7067                           
  7068  0D6D  3E01               	addlw	1
  7069  0D6E  2D70               	goto	L26
  7070  0D6F                     L27:	
  7071                           ;timer1.c: 101: else
  7072                           ;timer1.c: 102: {
  7073                           ;timer1.c: 103: t->sec++;
  7074                           
  7075  0D6F  3E02               	addlw	2
  7076  0D70                     L26:	
  7077  0D70  0084               	movwf	4
  7078  0D71                     L30:	
  7079  0D71  0A80               	incf	0,f
  7080                           
  7081                           ;timer1.c: 104: }
  7082                           ;timer1.c: 105: return 0;
  7083  0D72  3400               	retlw	0
  7084  0D73                     __end_of_time_add:	
  7085                           
  7086                           	psect	text1382
  7087  0D35                     __ptext1382:	
  7088 ;; =============== function _time_add ends ============
  7089                           
  7090                           
  7091 ;; *************** function _timer1_init *****************
  7092 ;; Defined at:
  7093 ;;		line 21 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\timer1.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;		None
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;		None
  7098 ;; Return value:  Size  Location     Type
  7099 ;;		None               void
  7100 ;; Registers used:
  7101 ;;		status,2
  7102 ;; Tracked objects:
  7103 ;;		On entry : 17F/0
  7104 ;;		On exit  : 17F/0
  7105 ;;		Unchanged: FFE80/0
  7106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7107 ;;      Params:         0       0       0       0
  7108 ;;      Locals:         0       0       0       0
  7109 ;;      Temps:          0       0       0       0
  7110 ;;      Totals:         0       0       0       0
  7111 ;;Total ram usage:        0 bytes
  7112 ;; Hardware stack levels used:    1
  7113 ;; Hardware stack levels required when called:    2
  7114 ;; This function calls:
  7115 ;;		Nothing
  7116 ;; This function is called by:
  7117 ;;		_main
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120  0D35                     _timer1_init:	
  7121                           
  7122                           ;timer1.c: 22: TMR1H = 0;
  7123                           
  7124                           ; Regs used in _timer1_init: [status,2]
  7125  0D35  018F               	clrf	15	;volatile
  7126                           
  7127                           ;timer1.c: 23: TMR1L = 0;
  7128  0D36  018E               	clrf	14	;volatile
  7129                           
  7130                           ;timer1.c: 24: TMR1IF = 0;
  7131  0D37  100C               	bcf	12,0
  7132                           
  7133                           ;timer1.c: 25: T1OSCEN = 0;
  7134  0D38  1190               	bcf	16,3
  7135                           
  7136                           ;timer1.c: 26: TMR1GE = 0;
  7137  0D39  1310               	bcf	16,6
  7138                           
  7139                           ;timer1.c: 27: T1CKPS1 = 1;
  7140  0D3A  1690               	bsf	16,5
  7141                           
  7142                           ;timer1.c: 28: T1CKPS0 = 1;
  7143  0D3B  1610               	bsf	16,4
  7144                           
  7145                           ;timer1.c: 29: TMR1CS = 0;
  7146  0D3C  1090               	bcf	16,1
  7147                           
  7148                           ;timer1.c: 30: TMR1ON = 1;
  7149  0D3D  1410               	bsf	16,0
  7150                           
  7151                           ;timer1.c: 31: TMR1IE = 1;
  7152  0D3E  1683               	bsf	3,5	;RP0=1, select bank1
  7153  0D3F  140C               	bsf	12,0
  7154                           
  7155                           ;timer1.c: 32: WDTPS3=1;WDTPS2 = 0;WDTPS1=1;WDTPS0=1;
  7156  0D40  1283               	bcf	3,5	;RP0=0, select bank2
  7157  0D41  1703               	bsf	3,6	;RP1=1, select bank2
  7158  0D42  1605               	bsf	5,4
  7159  0D43  1185               	bcf	5,3
  7160  0D44  1505               	bsf	5,2
  7161  0D45  1485               	bsf	5,1
  7162                           
  7163                           ;timer1.c: 34: PSA=0;
  7164  0D46  1683               	bsf	3,5	;RP0=1, select bank1
  7165  0D47  1303               	bcf	3,6	;RP1=0, select bank1
  7166  0D48  1181               	bcf	1,3
  7167                           
  7168                           ;timer1.c: 36: RB0 = 1;
  7169  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  7170  0D4A  1406               	bsf	6,0
  7171  0D4B  0008               	return
  7172  0D4C                     __end_of_timer1_init:	
  7173                           
  7174                           	psect	text1383
  7175  0737                     __ptext1383:	
  7176 ;; =============== function _timer1_init ends ============
  7177                           
  7178                           
  7179 ;; *************** function _isr *****************
  7180 ;; Defined at:
  7181 ;;		line 90 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\sys.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;		None
  7186 ;; Return value:  Size  Location     Type
  7187 ;;		None               void
  7188 ;; Registers used:
  7189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 60/0
  7193 ;;		Unchanged: FFE00/0
  7194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7195 ;;      Params:         0       0       0       0
  7196 ;;      Locals:         0       0       0       0
  7197 ;;      Temps:          3       0       0       0
  7198 ;;      Totals:         3       0       0       0
  7199 ;;Total ram usage:        3 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    1
  7202 ;; This function calls:
  7203 ;;		_timer1_isr
  7204 ;;		_usart_isr
  7205 ;;		_timer2_isr
  7206 ;; This function is called by:
  7207 ;;		Interrupt level 1
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210  0737                     _isr:	
  7211                           
  7212                           ;sys.c: 102: if(TMR1IF == 1)
  7213  0737  1283               	bcf	3,5	;RP0=0, select bank0
  7214  0738  1303               	bcf	3,6	;RP1=0, select bank0
  7215  0739  1C0C               	btfss	12,0
  7216  073A  2F3D               	goto	i1l11754
  7217                           
  7218                           ;sys.c: 103: {
  7219                           ;sys.c: 104: timer1_isr();
  7220  073B  2751  118A         	fcall	_timer1_isr
  7221  073D                     i1l11754:	
  7222                           
  7223                           ;sys.c: 105: }
  7224                           ;sys.c: 107: if(RCIF && RCIE)
  7225  073D  1E8C               	btfss	12,5
  7226  073E  2F44               	goto	i1l11760
  7227  073F  1683               	bsf	3,5	;RP0=1, select bank1
  7228  0740  1E8C               	btfss	12,5
  7229  0741  2F44               	goto	i1l11760
  7230                           
  7231                           ;sys.c: 108: {
  7232                           ;sys.c: 109: usart_isr();
  7233  0742  2768  118A         	fcall	_usart_isr
  7234  0744                     i1l11760:	
  7235                           
  7236                           ;sys.c: 110: }
  7237                           ;sys.c: 111: if(TMR2IF)
  7238  0744  1283               	bcf	3,5	;RP0=0, select bank0
  7239  0745  1C8C               	btfss	12,1
  7240  0746  2F48               	goto	i1l5198
  7241                           
  7242                           ;sys.c: 112: {
  7243                           ;sys.c: 113: timer2_isr();
  7244  0747  2781               	fcall	_timer2_isr
  7245  0748                     i1l5198:	
  7246  0748  0873               	movf	??_isr+2,w
  7247  0749  008A               	movwf	10
  7248  074A  0872               	movf	??_isr+1,w
  7249  074B  0084               	movwf	4
  7250  074C  0871               	movf	??_isr,w
  7251  074D  0083               	movwf	3
  7252  074E  0EFE               	swapf	126,f
  7253  074F  0E7E               	swapf	126,w
  7254  0750  0009               	retfie
  7255  0751                     __end_of_isr:	
  7256  0751                     __ptext1386:	
  7257 ;; =============== function _usart_isr ends ============
  7258                           
  7259                           
  7260 ;; *************** function _timer1_isr *****************
  7261 ;; Defined at:
  7262 ;;		line 45 in file "F:\cjbc_zmz\subclock\szz485_v1.5.01\source\timer1.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;		None
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;		None
  7267 ;; Return value:  Size  Location     Type
  7268 ;;		None               void
  7269 ;; Registers used:
  7270 ;;		wreg, status,2, status,0
  7271 ;; Tracked objects:
  7272 ;;		On entry : 60/0
  7273 ;;		On exit  : 60/0
  7274 ;;		Unchanged: FFE00/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7276 ;;      Params:         0       0       0       0
  7277 ;;      Locals:         0       0       0       0
  7278 ;;      Temps:          0       0       0       0
  7279 ;;      Totals:         0       0       0       0
  7280 ;;Total ram usage:        0 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; This function calls:
  7283 ;;		Nothing
  7284 ;; This function is called by:
  7285 ;;		_isr
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288  0751                     _timer1_isr:	
  7289                           
  7290                           ;timer1.c: 46: TMR1IF = 0;
  7291                           
  7292                           ; Regs used in _timer1_isr: [wreg+status,2+status,0]
  7293  0751  100C               	bcf	12,0
  7294                           
  7295                           ;timer1.c: 47: if(timer1_cnt >= 3)
  7296  0752  3003               	movlw	3
  7297  0753  024E               	subwf	_timer1_cnt,w
  7298  0754  1C03               	skipc
  7299  0755  2F66               	goto	i1l11610
  7300                           
  7301                           ;timer1.c: 48: {
  7302                           ;timer1.c: 49: timer1_cnt = 0;
  7303  0756  01CE               	clrf	_timer1_cnt
  7304  0757  0000               	nop	;#
  7305  0758  0000               	nop	;#
  7306  0759  0000               	nop	;#
  7307  075A  0000               	nop	;#
  7308  075B  0000               	nop	;#
  7309  075C  0000               	nop	;#
  7310  075D  0000               	nop	;#
  7311                           
  7312                           ;timer1.c: 52: TMR1L = 0x76;
  7313  075E  3076               	movlw	118
  7314  075F  1283               	bcf	3,5	;RP0=0, select bank0
  7315  0760  1303               	bcf	3,6	;RP1=0, select bank0
  7316  0761  008E               	movwf	14	;volatile
  7317                           
  7318                           ;timer1.c: 53: TMR1H = 0x2F;
  7319  0762  302F               	movlw	47
  7320  0763  008F               	movwf	15	;volatile
  7321                           
  7322                           ;timer1.c: 54: up_time_flag++;
  7323  0764  0AD1               	incf	_up_time_flag,f
  7324                           
  7325                           ;timer1.c: 60: }
  7326  0765  0008               	return
  7327  0766                     i1l11610:	
  7328                           
  7329                           ;timer1.c: 61: else
  7330                           ;timer1.c: 62: {
  7331                           ;timer1.c: 64: timer1_cnt++;
  7332  0766  0ACE               	incf	_timer1_cnt,f
  7333  0767  0008               	return
  7334  0768                     __end_of_timer1_isr:	
  7335  0768                     __ptext1385:	
  7336 ;; =============== function _timer2_isr ends ============
  7337                           
  7338                           
  7339 ;; *************** function _usart_isr *****************
  7340 ;; Defined at:
  7341 ;;		line 71 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\usart.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  cbuffer         1    0[COMMON] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;		None               void
  7348 ;; Registers used:
  7349 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7350 ;; Tracked objects:
  7351 ;;		On entry : 60/20
  7352 ;;		On exit  : 60/0
  7353 ;;		Unchanged: FFE9F/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7355 ;;      Params:         0       0       0       0
  7356 ;;      Locals:         1       0       0       0
  7357 ;;      Temps:          0       0       0       0
  7358 ;;      Totals:         1       0       0       0
  7359 ;;Total ram usage:        1 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; This function calls:
  7362 ;;		Nothing
  7363 ;; This function is called by:
  7364 ;;		_isr
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367  0768                     _usart_isr:	
  7368                           
  7369                           ;usart.c: 72: UINT8 cbuffer;
  7370                           ;usart.c: 73: cbuffer = RCREG;
  7371                           
  7372                           ; Regs used in _usart_isr: [wreg-fsr0h+status,2+status,0]
  7373  0768  1283               	bcf	3,5	;RP0=0, select bank0
  7374  0769  081A               	movf	26,w	;volatile
  7375  076A  00F0               	movwf	usart_isr@cbuffer
  7376                           
  7377                           ;usart.c: 74: if(OERR == 1)
  7378  076B  1C98               	btfss	24,1
  7379  076C  2F70               	goto	i1l11670
  7380                           
  7381                           ;usart.c: 75: {
  7382                           ;usart.c: 76: CREN = 0;
  7383  076D  1218               	bcf	24,4
  7384                           
  7385                           ;usart.c: 77: CREN = 1;
  7386  076E  1618               	bsf	24,4
  7387                           
  7388                           ;usart.c: 78: return;
  7389  076F  0008               	return
  7390  0770                     i1l11670:	
  7391                           
  7392                           ;usart.c: 79: }
  7393                           ;usart.c: 80: if(usart_count<17)
  7394  0770  3011               	movlw	17
  7395  0771  0279               	subwf	_usart_count,w
  7396  0772  1803               	skipnc
  7397  0773  2F7C               	goto	i1l11676
  7398                           
  7399                           ;usart.c: 81: {
  7400                           ;usart.c: 82: rx_udata[usart_count++] = cbuffer;
  7401  0774  0879               	movf	_usart_count,w
  7402  0775  3EA0               	addlw	_rx_udata& (0+255)
  7403  0776  0084               	movwf	4
  7404  0777  0870               	movf	usart_isr@cbuffer,w
  7405  0778  1383               	bcf	3,7	;select IRP bank1
  7406  0779  0080               	movwf	0
  7407  077A  0AF9               	incf	_usart_count,f
  7408                           
  7409                           ;usart.c: 83: }
  7410  077B  2F7D               	goto	i1l11678
  7411  077C                     i1l11676:	
  7412                           
  7413                           ;usart.c: 84: else
  7414                           ;usart.c: 85: {
  7415                           ;usart.c: 86: usart_count=0;
  7416  077C  01F9               	clrf	_usart_count
  7417  077D                     i1l11678:	
  7418                           
  7419                           ;usart.c: 87: }
  7420                           ;usart.c: 88: flag_usart_start=1;
  7421  077D  01F7               	clrf	_flag_usart_start
  7422  077E  0AF7               	incf	_flag_usart_start,f
  7423                           
  7424                           ;usart.c: 89: usart_timer_cnt=0;
  7425  077F  01D2               	clrf	_usart_timer_cnt
  7426  0780  0008               	return
  7427  0781                     __end_of_usart_isr:	
  7428  0781                     __ptext1384:	
  7429 ;; =============== function _isr ends ============
  7430                           
  7431                           
  7432 ;; *************** function _timer2_isr *****************
  7433 ;; Defined at:
  7434 ;;		line 44 in file "F:\cjbc_zmz\subclock\SZZ485_V1.5.01\source\timer2.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;		None
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;		None
  7439 ;; Return value:  Size  Location     Type
  7440 ;;		None               void
  7441 ;; Registers used:
  7442 ;;		wreg, status,2, status,0
  7443 ;; Tracked objects:
  7444 ;;		On entry : 60/0
  7445 ;;		On exit  : 60/0
  7446 ;;		Unchanged: FFF9F/0
  7447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7448 ;;      Params:         0       0       0       0
  7449 ;;      Locals:         0       0       0       0
  7450 ;;      Temps:          0       0       0       0
  7451 ;;      Totals:         0       0       0       0
  7452 ;;Total ram usage:        0 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; This function calls:
  7455 ;;		Nothing
  7456 ;; This function is called by:
  7457 ;;		_isr
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460  0781                     _timer2_isr:	
  7461                           
  7462                           ;timer2.c: 45: TMR2IF = 0;
  7463                           
  7464                           ; Regs used in _timer2_isr: [wreg+status,2+status,0]
  7465  0781  108C               	bcf	12,1
  7466                           
  7467                           ;timer2.c: 46: if(flag_usart_start)
  7468  0782  0877               	movf	_flag_usart_start,w
  7469  0783  1903               	btfsc	3,2
  7470  0784  2F87               	goto	i1l11770
  7471                           
  7472                           ;timer2.c: 47: {
  7473                           ;timer2.c: 48: usart_timer_cnt++;
  7474  0785  0AD2               	incf	_usart_timer_cnt,f
  7475                           
  7476                           ;timer2.c: 49: }
  7477  0786  2F89               	goto	i1l11772
  7478  0787                     i1l11770:	
  7479                           
  7480                           ;timer2.c: 50: else
  7481                           ;timer2.c: 51: {
  7482                           ;timer2.c: 52: usart_timer_cnt=0;
  7483  0787  01D2               	clrf	_usart_timer_cnt
  7484                           
  7485                           ;timer2.c: 53: usart_count=0;
  7486  0788  01F9               	clrf	_usart_count
  7487  0789                     i1l11772:	
  7488                           
  7489                           ;timer2.c: 54: }
  7490                           ;timer2.c: 57: if(timer2_cnt >= 10)
  7491  0789  300A               	movlw	10
  7492  078A  0278               	subwf	_timer2_cnt,w
  7493  078B  1C03               	skipc
  7494  078C  2F8F               	goto	i1l11776
  7495                           
  7496                           ;timer2.c: 58: {
  7497                           ;timer2.c: 59: timer2_cnt = 0;
  7498  078D  01F8               	clrf	_timer2_cnt
  7499                           
  7500                           ;timer2.c: 61: }
  7501  078E  0008               	return
  7502  078F                     i1l11776:	
  7503                           
  7504                           ;timer2.c: 62: else
  7505                           ;timer2.c: 63: {
  7506                           ;timer2.c: 65: timer2_cnt++;
  7507  078F  0AF8               	incf	_timer2_cnt,f
  7508  0790  0008               	return
  7509  0791                     __end_of_timer2_isr:	
  7510                           
  7511                           	psect	intentry
  7512  0004                     __pintentry:	
  7513                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7514                           
  7515  0004                     interrupt_function:	
  7516  007E                     saved_w	set	btemp
  7517  0004  00FE               	movwf	btemp
  7518  0005  0803               	movf	3,w
  7519  0006  00F1               	movwf	??_isr
  7520  0007  0804               	movf	4,w
  7521  0008  00F2               	movwf	??_isr+1
  7522  0009  080A               	movf	10,w
  7523  000A  00F3               	movwf	??_isr+2
  7524  000B  118A  2F37         	ljmp	_isr
  7525                           
  7526                           	psect	text1387
  7527  0000                     __ptext1387:	
  7528 ;; =============== function _timer1_isr ends ============
  7529                           
  7530  007E                     btemp	set	126	;btemp
  7531  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.80 build 6738 
Symbol Table                                                                                   Mon Nov 13 12:51:34 2023

           shift_srclk@flag 0074                           pc 0002              ___bmul@product 0075  
     __end_of_interupt_init 0D2D               calccrc@crcbuf 0020      up_time1@copy_flag_dian 0053  
                        fsr 0004                         l789 0000  __size_of_system_value_init 0018  
                       _GIE 005F                         _RA0 0028                         _RA1 0029  
                       _RB0 0030                         _RA2 002A                         _RB1 0031  
                       _RA3 002B                         _RC0 0038                         _RB2 0032  
                       _RA4 002C                         _RC1 0039                         _RA5 002D  
                       _RC2 003A                         _RB4 0034                         _RC3 003B  
                       _RB5 0035                         _RC4 003C                         _RB6 0036  
                       _RC5 003D                         _RB7 0037                         _PSA 040B  
                       _isr 0737                         fsr0 0004                _up_time_flag 0051  
                       indf 0000                ___awmod@sign 0075               up_date@length 0024  
                      l3300 0618                        l3301 061B                        l3302 0623  
                      l3310 0638                        l3303 0626                        l3311 0640  
                      l1631 0D89                        l3304 062E                        l3312 0643  
                      l3313 064B                        l3401 04F6                        l1634 0000  
                      l2460 0000                        l1645 0000                        l3309 0637  
                      l3333 0000                        l4301 00A3                        l1654 0D20  
                      l3326 05BC                        l2470 0E78                        l3350 039F  
                      l2480 0000                        l3328 05C3                        l3360 0434  
                      l3416 0000                        l3336 0000                        l1657 0000  
                      l5201 0000                        l6001 0EF5                        l3329 05C2  
                      l6010 0EFC                        l2483 0000                        l6012 0F03  
                      l4316 01BA                        l5205 0000                        l6013 0F04  
                      l6021 0000                        l5213 0000                        l2477 0000  
                      l3373 0000                        l6014 0000                        l5207 0000  
                      l6007 0000                        l4319 039A                        l6024 0000  
                      l4362 0344                        l4346 02E5                        l6019 0F47  
                      l6027 0000                        l3379 0000                        l4347 02E7  
                      l4358 0323                        l4367 035C                        l5192 0000  
                      l4296 00A6                        l7603 0000                        l9212 0513  
                      ?_isr 0070                        l9205 0000                        l9221 0000  
                      l9215 0000                        l9400 0000                        l9172 0F71  
                      l9173 0000                        l5994 0000                        l9179 0000  
                      l5997 0EE5                        _CREN 00C4                 main@len_cnt 0125  
                      u4215 00D6                        u3445 0707                        u3704 05B1  
                      u3705 05AF                        _PEIE 005E                        u3645 0F5B  
                      u3575 0FDC                        u4607 033E                        _RCIE 0465  
                      _RCIF 0065                        u3765 07A0                        _OERR 00C1  
                      _TMR2 0011                        _TRMT 04C1                        _TXIF 0064  
               _usart_count 0079                        _main 002B                        btemp 007E  
                      start 000D              latch_rclk@flag 0074           ___bmul@multiplier 0076  
        up_time1@udata_time 0070          main@flag_send_data 0128          main@flag_save_data 0123  
                     ??_isr 0071                       l13000 0000                       l13010 0000  
                     l13002 0000                       l13020 0000                       l13012 0000  
                     l13004 0000                       l13100 0000                       l13022 0000  
                     l13014 0000                       l13006 0000                       l13102 0000  
                     l13110 0000                       l13024 0000                       l13016 0000  
                     l13008 0000                       l13040 0000                       l13032 0000  
                     l13112 0000                       l13104 0000                       l13120 0000  
                     l13026 0000                       l13018 0000                       l13114 0000  
                     l13106 0000                       l13122 0000                       l13130 0000  
                     l13210 0000                       l14002 01A8                       l13036 0000  
                     l13028 0000                       l13108 0000                       l13116 0000  
                     l13124 0000                       l13140 0000                       l13132 0000  
                     l13212 0000                       l13300 0000                       l14020 0000  
                     l14012 01BF                       l14004 01AC                       l13118 0000  
                     l13126 0000                       l13142 0000                       l13134 0000  
                     l13150 0000                       l13206 0000                       l13230 0000  
                     l13214 0000                       l13302 0000                       l14110 0000  
                     l14102 026E                       l14022 0000                       l13056 0000  
                     l13080 0000                       l13128 0000                       l13144 0000  
                     l13136 0000                       l13160 0000                       l13152 0000  
                     l13208 0000                       l13216 0000                       l13320 0FC3  
                     l13312 0000                       l14120 0000                       l14112 0000  
                     l14104 0000                       l14032 0000                       l13058 0000  
                     l13090 0000                       l13146 0000                       l13138 0000  
                     l13170 0000                       l13162 0000                       l13226 0F48  
                     l13218 0000                       l13242 0000                       l13234 0000  
                     l13250 0000                       l13306 0580                       l13314 0000  
                     l13410 0000                       l13402 0000                       l14210 0350  
                     l14202 0000                       l14114 0000                       l14106 0000  
                     l14130 0293                       l14042 0000                       l14026 01DD  
                     l14018 0000                       l13084 0F97                       l13092 0000  
                     l13148 0000                       l13164 0000                       l13172 0000  
                     l13180 0000                       l13228 0000                       l13244 0000  
                     l13236 0FAD                       l13308 0000                       l13332 0FD6  
                     l13340 0FE9                       l13324 0FCA                       l13420 0000  
                     l13412 0000                       l13404 0000                       l13500 0000  
                     l14204 0345                       l14212 0351                       l14140 0000  
                     l14124 028D                       l14116 0000                       l14108 027A  
                     l14132 02A7                       l14060 0000                       l14028 01DF  
                     l13086 0000                       l13094 0000                       l13166 0000  
                     l13158 07C7                       l13190 0000                       l13182 0000  
                     l13174 0000                       l13270 0000                       l13342 0000  
                     l13318 0000                       l13422 0000                       l13414 0000  
                     l13406 0000                       l13430 0000                       l13510 07B4  
                     l14222 035E                       l14214 0000                       l14150 0000  
                     l14142 0000                       l14134 0000                       l14118 0285  
                     l14070 0000                       l14062 0000                       l14038 01EE  
                     l14054 0212                       l13096 0000                       l13168 07D5  
                     l13184 0000                       l13176 0000                       l13264 0000  
                     l13280 0000                       l13272 0000                       l13344 0FF1  
                     l13424 0000                       l13416 0000                       l13408 0000  
                     l13440 0000                       l13504 0000                       l13520 06AD  
                     l13600 0000                       l14224 0000                       l14216 0000  
                     l14160 02D6                       l14152 0000                       l14144 0000  
                     l14136 0000                       l14080 0000                       l14072 0000  
                     l14064 0000                       l14048 020C                       l14056 0226  
                     l13098 0000                       l13194 0000                       l13186 0000  
                     l13178 0000                       l13258 0701                       l13266 0714  
                     l13274 0000                       l13290 0520                       l13338 0000  
                     l13370 0000                       l13426 0000                       l13418 0000  
                     l13450 0000                       l13434 0000                       l13506 0000  
                     l13530 0000                       l13522 06B0                       l13514 0000  
                     l13610 0000                       l13602 0000                       l14226 0000  
                     l14170 02FA                       l14162 02EE                       l14154 0000  
                     l14146 0000                       l14138 0000                       l14090 0263  
                     l14082 0000                       l14074 0000                       l14066 0000  
                     l14058 0228                       l13188 0000                       l13196 0000  
                     l13284 0000                       l13276 050D                       l13348 0000  
                     l13364 0000                       l13380 0000                       l13372 0000  
                     l13428 0000                       l13452 0000                       l13436 0000  
                     l13460 0000                       l13508 0797                       l13524 0000  
                     l13612 0000                       l13604 0000                       l13700 0000  
                     l14180 0000                       l14172 0000                       l14164 0000  
                     l14148 0000                       l14084 0000                       l14076 0000  
                     l14068 0000                       l13198 0000                       l13294 0000  
                     l13366 0000                       l13390 0000                       l13382 0000  
                     l13374 0000                       l13438 0000                       l13470 0000  
                     l13462 0000                       l13550 068C                       l13542 067A  
                     l13606 0000                       l13710 0000                       l13702 040E  
                     l14190 031D                       l14174 0000                       l14158 0000  
                     l14086 0254                       l14078 0000                       l13288 0000  
                     l13296 0000                       l13368 0000                       l13392 0000  
                     l13384 0000                       l13376 0000                       l13448 0F72  
                     l13456 0000                       l13464 05A0                       l13544 0000  
                     l13552 0699                       l13536 0000                       l13560 0000  
                     l13608 0000                       l13640 0000                       l13720 0422  
                     l13712 0000                       l13800 0000                       l14192 0000  
                     l14184 0313                       l14176 030A                       l14088 0000  
                     l14168 02F5                       l13298 056C                       l13394 0000  
                     l13386 0000                       l13378 0000                       l13490 0000  
                     l13482 0000                       l13546 0000                       l13554 0000  
                     l13570 0E21                       l13562 0000                       l13634 05EF  
                     l13626 0000                       l13722 042A                       l13730 0438  
                     l13650 0000                       l13810 0000                       l13802 0000  
                     l14194 0000                       l14186 0314                       l14178 0000  
                     l14098 0000                       l13396 0000                       l13388 0000  
                     l13492 05C9                       l13484 05BE                       l13548 0000  
                     l13556 0000                       l13580 0000                       l13564 0000  
                     l13636 0000                       l13628 0000                       l13644 0000  
                     l13740 0000                       l13708 040F                       l13724 042C  
                     l13660 03AC                       l13652 03A3                       l13812 0000  
                     l13804 0000                       l13398 0000                       l13486 0000  
                     l13478 05AB                       l13558 0000                       l13638 0000  
                     l13646 0586                       l13726 0000                       l13718 0421  
                     l13654 03A6                       l13822 04CF                       l13814 0000  
                     l13806 0000                       l13750 0450                       l13742 0000  
                     l13910 0000                       l13902 0000                       l13496 0000  
                     l13488 0000                       l13592 0E7B                       l13576 0E24  
                     l13568 0000                       l13648 0598                       l13736 0439  
                     l13728 0000                       l13680 0000                       l13656 03A8  
                     l13664 03B0                       l13840 0000                       l13832 04E1  
                     l13824 0000                       l13816 04CE                       l13808 0000  
                     l13752 0452                       l13744 0448                       l13760 045A  
                     l13920 0000                       l13498 0000                       l13594 0000  
                     l13578 0000                       l13738 0000                       l13690 0000  
                     l13682 0000                       l13674 03DB                       l13658 03AA  
                     l13666 03CD                       l13850 04FB                       l13842 0000  
                     l13834 04E2                       l13826 0000                       l13770 0485  
                     l13754 0454                       l13762 0477                       l13746 0000  
                     l13930 00EA                       l13922 0000                       l13914 0000  
                     l13588 0E66                       l13692 0000                       l13684 0000  
                     l13676 0000                       l13852 0000                       l13836 04EC  
                     l13780 0000                       l13772 0000                       l13844 04FA  
                     l13756 0456                       l13748 044D                       l13860 0000  
                     l13940 0000                       l13924 0000                       l13916 0089  
                     l13908 0081                       l13598 0000                       l13694 0000  
                     l13686 0000                       l13678 0000                       l13854 0000  
                     l13790 0000                       l13782 0000                       l13774 0000  
                     l13838 04EE                       l13870 0000                       l13862 0000  
                     l13942 0000                       l13926 0000                       l13918 00A9  
                     l13696 0000                       l13688 0000                       l13792 0000  
                     l13784 0000                       l13872 0000                       l13864 0000  
                     l13856 0000                       l13960 0000                       l13944 0000  
                     l13936 0000                       l13880 0000                       l13698 0000  
                     l13794 0000                       l13786 0000                       l13778 048E  
                     l13874 0000                       l13866 0000                       l13858 0000  
                     l13970 0000                       l13962 0000                       l13946 0000  
                     l13938 0000                       l13890 0043                       l13882 0000  
                     l13796 0000                       l13788 0000                       l13876 0000  
                     l13868 0000                       l13972 0000                       l13964 0000  
                     l13884 0000                       l12998 0000                       l13798 0000  
                     l13878 0000                       l13990 0000                       l13982 0000  
                     l13974 0000                       l13966 0000                       l13894 0000  
                     l13886 0000                       l13992 0000                       l13984 0000  
                     l13976 0000                       l13968 0000                       l13888 0000  
                     l13986 0000                       l13994 019D                       l13978 0000  
                     l13996 01A1                       l13988 0000                       ?_main 0070  
           __end_of___lbdiv 0522             __end_of___awmod 0FF6             __end_of___lbmod 0584  
                     _ANSEL 0188                 i2c_read@dat 0074             __end_of___lwmod 0719  
                     _RCREG 001A                       _RCSTA 0018             __end_of_calccrc 07DB  
                     _TMR1H 000F                       _TMR1L 000E                       _SPBRG 0099  
           __end_of_dec_hex 0611                       _TXREG 0019                       _TXSTA 0098  
           __end_of_id_code 0DA4               writebyte@data 0076             __end_of_hex_dec 0F2D  
             _copy_old_date 00B1          up_time2@udata_time 0070               _copy_old_time 00B5  
                     _putch 0D1F                       main@i 012E                       main@j 0129  
                     pclath 000A             __end_of_up_date 059A             __end_of_settime 0601  
                     status 0003                       wtemp0 007E             ___lbdiv@divisor 0076  
             _copy_rx_udata 00CF             ___lbdiv@counter 0024                hex_dec@hex16 0021  
             ??_ds3231_init 0077             readbyte@address 0020                __end_of_main 039C  
          __end_of_i2c_read 0F52            __end_of_i2c_send 0F16               main@chk_value 012C  
                WeekDay20@d 0025                  WeekDay20@m 0024                  WeekDay20@y 002C  
                    ??_main 0045                up_time1@date 0030                up_time2@date 0030  
        __size_of_MakeCRC16 0033               main@flag_temp 0124          main@calc_chk_value 0120  
                    ?_putch 0070                      _ANSELH 0189               main@copy_func 0126  
                    i1l5198 0748                      _TMR1GE 0086                      _TMR1IE 0460  
                    _TMR1IF 0060                      _TMR1CS 0081                      _TMR2IE 0461  
                    _TMR2IF 0061                      _TMR1ON 0080                      _TMR2ON 0092  
                    _WDTPS0 0829                      _WDTPS1 082A                      _WDTPS2 082B  
                    _WDTPS3 082C                      _TRISA0 0428                      _TRISA1 0429  
                    _TRISB0 0430                      _TRISA2 042A                      _TRISB1 0431  
                    _TRISA3 042B                      _TRISC0 0438                      _TRISB2 0432  
                    _TRISA4 042C                      _TRISC1 0439                      _TRISA5 042D  
                    _TRISC2 043A                      _TRISB4 0434                      _TRISC3 043B  
                    _TRISB5 0435                      _TRISC4 043C                      _TRISB6 0436  
                    _TRISC5 043D                      _TRISB7 0437                      _TRISC6 043E  
                    _TRISC7 043F            __end_of_date_add 06D9            __end_of_date_dec 069E  
              ?_shift_srclk 0070            __end_of_lcd_init 0567            __end_of_get_time 0EAF  
                    ___bmul 0FAB                   ??___lbdiv 0077                   ??___awmod 0074  
                 ??___lbmod 0075                ?_timer1_init 0070                ?_timer2_init 0070  
                 ??___lwmod 0074          __size_of_WeekDay20 0045                   ??_calccrc 0076  
                 ??_dec_hex 0026                      _isleap 06D9                ?_waitack_i2c 0070  
   __size_of_sendnotack_i2c 0009             ___awmod@divisor 0020            __end_of_readbyte 0ED8  
                    _months 00E0                   ??_id_code 0074               WeekDay20@week 002B  
           ___awmod@counter 0074         __end_of_ds3231_init 0DF6            __end_of_seg_disp 05D2  
                    clrloop 0D2E                   ??_hex_dec 0020            __end_of_time_add 0D73  
                    saved_w 007E                   ??_up_date 0027                   ??_settime 0077  
          __end_of_up_time1 0445            __end_of_up_time2 0507            ___lbdiv@dividend 0023  
           ___lbmod@divisor 0074             ___lbmod@counter 0021           __end_of_MakeCRC16 07C4  
       ___bmul@multiplicand 0074              __pcstackCOMMON 0070          __size_of_calc_zone 000B  
              __pidataBANK1 0000                __pidataBANK2 0000               __end_of_putch 0D26  
          ___lbdiv@quotient 0025                     ??_putch 0074                  __pbssBANK0 0048  
                __pbssBANK1 00A0               up_time1@count 0054           __end_of_WeekDay20 0F97  
               seg_disp@num 0021               up_time2@count 0057                   ?_i2c_read 0070  
                 ?_i2c_send 0070           i2c_send@send_data 0074                  __pmaintext 002B  
                   ?___bmul 0074                 _ds3231_init 0DEA                  __pintentry 0004  
                _flag_dian1 004A                  __ptext1350 0DEA                  __ptext1351 066A  
                __ptext1360 0D73                  __ptext1352 069E                  __ptext1344 0522  
                __ptext1361 06D9                  __ptext1353 0791                  __ptext1345 0445  
                __ptext1370 0ED8                  __ptext1362 0FB9                  __ptext1354 059A  
                __ptext1346 039C                  __ptext1371 0F16                  __ptext1363 0567  
                __ptext1355 0601                  __ptext1347 0584                  __ptext1380 0D90  
                __ptext1372 07C4                  __ptext1364 0507                  __ptext1356 0F52  
                __ptext1348 05D2                  __ptext1381 0D4C                  __ptext1373 07F3  
                __ptext1365 06F5                  __ptext1357 0F22                  __ptext1349 0E15  
                __ptext1382 0D35                  __ptext1374 07DB                  __ptext1366 0FAB  
                __ptext1358 0DF6                  __ptext1383 0737                  __ptext1375 0D26  
                __ptext1367 0F2D                  __ptext1359 0EAF                  __ptext1384 0781  
                __ptext1376 0632                  __ptext1368 0EFA                  __ptext1385 0768  
                __ptext1377 0611                  __ptext1369 0FA2                  __ptext1386 0751  
                __ptext1378 0F97                  __ptext1387 0000                  __ptext1379 0D1F  
                   ?_isleap 0024           _flag_data_process 0049                     _T1CKPS0 0084  
                   _T1CKPS1 0085                     _T2CKPS0 0090                     _T2CKPS1 0091  
                   _T1OSCEN 0083               i2c_read@count 0075                     i1l11600 0000  
                   i1l11602 0000                     i1l11610 0766                     i1l11604 0000  
                   i1l11606 0000                     i1l11608 0000                     i1l11590 0000  
                   i1l11670 0770                     i1l11750 0000                     i1l11592 0000  
                   i1l11584 0000                     i1l11664 0000                     i1l11760 0744  
                   i1l11594 0000                     i1l11586 0000                     i1l11674 0000  
                   i1l11666 0000                     i1l11770 0787                     i1l11754 073D  
                   i1l11596 0000                     i1l11676 077C                     i1l11772 0789  
                   i1l11764 0000                     i1l11598 0000                     i1l11678 077D  
                   i1l11766 0000                     i1l11776 078F                     i1l11768 0000  
                 ?_date_add 0070                   ?_date_dec 0070           __end_of_calc_zone 0FA2  
        __size_of_start_i2c 000C                   ?_lcd_init 0070                   ?_get_time 0070  
                   _TOUTPS0 0093                     _TOUTPS1 0094                     _TOUTPS2 0095  
                   _TOUTPS3 0096                  calccrc@chk 0021                  calccrc@crc 0074  
    __size_of_interupt_init 0007          __size_of_usart_isr 0019                  ??_i2c_read 0074  
                ??_i2c_send 0074                   ?_readbyte 0070                  _latch_rclk 0632  
                 ?_seg_disp 0075               i2c_send@count 0075                _flag_jiaoshi 004B  
        __size_of_writebyte 001F                     _WeekTab 012F                   ?_time_add 0070  
           __size_of___bmul 000E                     ___lbdiv 0507                     ___awmod 0FB9  
                   ___lbmod 0567                   ?_up_time1 0070                   ?_up_time2 0070  
                   ___lwmod 06F5            usart_isr@cbuffer 0070        __size_of_shift_srclk 0021  
                   _calccrc 07C4              _sendnotack_i2c 0FA2                     _dec_hex 0601  
           __size_of_isleap 001C                     _id_code 0D90        __size_of_timer1_init 0017  
      __size_of_timer2_init 000D                     _hex_dec 0F22        __size_of_waitack_i2c 0022  
              __size_of_isr 001A            ___awmod@dividend 0022                  ??_date_add 0075  
                ??_date_dec 0075                     _up_date 0584                     _settime 05D2  
                ??_lcd_init 0077                  ??_get_time 002D        end_of_initialization 0DE7  
                ??_readbyte 0076  up_time2@display_mode_state 0058                  ??_seg_disp 0020  
                _my_id_code 004D                   _SEG_CODE1 0015                   _SEG_CODE2 0020  
                ??_time_add 0074      __end_of_sendnotack_i2c 0FAB                  _timer1_cnt 004E  
                _timer2_cnt 0078                  _timer1_isr 0751                  _timer2_isr 0781  
         __end_of_start_i2c 0F22                  ??_up_time1 0077                  ??_up_time2 0077  
             _interupt_init 0D26           __end_of_usart_isr 0781            ___lbmod@dividend 0020  
         __end_of_writebyte 0E15                 up_date@date 0028                 up_date@dian 0025  
               up_date@flag 0026                 ___lbmod@rem 0022                 ?_latch_rclk 0070  
                _usart_init 0D73                dec_hex@dec16 0027             ?_sendnotack_i2c 0070  
                 _MakeCRC16 0791              ?_interupt_init 0070              __end_of___bmul 0FB9  
            __end_of_isleap 06F5      up_time2@copy_flag_dian 0056         start_initialization 0DA4  
        waitack_i2c@errtime 0074                 __end_of_isr 0751            _flag_usart_start 0077  
      get_time@ds3231_time2 002E        get_time@ds3231_time3 0035        get_time@ds3231_state 0043  
         __size_of_i2c_read 0025                   _WeekDay20 0F52           __size_of_i2c_send 001C  
              ?_ds3231_init 0070                    ??___bmul 0075                 ?_timer1_isr 0070  
               ?_timer2_isr 0070                  ?_MakeCRC16 0023                WeekDay20@day 002A  
               __pdataBANK1 00E0                 __pdataBANK2 012F           readbyte@recv_data 0021  
                  ??_isleap 0075                seg_disp@date 0022                seg_disp@flag 0076  
               __pbssCOMMON 0077         __size_of_latch_rclk 001D                  isleap@year 0024  
             __pcstackBANK0 0020               __pcstackBANK2 0120     ds3231_init@ds3231_state 0022  
         __size_of_date_add 003B           __size_of_date_dec 0034                   _calc_zone 0F97  
         __size_of_lcd_init 0045           __size_of_get_time 009A                  seg_disp@dp 0075  
                 __pnvBANK0 0060                 ?_usart_init 0070                  ?_WeekDay20 0024  
                 _main$5144 0122           __size_of_readbyte 0029           __size_of_seg_disp 0038  
           ??_interupt_init 0074                    ?___lbdiv 0076                    ?___awmod 0020  
                  ?___lbmod 0074                    ?___lwmod 0020           __size_of_time_add 0027  
                  ?_calccrc 0074                    ?_dec_hex 0070                    ?_id_code 0070  
                 __pstrings 000F           __size_of_up_time1 00A9           __size_of_up_time2 00C2  
                  ?_hex_dec 0070                    ?_up_date 0024                    ?_settime 0070  
       __size_of_timer1_isr 0017         __size_of_timer2_isr 0010                   date_add@t 0076  
            __size_of_putch 0007                   date_dec@t 0076                  ?_calc_zone 0070  
         interrupt_function 0004                   id_code@id 0074               ??_shift_srclk 0074  
               ??_MakeCRC16 0025               ??_timer1_init 0074               ??_timer2_init 0074  
             ??_waitack_i2c 0074                 __stringbase 0014                MakeCRC16@crc 002C  
              MakeCRC16@buf 0027                   _start_i2c 0F16                MakeCRC16@len 0023  
                 get_time@i 0044                   _usart_isr 0768         __size_of_usart_init 001D  
               _jiaoshi_cnt 004C                   _writebyte 0DF6            writebyte@address 0020  
                  _i2c_read 0F2D                    _i2c_send 0EFA                ??_latch_rclk 0074  
          ??_sendnotack_i2c 0074                 ??_WeekDay20 0026  up_time1@display_mode_state 0055  
       get_time@ds3231_time 003C            __size_of___lbdiv 001B            __size_of___awmod 003D  
          __size_of___lbmod 001D        __size_of_ds3231_init 000C            __size_of___lwmod 0024  
          __size_of_calccrc 0017            __size_of_dec_hex 0010         __end_of_shift_srclk 0632  
                ?_start_i2c 0070            __size_of_id_code 0014         __end_of_timer1_init 0D4C  
       __end_of_timer2_init 0800            __size_of_hex_dec 000B                   seg_disp@i 0023  
                ?_usart_isr 0070                    _date_add 069E                    _date_dec 066A  
         _system_value_init 07DB         __end_of_waitack_i2c 0EFA              _disp_data_time 0059  
        __end_of_latch_rclk 064F          ?_system_value_init 0070            __size_of_up_date 0016  
          __size_of_settime 002F                    _lcd_init 0522                    _get_time 0E15  
                ?_writebyte 0076                    calccrc@i 0022             _disp_rxd_length 0048  
               ??_calc_zone 0074               __size_of_main 0371         ??_system_value_init 0074  
           _usart_timer_cnt 0052                    _old_date 0060                    _readbyte 0EAF  
                  _old_time 005D                    _seg_disp 059A                    clear_ram 0D2D  
                 time_add@t 0074                    _time_add 0D4C                    _ntp_info 00B8  
              ??_timer1_isr 0070                ??_timer2_isr 0070                    _up_time1 039C  
                  _up_time2 0445                 MakeCRC16@hi 0028                 MakeCRC16@lo 0029  
                  _rx_udata 00A0                    main@func 012A                    _tx_udata 00BB  
 __end_of_system_value_init 07F3           settime@write_time 0028                   putch@byte 0074  
                 up_time1@i 0036                   up_time2@i 0039               _lcd_init$5143 003A  
            _up_led_display 0050                    intlevel1 0000          __end_of_timer1_isr 0768  
        __end_of_timer2_isr 0791            ___lwmod@dividend 0022                ??_usart_init 0075  
                 stringcode 000F           date_add@month_day 0075                 _shift_srclk 0611  
                MakeCRC16@i 002A                    up_date@i 0029                    settime@i 002F  
               _timer1_init 0D35                 _timer2_init 07F3                 _waitack_i2c 0ED8  
              _up_date_flag 004F                 ??_start_i2c 0074             ___lwmod@divisor 0020  
               ??_usart_isr 0070             ___lwmod@counter 0074                    stringdir 000F  
                  stringtab 000F          __end_of_usart_init 0D90                 ??_writebyte 0077  
